{"version":3,"sources":["webpack://_N_E/../suite/src/views/dashboard/components/AssetsCard/components/Asset/index.tsx","webpack://_N_E/../suite/src/views/dashboard/components/AssetsCard/index.tsx","webpack://_N_E/../suite/src/views/dashboard/components/PortfolioCard/components/Header/index.tsx","webpack://_N_E/../suite/src/views/dashboard/components/PortfolioCard/components/Exception/index.tsx","webpack://_N_E/../suite/src/views/dashboard/components/PortfolioCard/components/EmptyWallet/index.tsx","webpack://_N_E/../suite/src/workers/graph.worker.ts","webpack://_N_E/../suite/src/views/dashboard/components/PortfolioCard/components/DashboardGraph/index.tsx","webpack://_N_E/../suite/src/views/dashboard/components/PortfolioCard/components/DashboardGraph/Container.ts","webpack://_N_E/../suite/src/views/dashboard/components/PortfolioCard/index.tsx","webpack://_N_E/../suite/src/views/dashboard/components/SecurityFeatures/index.tsx","webpack://_N_E/../suite/src/views/dashboard/components/SecurityFeatures/Container.ts","webpack://_N_E/../suite/src/views/dashboard/index.tsx","webpack://_N_E/./pages/index.tsx","webpack://_N_E/../suite/src/components/suite/TransactionsGraph/components/GraphScaleDropdownItem/index.tsx","webpack://_N_E/../suite/src/components/dashboard/Section/index.tsx","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js"],"names":["LogoWrapper","styled","div","Coin","Symbol","props","theme","TYPE_LIGHT_GREY","variables","FONT_SIZE","TINY","FONT_WEIGHT","MEDIUM","StyledCol","motion","TYPE_DARK_GREY","NORMAL","STROKE_GREY","isLastRow","css","Col","ANIMATION","EXPAND","CoinNameWrapper","DEMI_BOLD","SCREEN_SIZE","SM","FailedCol","TYPE_RED","SMALL","REGULAR","CryptoBalanceWrapper","FiatBalanceWrapper","span","ExchangeRateWrapper","AssetSkeleton","shouldAnimate","useLoadingSkeleton","animate","width","Asset","React","memo","network","failed","cryptoValue","symbol","name","useTheme","setCoinFilter","setSearchString","useAccountSearch","goto","useActions","routerActions","onClick","accountIndex","accountType","undefined","size","toUpperCase","id","style","paddingLeft","paddingBottom","icon","color","value","amount","showApproximationIndicator","isTestnet","StyledCard","Card","InfoMessage","Header","Grid","StyledAddAccountButton","Button","AssetsCard","discovery","getDiscoveryStatus","useDiscovery","accounts","useAccounts","assets","forEach","a","push","networks","Object","keys","discoveryStatus","discoveryInProgress","status","isError","length","heading","variant","initial","map","i","NETWORKS","find","n","assetBalance","reduce","prev","plus","formattedBalance","BigNumber","assetFailed","f","key","toFixed","paddingRight","Wrapper","ValueWrapper","H2","Left","Right","ActionButton","useFastAccounts","onSelectedRange","useCallback","_range","updateGraphData","newAccountsOnly","actions","isWalletLoading","isWalletError","isWalletEmpty","receiveClickHandler","RangeSelector","align","intensity","portfolioValue","currency","localCurrency","Title","Description","StyledImage","Actions","Container","title","description","cta","isLocked","useDevice","Array","isArray","image","label","isLoading","action","data-test","testId","discoveryFailedMessage","error","networkError","details","account","accountUtils","includes","concat","Exception","exception","dispatch","useDispatch","device","type","suiteActions","modalActions","values","discoveryActions","async","result","deviceSettingsActions","use_passphrase","success","MD","Content","SecurityItem","BUTTON","EmptyWallet","Worker_fn","Worker","GraphWrapper","HiddenPlaceholder","CARD_PADDING_SIZE","ErrorMessage","DashboardGraph","selectedDevice","getGraphDataForInterval","selectedRange","graph","data","setData","useState","isProcessing","setIsProcessing","xTicks","setXticks","selectedDeviceState","state","failedAccounts","filter","deviceState","allFailed","onRefresh","receivedValueFn","sourceData","receivedFiat","sentValueFn","sentFiat","balanceValueFn","balanceFiat","minMaxValues","getMinMaxValueFromData","useEffect","worker","GraphWorker","rawData","postMessage","history","groupBy","handleMessage","event","aggregatedData","graphTicks","calcTicksFromData","getUnixTime","calcTicks","startDate","endDate","addEventListener","removeEventListener","terminate","hideToolbar","connect","wallet","settings","suite","bindActionCreators","graphActions","Component","Body","PortfolioCard","fiat","useFiatValue","isDeviceEmpty","useMemo","every","empty","coins","toString","body","showGraphControls","showMissingDataTooltip","networkType","tooltip","iconStyle","marginBottom","marginLeft","alignMenu","items","options","noHover","GraphScaleDropdownItem","callback","noPadding","LG","SecurityFeatures","flags","discreetMode","setDiscreetMode","createDeviceInstance","applySettings","changePin","rest","isHidden","setIsHidden","isDeviceLocked","isDisabledGlobal","analytics","useAnalytics","discreetModeCompleted","needsBackup","pinEnabled","backupFailed","features","needs_backup","unfinished_backup","pin_protection","featuresCompleted","Number","cards","dataTest","report","isDisabled","payload","m","card","ctaObject","walletSettingsActions","Divider","Dashboard","setLayout","useContext","LayoutContext","Index","selectedView","setSelectedView","useGraph","onChange","selectedOption","NEUE_FONT_SIZE","Section","forwardRef","ref","children","window","__NEXT_P"],"mappings":"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","file":"static/chunks/pages/index-01aeff71392b7cbfc511.js","sourcesContent":["import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Network } from '@wallet-types';\nimport { CoinLogo, Icon, variables, useTheme } from '@trezor/components';\nimport {\n    FiatValue,\n    SkeletonCircle,\n    SkeletonRectangle,\n    Ticker,\n    Translation,\n} from '@suite-components';\nimport { CoinBalance } from '@wallet-components';\nimport { isTestnet } from '@wallet-utils/accountUtils';\nimport * as routerActions from '@suite-actions/routerActions';\nimport { useActions, useAccountSearch, useLoadingSkeleton } from '@suite-hooks';\nimport { ANIMATION } from '@suite-config';\nimport { motion } from 'framer-motion';\n\nconst LogoWrapper = styled.div`\n    padding-right: 12px;\n    display: flex;\n    align-items: center;\n`;\n\nconst Coin = styled.div`\n    white-space: nowrap;\n    text-overflow: ellipsis;\n    overflow: hidden;\n`;\n\nconst Symbol = styled.div`\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    display: flex;\n    align-items: center;\n    padding-top: 2px;\n    font-size: ${variables.FONT_SIZE.TINY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    text-indent: 6px;\n`;\n\nconst StyledCol = styled(motion.div)<{ isLastRow?: boolean }>`\n    display: flex;\n    align-items: center;\n    padding: 16px 0px;\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    font-size: ${variables.FONT_SIZE.NORMAL};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    border-bottom: 1px solid ${props => props.theme.STROKE_GREY};\n    padding-right: 20px;\n\n    ${props =>\n        props.isLastRow &&\n        css`\n            border-bottom: none;\n        `}\n`;\n\nconst Col = (props: React.ComponentProps<typeof StyledCol>) => (\n    <StyledCol {...ANIMATION.EXPAND} {...props} />\n);\n\nconst CoinNameWrapper = styled(Col)`\n    overflow: hidden;\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n    margin-left: 25px;\n    text-overflow: ellipsis;\n    cursor: pointer;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        grid-column: 1 / 4;\n        border-bottom: none;\n    }\n`;\n\nconst FailedCol = styled(Col)`\n    color: ${props => props.theme.TYPE_RED};\n    font-size: ${variables.FONT_SIZE.SMALL};\n    font-weight: ${variables.FONT_WEIGHT.REGULAR};\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        grid-column: 1 / 3;\n        margin-left: 25px;\n        border-bottom: 1px solid ${props => props.theme.STROKE_GREY};\n    }\n`;\n\nconst CryptoBalanceWrapper = styled(Col)`\n    flex: 1;\n    white-space: nowrap;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        grid-column: 1 / 3;\n        margin-left: 25px;\n        border-bottom: 1px solid ${props => props.theme.STROKE_GREY};\n    }\n`;\n\nconst FiatBalanceWrapper = styled.span`\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    margin-left: 0.5ch;\n`;\n\nconst ExchangeRateWrapper = styled(Col)`\n    font-variant-numeric: tabular-nums;\n    margin-right: 25px;\n    padding-right: 0px;\n`;\n\ninterface Props {\n    network: Network;\n    failed: boolean;\n    cryptoValue: string;\n    isLastRow?: boolean;\n}\n\nconst Asset = React.memo(({ network, failed, cryptoValue, isLastRow }: Props) => {\n    const { symbol, name } = network;\n    const theme = useTheme();\n    const { setCoinFilter, setSearchString } = useAccountSearch();\n\n    const { goto } = useActions({ goto: routerActions.goto });\n    return (\n        <>\n            <CoinNameWrapper\n                isLastRow={isLastRow}\n                onClick={() => {\n                    goto('wallet-index', {\n                        symbol,\n                        accountIndex: 0,\n                        accountType: 'normal',\n                    });\n                    // activate coin filter and reset account search string\n                    setCoinFilter(symbol);\n                    setSearchString(undefined);\n                }}\n            >\n                <LogoWrapper>\n                    <CoinLogo symbol={symbol} size={24} />\n                </LogoWrapper>\n                <Coin>{name}</Coin>\n                <Symbol>{symbol.toUpperCase()}</Symbol>\n            </CoinNameWrapper>\n            {!failed ? (\n                <CryptoBalanceWrapper isLastRow={isLastRow}>\n                    <CoinBalance value={cryptoValue} symbol={symbol} />\n                    <FiatBalanceWrapper>\n                        <FiatValue\n                            amount={cryptoValue}\n                            symbol={symbol}\n                            showApproximationIndicator\n                        />\n                    </FiatBalanceWrapper>\n                </CryptoBalanceWrapper>\n            ) : (\n                <FailedCol isLastRow={isLastRow}>\n                    <Translation id=\"TR_DASHBOARD_ASSET_FAILED\" />\n                    <Icon\n                        style={{ paddingLeft: '4px', paddingBottom: '2px' }}\n                        icon=\"WARNING\"\n                        color={theme.TYPE_RED}\n                        size={14}\n                    />\n                </FailedCol>\n            )}\n            <ExchangeRateWrapper isLastRow={isLastRow}>\n                {!isTestnet(symbol) && <Ticker symbol={symbol} />}\n            </ExchangeRateWrapper>\n        </>\n    );\n});\n\nexport const AssetSkeleton = (props: { animate?: boolean }) => {\n    const { shouldAnimate } = useLoadingSkeleton();\n    const animate = props.animate ?? shouldAnimate;\n    return (\n        <>\n            <CoinNameWrapper isLastRow>\n                <LogoWrapper>\n                    <SkeletonCircle />\n                </LogoWrapper>\n                <Coin>\n                    <SkeletonRectangle animate={animate} />\n                </Coin>\n            </CoinNameWrapper>\n            <CryptoBalanceWrapper isLastRow>\n                <SkeletonRectangle animate={animate} width=\"160px\" />\n            </CryptoBalanceWrapper>\n\n            <ExchangeRateWrapper isLastRow>\n                <SkeletonRectangle animate={animate} />\n            </ExchangeRateWrapper>\n        </>\n    );\n};\n\nexport default Asset;\n","import React from 'react';\nimport styled, { useTheme } from 'styled-components';\nimport BigNumber from 'bignumber.js';\nimport { NETWORKS } from '@wallet-config';\nimport { Section } from '@dashboard-components';\nimport Asset, { AssetSkeleton } from './components/Asset';\nimport { Account } from '@wallet-types';\nimport { variables, Icon, Button } from '@trezor/components';\nimport { Card, Translation } from '@suite-components';\nimport { useDiscovery, useActions } from '@suite-hooks';\nimport { useAccounts } from '@wallet-hooks';\nimport * as routerActions from '@suite-actions/routerActions';\nimport { AnimatePresence } from 'framer-motion';\n\nconst StyledCard = styled(Card)`\n    flex-direction: column;\n    padding: 0px;\n    box-shadow: 0 1px 20px rgba(0, 0, 0, 0.05);\n`;\n\nconst InfoMessage = styled.div`\n    padding: 16px 25px;\n    display: flex;\n    color: ${props => props.theme.TYPE_RED};\n    font-size: ${variables.FONT_SIZE.TINY};\n    font-weight: ${variables.FONT_WEIGHT.REGULAR};\n`;\n\nconst Header = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.SMALL};\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: 500;\n    line-height: 1.57;\n    align-items: center;\n    padding: 12px 0px;\n    border-bottom: 1px solid ${props => props.theme.STROKE_GREY};\n\n    &:first-child {\n        padding-left: 18px;\n    }\n    &:last-child {\n        padding-right: 18px;\n    }\n`;\n\nconst Grid = styled.div`\n    display: grid;\n    overflow: hidden;\n    grid-template-columns: 2fr 2fr 1fr;\n`;\n\nconst StyledAddAccountButton = styled(Button)`\n    margin-left: 20px;\n`;\n\nconst AssetsCard = () => {\n    const theme = useTheme();\n    const { discovery, getDiscoveryStatus } = useDiscovery();\n    const { accounts } = useAccounts(discovery);\n    const { goto } = useActions({\n        goto: routerActions.goto,\n    });\n\n    const assets: { [key: string]: Account[] } = {};\n    accounts.forEach(a => {\n        if (!assets[a.symbol]) {\n            assets[a.symbol] = [];\n        }\n        assets[a.symbol].push(a);\n    });\n    const networks = Object.keys(assets);\n\n    const discoveryStatus = getDiscoveryStatus();\n    const discoveryInProgress = discoveryStatus && discoveryStatus.status === 'loading';\n    const isError = discoveryStatus && discoveryStatus.status === 'exception' && !networks.length;\n\n    return (\n        <Section\n            heading={\n                <>\n                    <Translation id=\"TR_MY_ASSETS\" />\n                    {/* This button is interim solution as described here https://github.com/trezor/trezor-suite/issues/2329 */}\n                    <StyledAddAccountButton\n                        variant=\"tertiary\"\n                        icon=\"PLUS\"\n                        onClick={() => goto('settings-coins')}\n                    >\n                        <Translation id=\"TR_ENABLE_MORE_COINS\" />\n                    </StyledAddAccountButton>\n                </>\n            }\n        >\n            <StyledCard>\n                <AnimatePresence initial={false}>\n                    <Grid>\n                        <Header>\n                            <Translation id=\"TR_ASSETS\" />\n                        </Header>\n                        <Header>\n                            <Translation id=\"TR_VALUES\" />\n                        </Header>\n                        <Header>\n                            <Translation id=\"TR_EXCHANGE_RATE\" />\n                        </Header>\n                        {networks.map((symbol, i) => {\n                            const network = NETWORKS.find(\n                                n => n.symbol === symbol && !n.accountType,\n                            );\n                            if (!network) {\n                                return 'unknown network';\n                            }\n\n                            const assetBalance = assets[symbol].reduce(\n                                (prev, a) => prev.plus(a.formattedBalance),\n                                new BigNumber(0),\n                            );\n\n                            const assetFailed = accounts.find(\n                                f => f.symbol === network.symbol && f.failed,\n                            );\n\n                            return (\n                                <Asset\n                                    key={symbol}\n                                    network={network}\n                                    failed={!!assetFailed}\n                                    cryptoValue={assetBalance.toFixed()}\n                                    isLastRow={i === networks.length - 1}\n                                />\n                            );\n                        })}\n                        {discoveryInProgress && <AssetSkeleton />}\n                    </Grid>\n                </AnimatePresence>\n\n                {isError && (\n                    <InfoMessage>\n                        <Icon\n                            style={{ paddingRight: '4px', paddingBottom: '2px' }}\n                            icon=\"WARNING\"\n                            color={theme.TYPE_RED}\n                            size={14}\n                        />\n                        <Translation id=\"TR_DASHBOARD_ASSETS_ERROR\" />\n                    </InfoMessage>\n                )}\n            </StyledCard>\n        </Section>\n    );\n};\n\nexport default AssetsCard;\n","import React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { variables, Button } from '@trezor/components';\nimport { Translation, FormattedNumber, HiddenPlaceholder } from '@suite-components';\nimport RangeSelector from '@suite-components/TransactionsGraph/components/RangeSelector';\nimport { updateGraphData } from '@wallet-actions/graphActions';\nimport { useFastAccounts } from '@wallet-hooks';\nimport { GraphRange } from '@wallet-types/graph';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    padding: 20px;\n    border-bottom: solid 1px ${props => props.theme.STROKE_GREY};\n`;\n\nconst ValueWrapper = styled.div`\n    font-size: ${variables.FONT_SIZE.H2};\n    /* font-weight: ${variables.FONT_WEIGHT.LIGHT}; */\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    font-variant-numeric: tabular-nums;\n`;\n\nconst Left = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    justify-content: space-between;\n`;\n\nconst Right = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst ActionButton = styled(Button)`\n    min-width: 150px;\n\n    & + & {\n        margin-left: 20px;\n    }\n`;\n\nexport interface Props {\n    portfolioValue: string;\n    localCurrency: string;\n    isWalletEmpty: boolean;\n    isWalletLoading: boolean;\n    isWalletError: boolean;\n    // buyClickHandler: () => void;\n    receiveClickHandler: () => void;\n}\n\nconst Header = (props: Props) => {\n    const accounts = useFastAccounts();\n\n    const onSelectedRange = useCallback(\n        (_range: GraphRange) => {\n            updateGraphData(accounts, { newAccountsOnly: true });\n        },\n        [accounts],\n    );\n\n    let actions = null;\n    if (!props.isWalletLoading && !props.isWalletError) {\n        actions = props.isWalletEmpty ? (\n            <ActionButton variant=\"primary\" onClick={props.receiveClickHandler}>\n                <Translation id=\"TR_RECEIVE\" />\n            </ActionButton>\n        ) : (\n            // <ActionButton variant=\"primary\" onClick={buyClickHandler}>\n            //         <Translation id=\"TR_BUY\" />\n            //     </ActionButton>\n            <RangeSelector onSelectedRange={onSelectedRange} align=\"right\" />\n        );\n    }\n\n    return (\n        <Wrapper>\n            <Left>\n                <ValueWrapper>\n                    <HiddenPlaceholder intensity={7}>\n                        <span>\n                            <FormattedNumber\n                                value={props.portfolioValue}\n                                currency={props.localCurrency}\n                            />\n                        </span>\n                    </HiddenPlaceholder>\n                </ValueWrapper>\n            </Left>\n            <Right>{actions}</Right>\n        </Wrapper>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variables, Button, IconProps } from '@trezor/components';\nimport { Image, Translation } from '@suite-components';\nimport { useDevice } from '@suite-hooks';\nimport { useDispatch } from 'react-redux';\nimport * as discoveryActions from '@wallet-actions/discoveryActions';\nimport * as deviceSettingsActions from '@settings-actions/deviceSettingsActions';\nimport * as suiteActions from '@suite-actions/suiteActions';\nimport * as modalActions from '@suite-actions/modalActions';\nimport * as routerActions from '@suite-actions/routerActions';\nimport * as accountUtils from '@wallet-utils/accountUtils';\nimport { Dispatch } from '@suite-types';\nimport { Discovery, DiscoveryStatus } from '@wallet-types';\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex-direction: column;\n    padding: 20px;\n    width: 100%;\n`;\n\nconst Title = styled.div`\n    font-size: ${variables.FONT_SIZE.H2};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n`;\n\nconst Description = styled.div`\n    font-size: ${variables.FONT_SIZE.SMALL};\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    text-align: center;\n`;\n\nconst StyledImage = styled(props => <Image {...props} />)`\n    width: 80px;\n    height: 80px;\n    margin: 20px 0px;\n`;\n\nconst Actions = styled.div`\n    display: flex;\n    justify-content: space-around;\n    width: 100%;\n`;\n\ninterface CTA {\n    label?: React.ComponentProps<typeof Translation>['id'];\n    variant?: React.ComponentProps<typeof Button>['variant'];\n    action: () => void;\n    icon?: IconProps['icon'];\n    testId?: string;\n}\n\ninterface ContainerProps {\n    title: React.ComponentProps<typeof Translation>['id'];\n    description: React.ComponentProps<typeof Translation>['id'] | JSX.Element;\n    cta: CTA | CTA[];\n}\n\n// Common wrapper for all views\nconst Container = ({ title, description, cta }: ContainerProps) => {\n    const { isLocked } = useDevice();\n    const actions = Array.isArray(cta) ? cta : [cta];\n    return (\n        <Wrapper>\n            <Title>\n                <Translation id={title} />\n            </Title>\n            <Description>\n                {typeof description === 'string' ? <Translation id={description} /> : description}\n            </Description>\n            <StyledImage image=\"UNI_ERROR\" />\n            <Actions>\n                {actions.map(a => (\n                    <Button\n                        key={a.label || 'TR_RETRY'}\n                        variant={a.variant || 'primary'}\n                        icon={a.icon || 'PLUS'}\n                        isLoading={isLocked()}\n                        onClick={a.action}\n                        data-test={a.testId}\n                    >\n                        <Translation id={a.label || 'TR_RETRY'} />\n                    </Button>\n                ))}\n            </Actions>\n        </Wrapper>\n    );\n};\n\ninterface Props {\n    exception: Extract<DiscoveryStatus, { status: 'exception' }>;\n    discovery?: Discovery;\n    symbol?: any;\n}\n\nconst discoveryFailedMessage = (discovery?: Discovery) => {\n    if (!discovery) return '';\n    if (discovery.error) return <div>{discovery.error}</div>;\n    // group all failed networks into array of errors\n    const networkError: string[] = [];\n    const details = discovery.failed.reduce((value, account) => {\n        const n = accountUtils.getNetwork(account.symbol)!;\n        if (networkError.includes(account.symbol)) return value;\n        networkError.push(account.symbol);\n        return value.concat(\n            <div key={account.symbol}>\n                {n.name}: {account.error}\n            </div>,\n        );\n    }, [] as JSX.Element[]);\n    return <>{details}</>;\n};\n\nconst Exception = ({ exception, discovery, symbol }: Props) => {\n    const dispatch = useDispatch<Dispatch>();\n    const { device } = useDevice();\n    switch (exception.type) {\n        case 'auth-failed':\n            return (\n                <Container\n                    title=\"TR_ACCOUNT_EXCEPTION_AUTH_ERROR\"\n                    description=\"TR_ACCOUNT_EXCEPTION_AUTH_ERROR_DESC\"\n                    cta={{ action: () => dispatch(suiteActions.authorizeDevice()) }}\n                />\n            );\n        case 'auth-confirm-failed':\n            return (\n                <Container\n                    title=\"TR_AUTH_CONFIRM_FAILED_TITLE\"\n                    description=\"TR_AUTH_CONFIRM_FAILED_DESC\"\n                    cta={{\n                        action: () => dispatch(suiteActions.authConfirm()),\n                        testId: '@passphrase-mismatch/retry-button',\n                    }}\n                />\n            );\n        case 'discovery-empty':\n            return (\n                <Container\n                    title=\"TR_ACCOUNT_EXCEPTION_DISCOVERY_EMPTY\"\n                    description=\"TR_ACCOUNT_EXCEPTION_DISCOVERY_EMPTY_DESC\"\n                    cta={[\n                        {\n                            action: () => dispatch(routerActions.goto('settings-coins')),\n                            variant: 'secondary',\n                            icon: 'SETTINGS',\n                            label: 'TR_COIN_SETTINGS',\n                        },\n                        {\n                            action: () =>\n                                dispatch(\n                                    modalActions.openModal({\n                                        type: 'add-account',\n                                        device: device!,\n                                        symbol,\n                                    }),\n                                ),\n                            label: 'TR_ADD_ACCOUNT',\n                        },\n                    ]}\n                />\n            );\n        case 'discovery-failed':\n            return (\n                <Container\n                    title=\"TR_DASHBOARD_DISCOVERY_ERROR\"\n                    description={\n                        <Translation\n                            id=\"TR_DASHBOARD_DISCOVERY_ERROR_PARTIAL_DESC\"\n                            values={{ details: discoveryFailedMessage(discovery) }}\n                        />\n                    }\n                    cta={{ action: () => dispatch(discoveryActions.restart()) }}\n                />\n            );\n        case 'device-unavailable':\n            return (\n                <Container\n                    title=\"TR_DASHBOARD_DISCOVERY_ERROR\"\n                    description={\n                        <Translation\n                            id=\"TR_ACCOUNT_PASSPHRASE_DISABLED\"\n                            values={{ details: discoveryFailedMessage(discovery) }}\n                        />\n                    }\n                    cta={{\n                        action: async () => {\n                            // enable passphrase\n                            const result = await dispatch(\n                                // eslint-disable-next-line @typescript-eslint/naming-convention\n                                deviceSettingsActions.applySettings({ use_passphrase: true }),\n                            );\n                            if (!result || !result.success) return;\n                            // restart discovery\n                            dispatch(discoveryActions.restart());\n                        },\n                        label: 'TR_ACCOUNT_ENABLE_PASSPHRASE',\n                    }}\n                />\n            );\n        default:\n            return null;\n    }\n};\n\nexport default Exception;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variables } from '@trezor/components';\nimport { Translation, Image } from '@suite-components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    padding: 54px 42px;\n    align-items: center;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.MD}) {\n        flex-direction: column;\n    }\n`;\n\nconst Content = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Title = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.H2};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    margin-bottom: 30px;\n    text-align: center;\n`;\n\nconst StyledImage = styled(props => <Image {...props} />)`\n    display: flex;\n    width: 220px;\n    height: 180px;\n    margin-right: 52px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.MD}) {\n        margin-bottom: 20px;\n    }\n`;\n\n// const InlineButton = styled(Button)`\n//     display: inline-flex;\n// `;\n\nconst SecurityItem = styled.div`\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-size: ${variables.FONT_SIZE.BUTTON};\n\n    & + & {\n        margin-top: 12px;\n    }\n`;\n\ntype Props = React.HTMLAttributes<HTMLDivElement>;\n\nconst EmptyWallet = (props: Props) => {\n    return (\n        <Wrapper {...props} data-test=\"@dashboard/wallet-ready\">\n            <StyledImage image=\"EMPTY_DASHBOARD\" />\n            <Content>\n                <Title>\n                    <Translation id=\"TR_YOUR_WALLET_IS_READY_WHAT\" />\n                </Title>\n                <SecurityItem>\n                    <Translation id=\"TR_ADDITIONAL_SECURITY_FEATURES\" />\n                    {/* <InlineButton\n                        variant=\"tertiary\"\n                        size=\"small\"\n                        icon=\"ARROW_RIGHT\"\n                        alignIcon=\"right\"\n                        onClick={() => {\n                            console.log('yup it does not do anything. we know!');\n                        }}\n                    >\n                        <Translation id=\"TR_FINISH_ADVANCED_SECURITY\" />\n                    </InlineButton> */}\n                </SecurityItem>\n                {/* <SecurityItem>\n                    <Translation id=\"TR_LOOKING_FOR_QUICK_EASY\" />\n                    <InlineButton\n                        variant=\"tertiary\"\n                        size=\"small\"\n                        icon=\"ARROW_RIGHT\"\n                        alignIcon=\"right\"\n                        onClick={() => {\n                            console.log('do something');\n                        }}\n                    >\n                        Buy BTC\n                    </InlineButton>\n                </SecurityItem> */}\n            </Content>\n        </Wrapper>\n    );\n};\n\nexport default EmptyWallet;\n","export default function Worker_fn() {\n  return new Worker(__webpack_public_path__ + \"static/babe58a755bc6402a5cd.worker.js\");\n}\n","import React, { useState, useEffect, useCallback } from 'react';\nimport { AggregatedDashboardHistory } from '@wallet-types/graph';\nimport { TransactionsGraph, Translation, HiddenPlaceholder } from '@suite-components';\nimport { Props } from './Container';\nimport { getUnixTime } from 'date-fns';\nimport styled from 'styled-components';\nimport { calcTicks, calcTicksFromData } from '@suite-utils/date';\nimport { variables, Button } from '@trezor/components';\nimport { CARD_PADDING_SIZE } from '@suite-constants/layout';\n// https://github.com/zeit/next.js/issues/4768\n// eslint-disable-next-line import/no-webpack-loader-syntax\nimport GraphWorker from 'worker-loader?filename=static/[hash].worker.js!../../../../../../workers/graph.worker';\nimport { getMinMaxValueFromData } from '@suite/utils/wallet/graphUtils';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1 1 auto;\n    flex-direction: column;\n`;\n\nconst GraphWrapper = styled(HiddenPlaceholder)`\n    display: flex;\n    flex: 1 1 auto;\n    padding: ${CARD_PADDING_SIZE} 0px;\n    height: 320px;\n`;\n\nconst ErrorMessage = styled.div`\n    display: flex;\n    flex-direction: column;\n    width: 100%;\n    padding: 20px;\n    align-items: center;\n    justify-content: center;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-size: ${variables.FONT_SIZE.SMALL};\n    text-align: center;\n`;\n\nconst DashboardGraph = React.memo((props: Props) => {\n    const {\n        accounts,\n        selectedDevice,\n        updateGraphData,\n        getGraphDataForInterval,\n        localCurrency,\n    } = props;\n    const { selectedRange } = props.graph;\n\n    const [data, setData] = useState<AggregatedDashboardHistory[]>([]);\n    const [isProcessing, setIsProcessing] = useState(false);\n    const [xTicks, setXticks] = useState<number[]>([]);\n\n    const selectedDeviceState = selectedDevice?.state;\n    const { isLoading } = props.graph;\n    const failedAccounts = props.graph.error?.filter(a => a.deviceState === selectedDeviceState);\n    const allFailed = failedAccounts && failedAccounts.length === accounts.length;\n\n    const onRefresh = useCallback(() => {\n        updateGraphData(accounts);\n    }, [updateGraphData, accounts]);\n\n    const receivedValueFn = useCallback(\n        (sourceData: AggregatedDashboardHistory) => sourceData.receivedFiat[localCurrency],\n        [localCurrency],\n    );\n\n    const sentValueFn = useCallback(\n        (sourceData: AggregatedDashboardHistory) => sourceData.sentFiat[localCurrency],\n        [localCurrency],\n    );\n\n    const balanceValueFn = useCallback(\n        (sourceData: AggregatedDashboardHistory) => sourceData.balanceFiat?.[localCurrency],\n        [localCurrency],\n    );\n\n    const minMaxValues = getMinMaxValueFromData(\n        data,\n        'dashboard',\n        sentValueFn,\n        receivedValueFn,\n        () => '0',\n    );\n\n    useEffect(() => {\n        if (!isLoading) {\n            const worker = new GraphWorker();\n            setIsProcessing(true);\n            const rawData = getGraphDataForInterval({ deviceState: selectedDeviceState });\n\n            worker.postMessage({\n                history: rawData,\n                groupBy: selectedRange.groupBy,\n                type: 'dashboard',\n            });\n\n            const handleMessage = (event: MessageEvent) => {\n                const aggregatedData = event.data;\n                const graphTicks =\n                    selectedRange.label === 'all'\n                        ? calcTicksFromData(aggregatedData).map(getUnixTime)\n                        : calcTicks(selectedRange.startDate, selectedRange.endDate).map(\n                              getUnixTime,\n                          );\n\n                setData(aggregatedData);\n                setXticks(graphTicks);\n                setIsProcessing(false);\n            };\n\n            worker.addEventListener('message', handleMessage);\n            return () => {\n                worker.removeEventListener('message', handleMessage);\n                worker.terminate();\n            };\n        }\n    }, [isLoading, getGraphDataForInterval, selectedDeviceState, selectedRange]);\n\n    return (\n        <Wrapper data-test=\"@dashboard/graph\">\n            <GraphWrapper>\n                {allFailed ? (\n                    <ErrorMessage>\n                        <Translation id=\"TR_COULD_NOT_RETRIEVE_DATA\" />\n                        <Button onClick={onRefresh} icon=\"REFRESH\" variant=\"tertiary\">\n                            <Translation id=\"TR_RETRY\" />\n                        </Button>\n                    </ErrorMessage>\n                ) : (\n                    <TransactionsGraph\n                        hideToolbar\n                        variant=\"all-assets\"\n                        onRefresh={onRefresh}\n                        isLoading={isLoading || isProcessing}\n                        localCurrency={props.localCurrency}\n                        xTicks={xTicks}\n                        minMaxValues={minMaxValues}\n                        data={data}\n                        selectedRange={selectedRange}\n                        receivedValueFn={receivedValueFn}\n                        sentValueFn={sentValueFn}\n                        balanceValueFn={balanceValueFn}\n                    />\n                )}\n            </GraphWrapper>\n        </Wrapper>\n    );\n});\n\n// DashboardGraph.whyDidYouRender = true;\nexport default DashboardGraph;\n","import { connect } from 'react-redux';\nimport * as graphActions from '@wallet-actions/graphActions';\nimport { AppState, Dispatch } from '@suite-types';\nimport { Account } from '@wallet-types';\nimport Component from './index';\nimport { bindActionCreators } from 'redux';\n\nconst mapStateToProps = (state: AppState) => ({\n    localCurrency: state.wallet.settings.localCurrency,\n    graph: state.wallet.graph,\n    selectedDevice: state.suite.device,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n    bindActionCreators(\n        {\n            updateGraphData: graphActions.updateGraphData,\n            getGraphDataForInterval: graphActions.getGraphDataForInterval,\n        },\n        dispatch,\n    );\n\ninterface OwnProps {\n    accounts: Account[];\n}\nexport type Props = ReturnType<typeof mapStateToProps> &\n    ReturnType<typeof mapDispatchToProps> &\n    OwnProps;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);\n","import React, { useMemo } from 'react';\nimport styled from 'styled-components';\nimport { useDispatch } from 'react-redux';\nimport { Dropdown } from '@trezor/components';\nimport { Card, QuestionTooltip } from '@suite-components';\nimport { Section } from '@dashboard-components';\nimport * as accountUtils from '@wallet-utils/accountUtils';\nimport { useDiscovery } from '@suite-hooks';\nimport { useFastAccounts, useFiatValue } from '@wallet-hooks';\nimport { goto } from '@suite-actions/routerActions';\nimport { SkeletonTransactionsGraph } from '@suite-components/TransactionsGraph';\n\nimport Header from './components/Header';\nimport Exception from './components/Exception';\nimport EmptyWallet from './components/EmptyWallet';\nimport DashboardGraph from './components/DashboardGraph/Container';\nimport GraphScaleDropdownItem from '@suite-components/TransactionsGraph/components/GraphScaleDropdownItem';\n\nconst StyledCard = styled(Card)`\n    flex-direction: column;\n    min-height: 400px;\n    box-shadow: 0 1px 20px rgba(0, 0, 0, 0.05);\n`;\n\nconst Body = styled.div`\n    display: flex;\n    align-items: center;\n    padding: 0px 20px;\n    flex: 1;\n`;\n\nconst PortfolioCard = React.memo(() => {\n    const dispatch = useDispatch();\n    const { fiat, localCurrency } = useFiatValue();\n    const { discovery, getDiscoveryStatus } = useDiscovery();\n    const accounts = useFastAccounts();\n\n    const isDeviceEmpty = useMemo(() => accounts.every(a => a.empty), [accounts]);\n    const portfolioValue = accountUtils\n        .getTotalFiatBalance(accounts, localCurrency, fiat.coins)\n        .toString();\n\n    const discoveryStatus = getDiscoveryStatus();\n\n    // TODO: DashboardGraph will get mounted twice (thus triggering data processing twice)\n    // 1. DashboardGraph gets mounted\n    // 2. Discovery starts, DashboardGraph is unmounted, Loading mounts\n    // 3. Discovery stops (no accounts added), Loading unmounted, new instance of DashboardGraph gets mounted\n\n    let body = null;\n    if (discoveryStatus && discoveryStatus.status === 'exception') {\n        body = <Exception exception={discoveryStatus} discovery={discovery} />;\n    } else if (discoveryStatus && discoveryStatus.status === 'loading') {\n        body = <SkeletonTransactionsGraph data-test=\"@dashboard/loading\" />;\n    } else {\n        body = isDeviceEmpty ? <EmptyWallet /> : <DashboardGraph accounts={accounts} />;\n    }\n\n    const isWalletEmpty = !discoveryStatus && isDeviceEmpty;\n    const isWalletLoading = discoveryStatus?.status === 'loading' ?? false;\n    const isWalletError = discoveryStatus?.status === 'exception' ?? false;\n    const showGraphControls = !isWalletEmpty && !isWalletLoading && !isWalletError;\n\n    const showMissingDataTooltip =\n        showGraphControls &&\n        !!accounts.find(a => a.networkType === 'ethereum' || a.networkType === 'ripple');\n\n    return (\n        <Section\n            heading={\n                <QuestionTooltip\n                    size={18}\n                    label=\"TR_MY_PORTFOLIO\"\n                    tooltip={showMissingDataTooltip ? 'TR_GRAPH_MISSING_DATA' : undefined}\n                    iconStyle={{ marginBottom: 2, marginLeft: 4 }}\n                />\n            }\n            actions={\n                showGraphControls ? (\n                    <Dropdown\n                        alignMenu=\"right\"\n                        items={[\n                            {\n                                key: 'group1',\n                                label: '图表展示',\n                                options: [\n                                    {\n                                        noHover: true,\n                                        key: 'graphView',\n                                        label: <GraphScaleDropdownItem />,\n                                        callback: () => false,\n                                    },\n                                ],\n                            },\n                        ]}\n                    />\n                ) : undefined\n            }\n        >\n            <StyledCard noPadding>\n                <Header\n                    portfolioValue={portfolioValue}\n                    localCurrency={localCurrency}\n                    isWalletEmpty={isWalletEmpty}\n                    isWalletLoading={isWalletLoading}\n                    isWalletError={isWalletError}\n                    receiveClickHandler={() => dispatch(goto('wallet-receive'))}\n                />\n                <Body>{body}</Body>\n            </StyledCard>\n        </Section>\n    );\n});\n\nexport default PortfolioCard;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Button, SecurityCard, SecurityCardProps, variables } from '@trezor/components';\nimport { Translation } from '@suite-components';\nimport { Section } from '@dashboard-components';\nimport { Props } from './Container';\nimport { AcquiredDevice } from '@suite-types';\nimport { useDevice, useDiscovery, useAnalytics } from '@suite-hooks';\n\nconst Content = styled.div`\n    display: grid;\n    grid-gap: 20px;\n    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n\n    @media only screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        grid-template-columns: 1fr 1fr;\n    }\n    @media only screen and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));\n    }\n`;\n\nconst SecurityFeatures = ({\n    device,\n    flags,\n    discreetMode,\n    setDiscreetMode,\n    createDeviceInstance,\n    applySettings,\n    goto,\n    changePin,\n    ...rest\n}: Props) => {\n    const [isHidden, setIsHidden] = useState(false);\n    const { isLocked } = useDevice();\n    const isDeviceLocked = isLocked();\n    const { getDiscoveryStatus } = useDiscovery();\n    const discoveryStatus = getDiscoveryStatus();\n    const isDisabledGlobal = discoveryStatus && discoveryStatus.status === 'loading';\n    const analytics = useAnalytics();\n\n    const { discreetModeCompleted } = flags;\n    let needsBackup;\n    let pinEnabled;\n    let backupFailed;\n\n    if (device && device.features) {\n        // TODO: add \"error - backup failed\" instead of needsBackup\n        // TODO: add \"enable passphrase\" instead of hiddenWalletCreated\n        needsBackup = device.features.needs_backup || device.features.unfinished_backup;\n        pinEnabled = device.features.pin_protection;\n        backupFailed = device.features.unfinished_backup;\n    }\n\n    const featuresCompleted =\n        Number(!needsBackup) + Number(!!pinEnabled) + Number(!!discreetModeCompleted);\n\n    const backupData: SecurityCardProps = needsBackup\n        ? {\n              variant: 'primary',\n              icon: 'BACKUP',\n              heading: <Translation id=\"TR_BACKUP_YOUR_DEVICE\" />,\n              description: <Translation id=\"TR_RECOVERY_SEED_IS_OFFLINE\" />,\n              cta: {\n                  label: <Translation id=\"TR_BACKUP_NOW\" />,\n                  dataTest: 'backup',\n                  action: () => {\n                      goto('backup-index');\n                      analytics.report({\n                          type: 'dashboard/security-card/create-backup',\n                      });\n                  },\n                  isDisabled: !!backupFailed,\n              },\n          }\n        : {\n              variant: 'secondary',\n              icon: 'BACKUP',\n              heading: <Translation id=\"TR_BACKUP_SEED_CREATED_SUCCESSFULLY\" />,\n              cta: {\n                  label: <Translation id=\"TR_CHECK_SEED_IN_SETTINGS\" />,\n                  dataTest: 'seed-link',\n                  action: () => {\n                      goto('settings-device');\n                      analytics.report({\n                          type: 'dashboard/security-card/seed-link',\n                      });\n                  },\n              },\n          };\n\n    const pinData: SecurityCardProps = !pinEnabled\n        ? {\n              variant: 'primary',\n              icon: 'PIN',\n              heading: <Translation id=\"TR_PIN\" />,\n              description: <Translation id=\"TR_SET_STRONG_PIN_NUMBER_AGAINST\" />,\n              cta: {\n                  label: <Translation id=\"TR_ENABLE_PIN\" />,\n                  dataTest: 'pin',\n                  action: () => {\n                      changePin({});\n                      analytics.report({\n                          type: 'dashboard/security-card/set-pin',\n                      });\n                  },\n                  isDisabled: isDeviceLocked,\n              },\n          }\n        : {\n              variant: 'secondary',\n              icon: 'PIN',\n              heading: <Translation id=\"TR_DEVICE_PIN_PROTECTION_ENABLED\" />,\n              cta: {\n                  label: <Translation id=\"TR_CHANGE_PIN_IN_SETTINGS\" />,\n                  dataTest: 'pin-link',\n                  action: () => {\n                      goto('settings-device');\n                      analytics.report({\n                          type: 'dashboard/security-card/change-pin',\n                      });\n                  },\n              },\n          };\n\n    const discreetModeData: SecurityCardProps = !discreetModeCompleted\n        ? {\n              variant: 'primary',\n              icon: 'DISCREET',\n              heading: <Translation id=\"TR_DISCREET_MODE\" />,\n              description: <Translation id=\"TR_TRY_TO_TEMPORARILY_HIDE\" />,\n              cta: {\n                  label: <Translation id=\"TR_TRY_DISCREET_MODE\" />,\n                  action: () => {\n                      setDiscreetMode(true);\n                      analytics.report({\n                          type: 'dashboard/security-card/enable-discreet',\n                      });\n                  },\n                  dataTest: 'discreet',\n              },\n          }\n        : {\n              variant: 'secondary',\n              icon: 'DISCREET',\n              heading: <Translation id=\"TR_DISCREET_MODE_TRIED_OUT\" />,\n              cta: {\n                  label: discreetMode ? (\n                      <Translation id=\"TR_DISABLE_DISCREET_MODE\" />\n                  ) : (\n                      <Translation id=\"TR_ENABLE_DISCREET_MODE\" />\n                  ),\n                  action: () => {\n                      setDiscreetMode(!discreetMode);\n                      analytics.report({\n                          type: 'dashboard/security-card/toggle-discreet',\n                          payload: {\n                              value: !discreetMode,\n                          },\n                      });\n                  },\n                  dataTest: 'toggle-discreet',\n              },\n          };\n\n    const cards: SecurityCardProps[] = [backupData, pinData, discreetModeData];\n\n    return (\n        <Section\n            heading={\n                <Translation\n                    id=\"TR_SECURITY_FEATURES_COMPLETED_N\"\n                    values={{ n: featuresCompleted, m: 3 }}\n                />\n            }\n            actions={\n                <Button\n                    variant=\"tertiary\"\n                    icon={isHidden ? 'ARROW_DOWN' : 'ARROW_UP'}\n                    onClick={() => {\n                        setIsHidden(!isHidden);\n                    }}\n                >\n                    {isHidden ? (\n                        <Translation id=\"TR_SHOW_BUTTON\" />\n                    ) : (\n                        <Translation id=\"TR_HIDE_BUTTON\" />\n                    )}\n                </Button>\n            }\n            {...rest}\n        >\n            <Content>\n                {!isHidden &&\n                    cards.map((card, i) => {\n                        // re-check if the card button should be disabled (taking the global loading state into account)\n                        const ctaObject = card.cta\n                            ? { ...card.cta, isDisabled: !!isDisabledGlobal || card.cta.isDisabled }\n                            : undefined;\n\n                        return (\n                            <SecurityCard\n                                // eslint-disable-next-line react/no-array-index-key\n                                key={`${i}`}\n                                variant={card.variant}\n                                icon={card.icon}\n                                heading={card.heading}\n                                description={card.description}\n                                cta={ctaObject}\n                            />\n                        );\n                    })}\n            </Content>\n        </Section>\n    );\n};\n\nexport default SecurityFeatures;\n","import { bindActionCreators } from 'redux';\nimport { connect } from 'react-redux';\nimport * as walletSettingsActions from '@settings-actions/walletSettingsActions';\nimport * as suiteActions from '@suite-actions/suiteActions';\nimport * as deviceSettingsActions from '@settings-actions/deviceSettingsActions';\nimport * as routerActions from '@suite-actions/routerActions';\n\nimport { Dispatch, AppState } from '@suite-types';\nimport SecurityFeatures from './index';\n\nconst mapStateToProps = (state: AppState) => ({\n    discovery: state.wallet.discovery,\n    accounts: state.wallet.accounts,\n    discreetMode: state.wallet.settings.discreetMode,\n    fiat: state.wallet.fiat,\n    device: state.suite.device,\n    flags: state.suite.flags,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n    bindActionCreators(\n        {\n            setDiscreetMode: walletSettingsActions.setDiscreetMode,\n            createDeviceInstance: suiteActions.createDeviceInstance,\n            changePin: deviceSettingsActions.changePin,\n            applySettings: deviceSettingsActions.applySettings,\n            goto: routerActions.goto,\n        },\n        dispatch,\n    );\n\nexport type Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityFeatures);\n","import React from 'react';\nimport styled from 'styled-components';\nimport { LayoutContext } from '@suite-components';\nimport AssetsCard from './components/AssetsCard';\nimport PortfolioCard from './components/PortfolioCard';\nimport SecurityFeatures from './components/SecurityFeatures/Container';\n// import NewsFeed from './components/NewsFeed';\n\nconst Wrapper = styled.div`\n    width: 100%;\n    margin-top: 40px; /* 40px + 24px (default padding in suite layout) = 64px (as designed) */\n    margin-bottom: 32px;\n`;\n\nconst Divider = styled.div`\n    display: flex;\n    margin-bottom: 64px;\n`;\n\nconst Dashboard = () => {\n    // set SuiteLayout\n    const { setLayout } = React.useContext(LayoutContext);\n\n    React.useEffect(() => {\n        if (setLayout) setLayout(undefined, undefined);\n    }, [setLayout]);\n\n    return (\n        <Wrapper data-test=\"@dashboard/index\">\n            <PortfolioCard />\n            <Divider />\n            <AssetsCard />\n            <Divider />\n            <SecurityFeatures />\n            <Divider />\n            {/* <NewsFeed /> */}\n            {/* <Divider /> */}\n        </Wrapper>\n    );\n};\n\nexport default Dashboard;\n","import Index from '@dashboard-views';\n\nexport default Index;\n","import React from 'react';\nimport { SelectBar, SelectBarProps } from '@trezor/components';\nimport { useGraph } from '@suite-hooks';\nimport { GraphScale } from '@wallet-types/graph';\n\nconst GraphScaleDropdownItem = (props: Omit<SelectBarProps<GraphScale>, 'options'>) => {\n    const { selectedView, setSelectedView } = useGraph();\n\n    return (\n        <SelectBar\n            onChange={setSelectedView}\n            selectedOption={selectedView}\n            options={[\n                { label: '线性', value: 'linear' },\n                { label: '对数', value: 'log' },\n            ]}\n            {...props}\n        />\n    );\n};\n\nexport default GraphScaleDropdownItem;\n","import React, { ReactElement } from 'react';\nimport styled from 'styled-components';\nimport { variables } from '@trezor/components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\nconst Header = styled.div`\n    display: flex;\n    justify-content: space-between;\n    padding-bottom: 25px;\n`;\n\nconst Title = styled.div`\n    display: flex;\n    align-items: center;\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    font-size: ${variables.NEUE_FONT_SIZE.H2};\n`;\n\nconst Actions = styled.div``;\n\ninterface Props extends React.HTMLAttributes<HTMLDivElement> {\n    heading: ReactElement;\n    actions?: ReactElement;\n}\n\nconst Section = React.forwardRef(\n    ({ heading, actions, children, ...rest }: Props, ref: React.Ref<HTMLDivElement>) => (\n        <Wrapper {...rest} ref={ref}>\n            <Header>\n                {heading && <Title>{heading}</Title>}\n                {actions && <Actions>{actions}</Actions>}\n            </Header>\n            {children}\n        </Wrapper>\n    ),\n);\n\nexport default Section;\n","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/\",\n        function () {\n          return require(\"private-next-pages/index.tsx\");\n        }\n      ]);\n    "],"sourceRoot":""}