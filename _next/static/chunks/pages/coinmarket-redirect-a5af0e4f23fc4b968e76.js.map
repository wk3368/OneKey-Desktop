{"version":3,"sources":["webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?be40","webpack://_N_E/../suite/src/views/wallet/coinmarket/redirect/index.tsx","webpack://_N_E/../suite/src/hooks/wallet/useCoinmarketRedirect.ts","webpack://_N_E/./pages/coinmarket-redirect/index.tsx"],"names":["window","__NEXT_P","push","Wrapper","styled","div","variables","FONT_WEIGHT","MEDIUM","FONT_SIZE","BIG","CoinmarketRedirect","redirectToOffers","redirectToDetail","saveQuoteRequest","setIsFromRedirect","saveTransactionDetailId","goto","useActions","coinmarketBuyActions","routerActions","async","symbol","index","accountType","wantCrypto","fiatCurrency","receiveCurrency","amount","country","params","request","cryptoStringAmount","fiatStringAmount","accountIndex","transactionId","useCoinmarketRedirect","router","useSelector","state","useEffect","hash","split","redirectCommonParams","routeType","parseInt","id"],"mappings":"+FACOA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,uBACA,WACE,OAAO,EAAQ,Y,g0CCIzB,MAAMC,EAAUC,UAAOC,IAAV,6CAAGD,CAAH,6GAKME,YAAUC,YAAYC,OACxBF,YAAUG,UAAUC,KA2CtBC,MAvCY,KACvB,MAAM,iBAAEC,EAAF,iBAAoBC,GCbO,MACjC,MAAM,iBAAEC,EAAF,kBAAoBC,EAApB,wBAAuCC,EAAvC,KAAgEC,GAASC,YAAW,CACtFJ,iBAAkBK,IAClBJ,kBAAmBI,IACnBH,wBAAyBG,IACzBF,KAAMG,MAgEV,MAAO,CACHR,iBAnDqBS,UACrB,MAAM,OACFC,EADE,MAEFC,EAFE,YAGFC,EAHE,WAIFC,EAJE,aAKFC,EALE,gBAMFC,EANE,OAOFC,EAPE,QAQFC,GACAC,EACJ,IAAIC,EAIAA,EAAU,EAAH,KAHU,CAAEL,eAAcC,kBAAiBE,YAG3C,GADPJ,EACO,CAEHA,aACAO,mBAAoBJ,GAGjB,CAEHH,aACAQ,iBAAkBL,UAGpBd,EAAiBiB,SACjBhB,GAAkB,GACxBE,EAAK,+BAAgC,CAAEK,SAAQY,aAAcX,EAAOC,iBAuBpEX,iBAbqBQ,UACrB,MAAM,cAAEc,GAAkBL,QAEpBd,EAAwBmB,GAC9BlB,EAAK,+BAAgC,CACjCK,OAAQQ,EAAOR,OACfY,aAAcJ,EAAOP,MACrBC,YAAaM,EAAON,iBDpDmBY,GACzCC,EAASC,aAAYC,GAASA,EAAMF,SA8B1C,OA5BAG,qBAAU,KAAM,MAEZ,MAAMV,EAAM,OAAGO,QAAH,IAAGA,GAAH,UAAGA,EAAQI,YAAX,aAAG,EAAcC,MAAM,KAAK,GAAGA,MAAM,KACjD,IAAKZ,EAAQ,OAEb,MAAMa,EAAuB,CACzBC,UAAWd,EAAO,GAClBR,OAAQQ,EAAO,GACfN,YAAaM,EAAO,GACpBP,MAAOsB,SAASf,EAAO,GAAI,KAGQ,WAAnCa,EAAqBC,WACrBhC,EAAiB,OACV+B,GADS,IAEZlB,WAA0B,OAAdK,EAAO,GACnBJ,aAAcI,EAAO,GACrBF,OAAQE,EAAO,GACfH,gBAAiBG,EAAO,GACxBD,QAASC,EAAO,MAIe,WAAnCa,EAAqBC,WACrB/B,EAAiB,OAAK8B,GAAN,IAA4BR,cAAeL,EAAO,QAEvE,CAAClB,EAAkBC,EAAkBwB,IAGpC,EAAClC,EAAD,KACI,EAAC,IAAD,CAAa2C,GAAG,2BElDbnC,c","file":"static/chunks/pages/coinmarket-redirect-a5af0e4f23fc4b968e76.js","sourcesContent":["\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/coinmarket-redirect\",\n        function () {\n          return require(\"private-next-pages/coinmarket-redirect/index.tsx\");\n        }\n      ]);\n    ","import React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { useSelector } from '@suite-hooks';\nimport { Account } from '@wallet-types';\nimport { variables } from '@trezor/components';\nimport { useCoinmarketRedirect } from '@wallet-hooks/useCoinmarketRedirect';\nimport { Translation } from '@suite-components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    flex: 1;\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    font-size: ${variables.FONT_SIZE.BIG};\n    height: 100%;\n`;\n\nconst CoinmarketRedirect = () => {\n    const { redirectToOffers, redirectToDetail } = useCoinmarketRedirect();\n    const router = useSelector(state => state.router);\n\n    useEffect(() => {\n        // get rid of parameters appended by some partners to url which we pass to them\n        const params = router?.hash?.split('?')[0].split('/');\n        if (!params) return;\n\n        const redirectCommonParams = {\n            routeType: params[0] as 'detail' | 'offers',\n            symbol: params[1] as Account['symbol'],\n            accountType: params[2] as Account['accountType'],\n            index: parseInt(params[3], 10),\n        };\n\n        if (redirectCommonParams.routeType === 'offers') {\n            redirectToOffers({\n                ...redirectCommonParams,\n                wantCrypto: params[4] === 'qc',\n                fiatCurrency: params[6],\n                amount: params[7],\n                receiveCurrency: params[8],\n                country: params[5],\n            });\n        }\n\n        if (redirectCommonParams.routeType === 'detail') {\n            redirectToDetail({ ...redirectCommonParams, transactionId: params[4] });\n        }\n    }, [redirectToOffers, redirectToDetail, router]);\n\n    return (\n        <Wrapper>\n            <Translation id=\"TR_TRADE_REDIRECTING\" />\n        </Wrapper>\n    );\n};\n\nexport default CoinmarketRedirect;\n","import { Account } from '@wallet-types';\nimport { BuyTradeQuoteRequest } from 'invity-api';\nimport { useActions } from '@suite-hooks';\nimport * as routerActions from '@suite-actions/routerActions';\nimport * as coinmarketBuyActions from '@wallet-actions/coinmarketBuyActions';\n\nexport const useCoinmarketRedirect = () => {\n    const { saveQuoteRequest, setIsFromRedirect, saveTransactionDetailId, goto } = useActions({\n        saveQuoteRequest: coinmarketBuyActions.saveQuoteRequest,\n        setIsFromRedirect: coinmarketBuyActions.setIsFromRedirect,\n        saveTransactionDetailId: coinmarketBuyActions.saveTransactionDetailId,\n        goto: routerActions.goto,\n    });\n\n    interface OfferRedirectParams {\n        symbol: Account['symbol'];\n        index: Account['index'];\n        accountType: Account['accountType'];\n        wantCrypto: boolean;\n        fiatCurrency: string;\n        receiveCurrency: string;\n        amount: string;\n        country: string;\n    }\n\n    const redirectToOffers = async (params: OfferRedirectParams) => {\n        const {\n            symbol,\n            index,\n            accountType,\n            wantCrypto,\n            fiatCurrency,\n            receiveCurrency,\n            amount,\n            country,\n        } = params;\n        let request: BuyTradeQuoteRequest;\n        const commonParams = { fiatCurrency, receiveCurrency, country };\n\n        if (wantCrypto) {\n            request = {\n                ...commonParams,\n                wantCrypto,\n                cryptoStringAmount: amount,\n            };\n        } else {\n            request = {\n                ...commonParams,\n                wantCrypto,\n                fiatStringAmount: amount,\n            };\n        }\n        await saveQuoteRequest(request);\n        await setIsFromRedirect(true);\n        goto('wallet-coinmarket-buy-offers', { symbol, accountIndex: index, accountType });\n    };\n\n    interface DetailRedirectParams {\n        symbol: Account['symbol'];\n        index: Account['index'];\n        accountType: Account['accountType'];\n        transactionId: string;\n    }\n\n    const redirectToDetail = async (params: DetailRedirectParams) => {\n        const { transactionId } = params;\n\n        await saveTransactionDetailId(transactionId);\n        goto('wallet-coinmarket-buy-detail', {\n            symbol: params.symbol,\n            accountIndex: params.index,\n            accountType: params.accountType,\n        });\n    };\n\n    return {\n        redirectToOffers,\n        redirectToDetail,\n    };\n};\n","import CoinmarketRedirect from '@wallet-views/coinmarket/redirect';\n\nexport default CoinmarketRedirect;\n"],"sourceRoot":""}