{"version":3,"sources":["webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?d498","webpack://_N_E/../suite/src/components/settings/SettingsMenu/index.tsx","webpack://_N_E/../suite/src/components/settings/SettingsLayout/index.tsx","webpack://_N_E/../suite-desktop/src-electron/libs/constants.ts","webpack://_N_E/../suite/src/services/github.ts","webpack://_N_E/../suite/src/actions/suite/desktopUpdateActions.ts","webpack://_N_E/../suite/src/views/settings/index.tsx","webpack://_N_E/../suite/src/views/settings/Container.ts","webpack://_N_E/./pages/settings/index.tsx"],"names":["window","__NEXT_P","push","StyledLink","styled","ExternalLink","SettingsMenu","setDebugMode","openModal","goto","useActions","modalActions","routerActions","suiteActions","clickCounter","setClickCounter","useState","showDebugMenu","useSelector","state","suite","settings","debug","maxWidth","title","aria-hidden","onClick","prev","id","navigation","items","icon","route","dropdown","alignMenu","data-test","key","options","label","size","href","SUPPORT_URL","callback","noPadding","type","isHidden","Wrapper","div","SettingsLayout","props","setLayout","React","useContext","LayoutContext","useEffect","children","RELEASE_URL","openGithubIssue","device","url","URL","body","isDesktop","getUserAgent","navigator","platform","getScreenWidth","getScreenHeight","features","getVersion","getFwVersion","isBitcoinOnly","getDeviceInfo","searchParams","set","open","toString","getReleaseUrl","version","setUpdateWindow","win","DESKTOP_UPDATE","WINDOW","payload","buildCurrencyOption","currency","value","toUpperCase","Version","VersionButton","Button","VersionTooltip","Tooltip","VersionLink","a","Settings","language","metadata","localCurrency","desktopUpdate","setLocalCurrency","fetchLocale","removeDatabase","initMetadata","disconnectProvider","disableMetadata","analytics","useAnalytics","isLocked","useDevice","isDeviceLocked","tor","torOnionLinks","setOnionLinks","torAddress","setTorAddress","desktopApi","getTorAddress","then","address","useCallback","desktopUpdateActions","checkForUpdates","installRestart","installUpdate","maximizeUpdater","hideTextCursor","useKeyPressScroll","noTopLabel","LANGUAGES","find","l","code","name","map","onChange","option","report","fiat","FIAT","currencies","c","description","isDisabled","enabled","connected","checked","provider","isCloud","values","capitalizeFirstLetter","user","variant","status","async","send","location","reload","isMAS","content","process","target","alignIcon","includes","latest","connect","wallet","dispatch","bindActionCreators","walletSettingsActions","storageActions","languageActions","metadataActions","Component","Page"],"mappings":"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","file":"static/chunks/pages/settings-1ef99d7d855094ecd8e7.js","sourcesContent":["\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/settings\",\n        function () {\n          return require(\"private-next-pages/settings/index.tsx\");\n        }\n      ]);\n    ","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Dropdown } from '@trezor/components';\nimport { Translation, ExternalLink, AppNavigationPanel, AppNavigation } from '@suite-components';\nimport { useActions, useSelector } from '@suite-hooks';\nimport * as modalActions from '@suite-actions/modalActions';\nimport * as suiteActions from '@suite-actions/suiteActions';\nimport * as routerActions from '@suite-actions/routerActions';\nimport { SUPPORT_URL } from '@suite-constants/urls';\n\nconst StyledLink = styled(ExternalLink)`\n    padding: 10px 16px;\n    width: 100%;\n`;\n\nconst SettingsMenu = () => {\n    const { setDebugMode, openModal, goto } = useActions({\n        openModal: modalActions.openModal,\n        goto: routerActions.goto,\n        setDebugMode: suiteActions.setDebugMode,\n    });\n\n    // show debug menu item after 5 clicks on \"Settings\" heading\n    const [clickCounter, setClickCounter] = useState(0);\n    const showDebugMenu = useSelector(state => state.suite.settings.debug.showDebugMenu);\n\n    return (\n        <AppNavigationPanel\n            maxWidth=\"default\"\n            title={\n                <span\n                    aria-hidden=\"true\"\n                    onClick={() => {\n                        setClickCounter(prev => prev + 1);\n                        if (clickCounter === 4) {\n                            setClickCounter(0);\n                            setDebugMode({ showDebugMenu: !showDebugMenu });\n                        }\n                    }}\n                >\n                    <Translation id=\"TR_SETTINGS\" />\n                </span>\n            }\n            navigation={\n                <AppNavigation\n                    items={[\n                        {\n                            title: <Translation id=\"TR_GENERAL\" />,\n                            'data-test': '@settings/menu/general',\n                            icon: 'SETTINGS',\n                            route: 'settings-index',\n                        },\n                        {\n                            title: <Translation id=\"TR_DEVICE\" />,\n                            'data-test': '@settings/menu/device',\n                            icon: 'TREZOR',\n                            route: 'settings-device',\n                        },\n                        {\n                            title: <Translation id=\"TR_COINS\" />,\n                            'data-test': '@settings/menu/wallet',\n                            icon: 'COINS',\n                            route: 'settings-coins',\n                        },\n                    ]}\n                />\n            }\n            dropdown={\n                <Dropdown\n                    alignMenu=\"right\"\n                    data-test=\"@settings/menu/dropdown\"\n                    items={[\n                        {\n                            key: 'group1',\n                            options: [\n                                {\n                                    key: 'support',\n                                    label: (\n                                        <StyledLink size=\"small\" href={SUPPORT_URL}>\n                                            <Translation id=\"TR_SUPPORT\" />\n                                        </StyledLink>\n                                    ),\n                                    'data-test': '@settings/menu/support',\n                                    callback: () => {},\n                                    noPadding: true,\n                                },\n                                {\n                                    key: 'log',\n                                    label: <Translation id=\"TR_SHOW_LOG\" />,\n                                    'data-test': '@settings/menu/log',\n                                    callback: () => {\n                                        openModal({ type: 'log' });\n                                    },\n                                },\n                                {\n                                    key: 'debug',\n                                    label: 'Debug Settings',\n                                    'data-test': '@settings/menu/debug',\n                                    isHidden: !showDebugMenu,\n                                    callback: () => {\n                                        goto('settings-debug');\n                                    },\n                                },\n                            ],\n                        },\n                    ]}\n                />\n            }\n        />\n    );\n};\n\nexport default SettingsMenu;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { LayoutContext } from '@suite-components';\nimport { SettingsMenu } from '@settings-components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n`;\n\ntype Props = {\n    title?: string;\n    children?: React.ReactNode;\n    ['data-test']?: string;\n};\n\nconst SettingsLayout = (props: Props) => {\n    const { setLayout } = React.useContext(LayoutContext);\n\n    React.useEffect(() => {\n        if (setLayout) setLayout(props.title || 'Settings', null, <SettingsMenu />);\n    }, [props.title, setLayout]);\n\n    return <Wrapper data-test={props['data-test']}>{props.children}</Wrapper>;\n};\n\nexport default SettingsLayout;\n","export const PROTOCOL = 'file';\n\n// TODO: check cdn url\nexport const SS_PREFIX = 'https://onekey-asset.com/onekey/desktop/newly/';\n\n// General modules (both dev & prod)\nexport const MODULES = [\n    // Event Logging\n    'event-logging/process',\n    'event-logging/app',\n    'event-logging/contents',\n    // Standard modules\n    'menu',\n    'shortcuts',\n    'request-filter',\n    'external-links',\n    'window-controls',\n    'http-receiver',\n    'metadata',\n    'bridge',\n    'tor',\n    'analytics',\n];\n\n// Modules only used in prod mode\nexport const MODULES_PROD = ['csp', 'file-protocol', 'auto-updater'];\n\n// Modules only used in dev mode\nexport const MODULES_DEV = ['dev-tools'];\n","import { getFwVersion, isBitcoinOnly, getVersion } from '@suite-utils/device';\nimport { isDesktop, getUserAgent, getScreenWidth, getScreenHeight } from '@suite-utils/env';\nimport { TrezorDevice } from '@suite-types';\nimport { SS_PREFIX } from '@desktop-electron/libs/constants';\n\nconst REPO_INFO = {\n    owner: 'OneKeyHQ',\n    repo: 'OneKey-Desktop',\n};\n\nconst RELEASE_URL = `https://github.com/${REPO_INFO.owner}/${REPO_INFO.repo}`;\n\nexport const getReleaseNotes = async (version?: string) => {\n    if (!version) {\n        return;\n    }\n\n    const url = `${SS_PREFIX}notes.json?noCache=${new Date().getTime()}`;\n    const response = await fetch(url);\n    const release = response.json();\n\n    return release;\n};\n\nconst getDeviceInfo = (device?: TrezorDevice) => {\n    if (!device?.features) {\n        return '';\n    }\n    return `model ${getVersion(device)} ${getFwVersion(device)} ${\n        isBitcoinOnly(device) ? 'Bitcoin only' : 'regular'\n    }`;\n};\n\nconst getSuiteInfo = () => {\n    return `${isDesktop() ? 'desktop' : 'web'} ${process.env.VERSION} (${process.env.COMMITHASH})`;\n};\n\nexport const openGithubIssue = (device?: TrezorDevice) => {\n    const url = new URL(`${RELEASE_URL}/issues/new`);\n\n    const body = `\n**Describe the bug**\nA clear and concise description of what the bug is.\n\n**Steps to reproduce:**\n1. a\n2. b\n3. c\n\n**Info:**\n - Suite version: ${getSuiteInfo()}\n - Browser: ${getUserAgent()}\n - OS: ${navigator.platform}\n - Screen: ${getScreenWidth()}x${getScreenHeight()}\n - Device: ${getDeviceInfo(device)}\n\n**Expected result:**\nA clear and concise description of what you expected to happen.\n\n**Actual result:**\nA clear and concise description of what actually happens.\n\n**Screenshots:**\nInsert here.\n\n**Note(s):**\nAdd any other context about the problem here.\n`;\n\n    url.searchParams.set('body', body);\n\n    window.open(url.toString());\n};\n\nexport const getReleaseUrl = (version: string) => `${RELEASE_URL}/releases/tag/v${version}`;\n","import { DESKTOP_UPDATE } from '@suite-actions/constants';\nimport { addToast } from '@suite-actions/notificationActions';\nimport { Dispatch, GetState } from '@suite-types';\nimport { UpdateInfo, UpdateProgress, UpdateWindow } from '@suite-types/desktop';\n\nexport type DesktopUpdateAction =\n    | { type: typeof DESKTOP_UPDATE.ENABLE }\n    | { type: typeof DESKTOP_UPDATE.CHECKING }\n    | { type: typeof DESKTOP_UPDATE.AVAILABLE; payload: UpdateInfo }\n    | { type: typeof DESKTOP_UPDATE.NOT_AVAILABLE; payload?: UpdateInfo }\n    | { type: typeof DESKTOP_UPDATE.DOWNLOADING; payload: UpdateProgress }\n    | { type: typeof DESKTOP_UPDATE.READY; payload: UpdateInfo }\n    | { type: typeof DESKTOP_UPDATE.SKIP; payload: string }\n    | { type: typeof DESKTOP_UPDATE.WINDOW; payload: UpdateWindow }\n    | { type: typeof DESKTOP_UPDATE.ERROR };\n\nexport const enable = (): DesktopUpdateAction => ({ type: DESKTOP_UPDATE.ENABLE });\n\nexport const checking = (): DesktopUpdateAction => ({ type: DESKTOP_UPDATE.CHECKING });\n\nexport const available = (info: UpdateInfo): DesktopUpdateAction => ({\n    type: DESKTOP_UPDATE.AVAILABLE,\n    payload: info,\n});\n\nexport const notAvailable = (info: UpdateInfo) => (dispatch: Dispatch) => {\n    if (info.isManualCheck) {\n        dispatch(addToast({ type: 'auto-updater-no-new' }));\n    }\n\n    dispatch({\n        type: DESKTOP_UPDATE.NOT_AVAILABLE,\n        payload: info,\n    });\n};\n\nexport const downloading = (progress: UpdateProgress): DesktopUpdateAction => ({\n    type: DESKTOP_UPDATE.DOWNLOADING,\n    payload: progress,\n});\n\nexport const ready = (info: UpdateInfo): DesktopUpdateAction => ({\n    type: DESKTOP_UPDATE.READY,\n    payload: info,\n});\n\nexport const skip = (version: string): DesktopUpdateAction => ({\n    type: DESKTOP_UPDATE.SKIP,\n    payload: version,\n});\n\nexport const error = (err: Error) => (dispatch: Dispatch, getState: GetState) => {\n    // TODO: Properly display error\n    console.error('auto-updater', err);\n\n    const { state } = getState().desktopUpdate;\n\n    // Ignore displaying errors while checking\n    if (state !== 'checking') {\n        dispatch(addToast({ type: 'auto-updater-error', state }));\n    }\n\n    dispatch({\n        type: DESKTOP_UPDATE.ERROR,\n    });\n};\n\nexport const setUpdateWindow = (win: UpdateWindow): DesktopUpdateAction => ({\n    type: DESKTOP_UPDATE.WINDOW,\n    payload: win,\n});\n","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { SettingsLayout } from '@settings-components';\nimport { Translation } from '@suite-components';\nimport {\n    ActionButton,\n    ActionColumn,\n    ActionSelect,\n    // Analytics,\n    Theme,\n    Section,\n    SectionItem,\n    TextColumn,\n} from '@suite-components/Settings';\nimport { FIAT, LANGUAGES } from '@suite-config';\nimport { useAnalytics, useDevice, useSelector, useActions } from '@suite-hooks';\nimport { Button, Tooltip, Switch } from '@trezor/components';\nimport { capitalizeFirstLetter } from '@suite-utils/string';\nimport * as suiteActions from '@suite-actions/suiteActions';\nimport * as desktopUpdateActions from '@suite-actions/desktopUpdateActions';\n\nimport { Props } from './Container';\nimport { getReleaseUrl } from '@suite/services/github';\nimport { isMAS } from '@suite-utils/build';\n\nconst buildCurrencyOption = (currency: string) => ({\n    value: currency,\n    label: currency.toUpperCase(),\n});\n\nconst Version = styled.div`\n    span {\n        display: flex;\n        align-items: center;\n    }\n`;\n\nconst VersionButton = styled(Button)`\n    padding-left: 1ch;\n`;\n\nconst VersionTooltip = styled(Tooltip)`\n    display: inline-flex;\n    margin: 0 2px;\n`;\n\nconst VersionLink = styled.a``;\n\nconst Settings = ({\n    language,\n    metadata,\n    localCurrency,\n    desktopUpdate,\n    setLocalCurrency,\n    fetchLocale,\n    removeDatabase,\n    goto,\n    initMetadata,\n    disconnectProvider,\n    disableMetadata,\n}: Props) => {\n    const analytics = useAnalytics();\n\n    const { isLocked, device } = useDevice();\n    const isDeviceLocked = isLocked();\n\n    // Tor\n    const { tor, torOnionLinks } = useSelector(state => ({\n        tor: state.suite.tor,\n        torOnionLinks: state.suite.settings.torOnionLinks,\n    }));\n    const { setOnionLinks } = useActions({\n        setOnionLinks: suiteActions.setOnionLinks,\n    });\n    const [torAddress, setTorAddress] = useState('');\n    useEffect(() => {\n        window.desktopApi?.getTorAddress().then(address => setTorAddress(address));\n    }, [setTorAddress]);\n    const saveTorAddress = useCallback(() => {\n        // TODO: Validation\n        window.desktopApi!.setTorAddress(torAddress);\n    }, [torAddress]);\n\n    // Auto Updater\n    const { setUpdateWindow } = useActions({\n        setUpdateWindow: desktopUpdateActions.setUpdateWindow,\n    });\n    const checkForUpdates = useCallback(() => window.desktopApi?.checkForUpdates(true), []);\n    const installRestart = useCallback(() => window.desktopApi?.installUpdate(), []);\n    const maximizeUpdater = useCallback(() => setUpdateWindow('maximized'), [setUpdateWindow]);\n\n    return (\n        <SettingsLayout data-test=\"@settings/index\">\n            <Section title={<Translation id=\"TR_LOCALIZATION\" />}>\n                <SectionItem data-test=\"@settings/language\">\n                    <TextColumn title={<Translation id=\"TR_LANGUAGE\" />} />\n                    <ActionColumn>\n                        <ActionSelect\n                            hideTextCursor\n                            useKeyPressScroll\n                            noTopLabel\n                            value={{\n                                value: language,\n                                label: LANGUAGES.find(l => l.code === language)!.name,\n                            }}\n                            // isDisabled\n                            options={LANGUAGES.map(l => ({ value: l.code, label: l.name }))}\n                            onChange={(option: {\n                                value: typeof LANGUAGES[number]['code'];\n                                label: typeof LANGUAGES[number]['name'];\n                            }) => {\n                                fetchLocale(option.value);\n                                analytics.report({\n                                    type: 'settings/general/change-language',\n                                    payload: {\n                                        language: option.value,\n                                    },\n                                });\n                            }}\n                            data-test=\"@settings/language-select\"\n                        />\n                    </ActionColumn>\n                </SectionItem>\n\n                <SectionItem data-test=\"@settings/fiat\">\n                    <TextColumn title={<Translation id=\"TR_PRIMARY_FIAT\" />} />\n                    <ActionColumn>\n                        <ActionSelect\n                            noTopLabel\n                            hideTextCursor\n                            useKeyPressScroll\n                            onChange={(option: { value: string; label: string }) => {\n                                setLocalCurrency(option.value);\n                                analytics.report({\n                                    type: 'settings/general/change-fiat',\n                                    payload: {\n                                        fiat: option.value,\n                                    },\n                                });\n                            }}\n                            value={buildCurrencyOption(localCurrency)}\n                            options={FIAT.currencies.map(c => buildCurrencyOption(c))}\n                            data-test=\"@settings/fiat-select\"\n                        />\n                    </ActionColumn>\n                </SectionItem>\n            </Section>\n\n            <Section title={<Translation id=\"TR_LABELING\" />}>\n                <SectionItem data-test=\"@settings/metadata\">\n                    <TextColumn\n                        title={<Translation id=\"TR_LABELING_ENABLED\" />}\n                        description={<Translation id=\"TR_LABELING_FEATURE_ALLOWS\" />}\n                    />\n                    <ActionColumn>\n                        <Switch\n                            // hmm maybe it should never be disabled, as it is not device related option (although it triggers device flow?)\n                            // but on the other hand there still may be case when it remembered device is disconnected and its metadata.status\n                            // is cancelled or disabled. In such case, initMetadata does not make any sense as it needs device connected.\n                            // You could say: \"ok, whatever, but this switch is changing only application setting, why messing with device?\"\n                            // Yes, you are right, but if it was done this way, you would enable metadata, then go to wallet, discovery\n                            // and maybe device authorization would be triggered and only after that you would get metadata flow started, wouldn't\n                            // that be confusing? I believe it is better to do it right away, but need for disabling this switch in specific\n                            // edge case is a drawback.\n                            isDisabled={!metadata.enabled && !device?.connected && isDeviceLocked}\n                            data-test=\"@settings/metadata-switch\"\n                            checked={metadata.enabled}\n                            onChange={() =>\n                                metadata.enabled ? disableMetadata() : initMetadata(true)\n                            }\n                        />\n                    </ActionColumn>\n                </SectionItem>\n                {metadata.enabled && metadata.provider && (\n                    <SectionItem data-test=\"@settings/metadata-provider\">\n                        <TextColumn\n                            title={\n                                metadata.provider.isCloud ? (\n                                    <Translation\n                                        id=\"TR_CONNECTED_TO_PROVIDER\"\n                                        values={{\n                                            provider: capitalizeFirstLetter(metadata.provider.type),\n                                            user: metadata.provider.user,\n                                        }}\n                                    />\n                                ) : (\n                                    <Translation id=\"TR_CONNECTED_TO_PROVIDER_LOCALLY\" />\n                                )\n                            }\n                            description={\n                                metadata.provider.isCloud ? (\n                                    <Translation id=\"TR_YOUR_LABELING_IS_SYNCED\" />\n                                ) : (\n                                    <Translation id=\"TR_YOUR_LABELING_IS_SYNCED_LOCALLY\" />\n                                )\n                            }\n                        />\n                        <ActionColumn>\n                            <ActionButton\n                                variant=\"secondary\"\n                                onClick={() => disconnectProvider()}\n                                data-test=\"@settings/metadata/disconnect-provider-button\"\n                            >\n                                <Translation id=\"TR_DISCONNECT\" />\n                            </ActionButton>\n                        </ActionColumn>\n                    </SectionItem>\n                )}\n                {metadata.enabled && !metadata.provider && device?.metadata.status === 'enabled' && (\n                    <SectionItem>\n                        <TextColumn\n                            title={<Translation id=\"TR_LABELING_NOT_SYNCED\" />}\n                            description={<Translation id=\"TR_TO_MAKE_YOUR_LABELS_PERSISTENT\" />}\n                        />\n                        <ActionColumn>\n                            <ActionButton\n                                variant=\"secondary\"\n                                onClick={() => initMetadata(true)}\n                                data-test=\"@settings/metadata/connect-provider-button\"\n                            >\n                                <Translation id=\"TR_CONNECT\" />\n                            </ActionButton>\n                        </ActionColumn>\n                    </SectionItem>\n                )}\n            </Section>\n\n            {/* {(isDesktop() || (isWeb() && tor)) && (\n                <Section title={<Translation id=\"TR_TOR\" />}>\n                    {isDesktop() && (\n                        <>\n                            <SectionItem>\n                                <TextColumn\n                                    title={<Translation id=\"TR_TOR_TITLE\" />}\n                                    description={\n                                        <Translation\n                                            id=\"TR_TOR_DESCRIPTION\"\n                                            values={{\n                                                lineBreak: <br />,\n                                            }}\n                                        />\n                                    }\n                                    learnMore=\"https://www.torproject.org/\"\n                                />\n                                <ActionColumn>\n                                    <Switch\n                                        data-test=\"@settings/general/tor-switch\"\n                                        checked={tor}\n                                        onChange={() => {\n                                            analytics.report({\n                                                type: 'menu/toggle-tor',\n                                                payload: {\n                                                    value: !tor,\n                                                },\n                                            });\n                                            window.desktopApi!.toggleTor(!tor);\n                                        }}\n                                    />\n                                </ActionColumn>\n                            </SectionItem>\n                            <SectionItem>\n                                <TextColumn\n                                    title={<Translation id=\"TR_TOR_PARAM_TITLE\" />}\n                                    description={<Translation id=\"TR_TOR_PARAM_DESCRIPTION\" />}\n                                />\n                                <ActionColumn>\n                                    <ActionInput\n                                        noTopLabel\n                                        noError\n                                        value={torAddress}\n                                        state={undefined}\n                                        onChange={(event: React.FormEvent<HTMLInputElement>) =>\n                                            setTorAddress(event.currentTarget.value)\n                                        }\n                                        onBlur={saveTorAddress}\n                                        data-test=\"@settings/general/tor-address\"\n                                        placeholder=\"127.0.0.1:9050\"\n                                    />\n                                </ActionColumn>\n                            </SectionItem>\n                        </>\n                    )}\n                    <SectionItem>\n                        <TextColumn\n                            title={<Translation id=\"TR_ONION_LINKS_TITLE\" />}\n                            description={<Translation id=\"TR_ONION_LINKS_DESCRIPTION\" />}\n                        />\n                        <ActionColumn>\n                            <Switch\n                                data-test=\"@settings/general/onion-links-switch\"\n                                checked={torOnionLinks}\n                                onChange={() => {\n                                    analytics.report({\n                                        type: 'menu/toggle-onion-links',\n                                        payload: {\n                                            value: !torOnionLinks,\n                                        },\n                                    });\n                                    setOnionLinks(!torOnionLinks);\n                                }}\n                            />\n                        </ActionColumn>\n                    </SectionItem>\n                </Section>\n            )} */}\n\n            <Section title={<Translation id=\"TR_APPLICATION\" />}>\n                <Theme />\n                {/* <Analytics /> */}\n\n                <SectionItem data-test=\"@settings/storage\">\n                    <TextColumn\n                        title={<Translation id=\"TR_SUITE_STORAGE\" />}\n                        description={<Translation id=\"TR_CLEAR_STORAGE_DESCRIPTION\" />}\n                    />\n                    <ActionColumn>\n                        <ActionButton\n                            onClick={async () => {\n                                removeDatabase();\n                                if (window.desktopApi) {\n                                    // relaunch desktop app\n                                    window.desktopApi.send('app/restart');\n                                } else {\n                                    // redirect to / and reload the web\n                                    await goto('suite-index');\n                                    window.location.reload();\n                                }\n                            }}\n                            variant=\"secondary\"\n                        >\n                            <Translation id=\"TR_CLEAR_STORAGE\" />\n                        </ActionButton>\n                    </ActionColumn>\n                </SectionItem>\n                {!isMAS() && (\n                    <SectionItem data-test=\"@settings/version\">\n                        <TextColumn\n                            title={<Translation id=\"TR_SUITE_VERSION\" />}\n                            description={\n                                <Version>\n                                    <Translation\n                                        id=\"TR_YOUR_CURRENT_VERSION\"\n                                        values={{\n                                            version: (\n                                                <VersionTooltip\n                                                    content={process.env.COMMITHASH || ''}\n                                                >\n                                                    <VersionLink\n                                                        target=\"_blank\"\n                                                        href={`https://github.com/OneKeyHQ/OneKey-Desktop/commit/${process.env.COMMITHASH}`}\n                                                    >\n                                                        <VersionButton\n                                                            variant=\"tertiary\"\n                                                            icon=\"EXTERNAL_LINK\"\n                                                            alignIcon=\"right\"\n                                                        >\n                                                            {process.env.VERSION}\n                                                        </VersionButton>\n                                                    </VersionLink>\n                                                </VersionTooltip>\n                                            ),\n                                        }}\n                                    />\n                                    {!['checking', 'not-available'].includes(desktopUpdate.state) &&\n                                        desktopUpdate.latest && (\n                                            <>\n                                                &nbsp;\n                                                <Translation\n                                                    id=\"TR_YOUR_NEW_VERSION\"\n                                                    values={{\n                                                        version: (\n                                                            <VersionLink\n                                                                target=\"_blank\"\n                                                                href={getReleaseUrl(\n                                                                    desktopUpdate.latest.version,\n                                                                )}\n                                                            >\n                                                                <VersionButton\n                                                                    variant=\"tertiary\"\n                                                                    icon=\"EXTERNAL_LINK\"\n                                                                    alignIcon=\"right\"\n                                                                >\n                                                                    {desktopUpdate.latest.version}\n                                                                </VersionButton>\n                                                            </VersionLink>\n                                                        ),\n                                                    }}\n                                                />\n                                            </>\n                                        )}\n                                </Version>\n                            }\n                        />\n                        {desktopUpdate.enabled && (\n                            <ActionColumn>\n                                {desktopUpdate.state === 'checking' && (\n                                    <ActionButton isDisabled variant=\"secondary\">\n                                        <Translation id=\"SETTINGS_UPDATE_CHECKING\" />\n                                    </ActionButton>\n                                )}\n                                {desktopUpdate.state === 'not-available' && (\n                                    <ActionButton onClick={checkForUpdates} variant=\"secondary\">\n                                        <Translation id=\"SETTINGS_UPDATE_CHECK\" />\n                                    </ActionButton>\n                                )}\n                                {desktopUpdate.state === 'available' && (\n                                    <ActionButton onClick={maximizeUpdater} variant=\"secondary\">\n                                        <Translation id=\"SETTINGS_UPDATE_AVAILABLE\" />\n                                    </ActionButton>\n                                )}\n                                {desktopUpdate.state === 'downloading' && (\n                                    <ActionButton onClick={maximizeUpdater} variant=\"secondary\">\n                                        <Translation id=\"SETTINGS_UPDATE_DOWNLOADING\" />\n                                    </ActionButton>\n                                )}\n                                {desktopUpdate.state === 'ready' && (\n                                    <ActionButton onClick={installRestart} variant=\"secondary\">\n                                        <Translation id=\"SETTINGS_UPDATE_READY\" />\n                                    </ActionButton>\n                                )}\n                            </ActionColumn>\n                        )}\n                    </SectionItem>\n                )}\n            </Section>\n        </SettingsLayout>\n    );\n};\n\nexport default Settings;\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as walletSettingsActions from '@settings-actions/walletSettingsActions';\nimport * as storageActions from '@suite-actions/storageActions';\nimport * as languageActions from '@settings-actions/languageActions';\nimport * as routerActions from '@suite-actions/routerActions';\nimport * as metadataActions from '@suite-actions/metadataActions';\nimport { AppState, Dispatch } from '@suite-types';\nimport Component from './index';\n\nconst mapStateToProps = (state: AppState) => ({\n    language: state.suite.settings.language,\n    localCurrency: state.wallet.settings.localCurrency,\n    metadata: state.metadata,\n    desktopUpdate: state.desktopUpdate,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n    bindActionCreators(\n        {\n            setLocalCurrency: walletSettingsActions.setLocalCurrency,\n            removeDatabase: storageActions.removeDatabase,\n            fetchLocale: languageActions.fetchLocale,\n            goto: routerActions.goto,\n            initMetadata: metadataActions.init,\n            disableMetadata: metadataActions.disableMetadata,\n            disconnectProvider: metadataActions.disconnectProvider,\n        },\n        dispatch,\n    );\n\nexport type Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);\n","import Page from '@settings-views/Container';\n\nexport default Page;\n"],"sourceRoot":""}