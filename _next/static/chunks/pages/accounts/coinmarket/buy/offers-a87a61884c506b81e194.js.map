{"version":3,"sources":["webpack://_N_E/../suite/src/hooks/wallet/useCoinmarketBuyOffers.ts","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/offers/Offers/List/Quote/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/offers/Offers/List/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/offers/Offers/SelectedOffer/components/VerifyAddress/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/offers/Offers/SelectedOffer/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/offers/Offers/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/offers/index.tsx","webpack://_N_E/./pages/accounts/coinmarket/buy/offers/index.tsx","webpack://_N_E/../suite/src/hooks/suite/useTimeInterval.ts","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?d4be"],"names":["CoinmarketBuyOffersContext","createContext","displayName","useCoinmarketBuyOffersContext","context","useContext","Error","Wrapper","styled","div","props","theme","BG_WHITE","TagRow","Main","STROKE_GREY","variables","SCREEN_SIZE","SM","Left","FONT_SIZE","H2","Right","Details","Column","Heading","TYPE_LIGHT_GREY","FONT_WEIGHT","DEMI_BOLD","StyledButton","Button","Value","TYPE_DARK_GREY","MEDIUM","Footer","SMALL","ErrorFooter","TYPE_RED","StyledIcon","Icon","IconWrapper","ErrorText","StyledQuestionTooltip","QuestionTooltip","Quote","className","quote","wantCrypto","useTheme","selectQuote","providersInfo","paymentMethod","exchange","error","fiatStringAmount","fiatCurrency","formatCryptoAmount","Number","receiveStringAmount","receiveCurrency","isDisabled","onClick","id","providers","method","tooltip","icon","size","color","minCrypto","values","amount","min","currency","maxCrypto","max","minFiat","maxFiat","getQuoteError","infoNote","Quotes","StyledQuote","Header","SummaryRow","OrigAmount","Text","Crypto","Receive","StyledCoinLogo","CoinLogo","NoQuotes","List","isAlternative","quotes","account","quotesRequest","timer","REFETCH_INTERVAL_IN_SECONDS","cryptoStringAmount","symbol","isStopped","isLoading","refetchInterval","seconds","timeSpend","label","length","map","key","CardContent","LogoWrapper","AccountWrapper","Label","UpperCase","FiatWrapper","CustomLabel","LabelText","StyledDeviceImage","DeviceImage","Amount","TINY","AccountName","FakeInput","ButtonWrapper","Confirmed","BIG","BG_GREY","VerifyAddressComponent","device","callInProgress","verifyAddress","selectedQuote","goToPayment","addressVerified","formattedBalance","path","address","getUnusedAddressFromAccount","value","readOnly","height","trezorModel","features","major_version","LG","StyledCard","Card","SelectedOffer","VerifyAddress","Divider","DividerLine","DividerLeft","DividerRight","Currency","DividerMiddle","Offers","alternativeQuotes","setLayout","LayoutContext","useEffect","undefined","OffersIndexLoaded","selectedAccount","coinmarketOffersValues","useTimer","isFromRedirect","isLocked","useDevice","setCallInProgress","useState","setSelectedQuote","innerQuotes","setInnerQuotes","innerAlternativeQuotes","setInnerAlternativeQuotes","saveTrade","setIsFromRedirect","openCoinmarketBuyConfirmModal","addNotification","saveTransactionDetailId","submitRequestForm","goto","useActions","coinmarketBuyActions","notificationActions","coinmarketCommonActions","routerActions","invityAPIUrl","useSelector","state","suite","settings","debug","invityAPI","setInvityAPIServer","accountIndex","index","accountType","getQuotes","async","createInvityAPIKey","descriptor","allQuotes","getBuyQuotes","processQuotes","reset","resetCount","stop","loading","returnUrl","createTxLink","receiveAddress","response","doBuyTrade","trade","paymentId","type","Date","toISOString","tradeForm","isDesktop","params","provider","companyName","quoteId","createQuoteLink","status","errorMessage","console","log","useOffers","Provider","connect","wallet","coinmarket","buy","buyInfo","providerInfos","title","setTimeSpend","setIsLoading","setIsStopped","setResetCount","timeout","setTimeout","clearTimeout","window","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/accounts/coinmarket/buy/offers-a87a61884c506b81e194.js","sourcesContent":["import { createContext, useContext, useState, useEffect } from 'react';\nimport invityAPI from '@suite-services/invityAPI';\nimport { useActions, useSelector, useDevice } from '@suite-hooks';\nimport { useTimer } from '@suite-hooks/useTimeInterval';\nimport { BuyTrade } from 'invity-api';\nimport { processQuotes, createQuoteLink, createTxLink } from '@wallet-utils/coinmarket/buyUtils';\nimport * as coinmarketCommonActions from '@wallet-actions/coinmarket/coinmarketCommonActions';\nimport * as coinmarketBuyActions from '@wallet-actions/coinmarketBuyActions';\nimport * as routerActions from '@suite-actions/routerActions';\nimport { Props, ContextValues } from '@wallet-types/coinmarketBuyOffers';\nimport * as notificationActions from '@suite-actions/notificationActions';\nimport { isDesktop } from '@suite-utils/env';\n\nexport const useOffers = (props: Props) => {\n    const timer = useTimer();\n    const REFETCH_INTERVAL_IN_SECONDS = 30;\n    const {\n        selectedAccount,\n        quotesRequest,\n        alternativeQuotes,\n        quotes,\n        providersInfo,\n        device,\n        addressVerified,\n        isFromRedirect,\n    } = props;\n\n    const { account } = selectedAccount;\n    const { isLocked } = useDevice();\n    const [callInProgress, setCallInProgress] = useState<boolean>(isLocked || false);\n    const [selectedQuote, setSelectedQuote] = useState<BuyTrade>();\n    const [innerQuotes, setInnerQuotes] = useState<BuyTrade[]>(quotes);\n    const [innerAlternativeQuotes, setInnerAlternativeQuotes] = useState<BuyTrade[] | undefined>(\n        alternativeQuotes,\n    );\n    const {\n        saveTrade,\n        setIsFromRedirect,\n        openCoinmarketBuyConfirmModal,\n        addNotification,\n        saveTransactionDetailId,\n        verifyAddress,\n        submitRequestForm,\n        goto,\n    } = useActions({\n        saveTrade: coinmarketBuyActions.saveTrade,\n        setIsFromRedirect: coinmarketBuyActions.setIsFromRedirect,\n        openCoinmarketBuyConfirmModal: coinmarketBuyActions.openCoinmarketBuyConfirmModal,\n        addNotification: notificationActions.addToast,\n        saveTransactionDetailId: coinmarketBuyActions.saveTransactionDetailId,\n        submitRequestForm: coinmarketBuyActions.submitRequestForm,\n        verifyAddress: coinmarketCommonActions.verifyAddress,\n        goto: routerActions.goto,\n    });\n\n    const invityAPIUrl = useSelector(state => state.suite.settings.debug.invityAPIUrl);\n    if (invityAPIUrl) {\n        invityAPI.setInvityAPIServer(invityAPIUrl);\n    }\n\n    useEffect(() => {\n        if (!quotesRequest) {\n            goto('wallet-coinmarket-buy', {\n                symbol: account.symbol,\n                accountIndex: account.index,\n                accountType: account.accountType,\n            });\n            return;\n        }\n\n        const getQuotes = async () => {\n            if (!selectedQuote) {\n                invityAPI.createInvityAPIKey(account.descriptor);\n                const allQuotes = await invityAPI.getBuyQuotes(quotesRequest);\n                const [quotes, alternativeQuotes] = processQuotes(allQuotes);\n                setInnerQuotes(quotes);\n                setInnerAlternativeQuotes(alternativeQuotes);\n                timer.reset();\n            }\n        };\n\n        if (isFromRedirect && quotesRequest) {\n            getQuotes();\n            setIsFromRedirect(false);\n        }\n\n        if (!timer.isLoading && !timer.isStopped) {\n            if (timer.resetCount >= 40) {\n                timer.stop();\n            }\n\n            if (timer.timeSpend.seconds === REFETCH_INTERVAL_IN_SECONDS) {\n                timer.loading();\n                getQuotes();\n            }\n        }\n    });\n\n    const selectQuote = async (quote: BuyTrade) => {\n        const provider = providersInfo && quote.exchange ? providersInfo[quote.exchange] : null;\n        if (quotesRequest) {\n            const result = await openCoinmarketBuyConfirmModal(provider?.companyName);\n            if (result) {\n                // empty quoteId means the partner requests login first, requestTrade to get login screen\n                if (!quote.quoteId) {\n                    const returnUrl = await createQuoteLink(quotesRequest, account);\n                    const response = await invityAPI.doBuyTrade({ trade: quote, returnUrl });\n                    if (response) {\n                        if (response.trade.status === 'LOGIN_REQUEST' && response.tradeForm) {\n                            submitRequestForm(response.tradeForm);\n                        } else {\n                            const errorMessage = `[doBuyTrade] ${response.trade.status} ${response.trade.error}`;\n                            console.log(errorMessage);\n                        }\n                    } else {\n                        const errorMessage = 'No response from the server';\n                        console.log(`[doBuyTrade] ${errorMessage}`);\n                        addNotification({\n                            type: 'error',\n                            error: errorMessage,\n                        });\n                    }\n                } else {\n                    setSelectedQuote(quote);\n                    timer.stop();\n                }\n            }\n        }\n    };\n\n    const goToPayment = async (address: string) => {\n        setCallInProgress(true);\n        if (!selectedQuote) return;\n\n        const returnUrl = await createTxLink(selectedQuote, account);\n        const quote = { ...selectedQuote, receiveAddress: address };\n        const response = await invityAPI.doBuyTrade({\n            trade: quote,\n            returnUrl,\n        });\n\n        if (!response || !response.trade || !response.trade.paymentId) {\n            addNotification({\n                type: 'error',\n                error: 'No response from the server',\n            });\n        } else if (response.trade.error) {\n            addNotification({\n                type: 'error',\n                error: response.trade.error,\n            });\n        } else {\n            saveTrade(response.trade, account, new Date().toISOString());\n            if (response.tradeForm) {\n                submitRequestForm(response.tradeForm);\n            }\n            if (isDesktop()) {\n                saveTransactionDetailId(response.trade.paymentId);\n                goto('wallet-coinmarket-buy-detail', selectedAccount.params);\n            }\n        }\n        setCallInProgress(false);\n    };\n\n    return {\n        goToPayment,\n        callInProgress,\n        selectedQuote,\n        verifyAddress,\n        device,\n        providersInfo,\n        saveTrade,\n        quotesRequest,\n        addressVerified,\n        quotes: innerQuotes,\n        alternativeQuotes: innerAlternativeQuotes,\n        selectQuote,\n        account,\n        REFETCH_INTERVAL_IN_SECONDS,\n        timer,\n    };\n};\n\nexport const CoinmarketBuyOffersContext = createContext<ContextValues | null>(null);\nCoinmarketBuyOffersContext.displayName = 'CoinmarketBuyOffersContext';\n\nexport const useCoinmarketBuyOffersContext = () => {\n    const context = useContext(CoinmarketBuyOffersContext);\n    if (context === null) throw Error('CoinmarketBuyOffersContext used without Context');\n    return context;\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useTheme, Button, variables, Icon } from '@trezor/components';\nimport { CoinmarketPaymentType, CoinmarketBuyProviderInfo } from '@wallet-components';\nimport { QuestionTooltip, Translation } from '@suite-components';\nimport { BuyTrade } from 'invity-api';\nimport { useCoinmarketBuyOffersContext } from '@wallet-hooks/useCoinmarketBuyOffers';\nimport { formatCryptoAmount } from '@wallet-utils/coinmarket/coinmarketUtils';\n\ninterface Props {\n    className?: string;\n    quote: BuyTrade;\n    wantCrypto: boolean;\n}\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    border-radius: 6px;\n    flex: 1;\n    width: 100%;\n    min-height: 150px;\n    padding-bottom: 16px;\n    background: ${props => props.theme.BG_WHITE};\n`;\n\nconst TagRow = styled.div`\n    display: flex;\n    min-height: 30px;\n`;\n\nconst Tag = styled.div`\n    margin-top: 10px;\n    height: 35px;\n    margin-left: -20px;\n    border: 1px solid tan;\n    text-transform: uppercase;\n`;\n\nconst Main = styled.div`\n    display: flex;\n    margin: 0 30px;\n    justify-content: space-between;\n    padding-bottom: 20px;\n    border-bottom: 1px solid ${props => props.theme.STROKE_GREY};\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        flex-direction: column;\n    }\n`;\n\nconst Left = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.H2};\n`;\n\nconst Right = styled.div`\n    display: flex;\n    justify-content: flex-end;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        justify-content: center;\n        padding-top: 10px;\n    }\n`;\n\nconst Details = styled.div`\n    display: flex;\n    min-height: 20px;\n    flex-wrap: wrap;\n    padding: 10px 30px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        flex-direction: column;\n    }\n`;\n\nconst Column = styled.div`\n    display: flex;\n    padding: 10px 0;\n    flex: 1;\n    flex-direction: column;\n    justify-content: flex-start;\n`;\n\nconst Heading = styled.div`\n    display: flex;\n    text-transform: uppercase;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n    padding-bottom: 9px;\n`;\n\nconst StyledButton = styled(Button)`\n    width: 180px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        width: 100%;\n    }\n`;\n\nconst Value = styled.div`\n    display: flex;\n    align-items: center;\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst Footer = styled.div`\n    margin: 0 30px;\n    padding: 10px 0;\n    padding-top: 23px;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    border-top: 1px solid ${props => props.theme.STROKE_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    font-size: ${variables.FONT_SIZE.SMALL};\n`;\n\nconst ErrorFooter = styled.div`\n    display: flex;\n    margin: 0 30px;\n    padding: 10px 0;\n    border-top: 1px solid ${props => props.theme.STROKE_GREY};\n    color: ${props => props.theme.TYPE_RED};\n`;\n\nconst StyledIcon = styled(Icon)`\n    padding-top: 8px;\n`;\n\nconst IconWrapper = styled.div`\n    padding-right: 3px;\n`;\n\nconst ErrorText = styled.div``;\n\nconst StyledQuestionTooltip = styled(QuestionTooltip)`\n    padding-left: 4px;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nexport function getQuoteError(quote: BuyTrade, wantCrypto: boolean) {\n    if (quote.error) {\n        if (wantCrypto) {\n            if (quote.minCrypto && Number(quote.receiveStringAmount) < quote.minCrypto) {\n                return (\n                    <Translation\n                        id=\"TR_BUY_OFFER_ERROR_MINIMUM_CRYPTO\"\n                        values={{\n                            amount: formatCryptoAmount(Number(quote.receiveStringAmount)),\n                            min: formatCryptoAmount(quote.minCrypto),\n                            currency: quote.receiveCurrency,\n                        }}\n                    />\n                );\n            }\n            if (quote.maxCrypto && Number(quote.receiveStringAmount) > quote.maxCrypto) {\n                return (\n                    <Translation\n                        id=\"TR_BUY_OFFER_ERROR_MAXIMUM_CRYPTO\"\n                        values={{\n                            amount: formatCryptoAmount(Number(quote.receiveStringAmount)),\n                            max: formatCryptoAmount(quote.maxCrypto),\n                            currency: quote.receiveCurrency,\n                        }}\n                    />\n                );\n            }\n        } else {\n            if (quote.minFiat && Number(quote.fiatStringAmount) < quote.minFiat) {\n                return (\n                    <Translation\n                        id=\"TR_BUY_OFFER_ERROR_MINIMUM_FIAT\"\n                        values={{\n                            amount: quote.fiatStringAmount,\n                            min: quote.minFiat,\n                            currency: quote.fiatCurrency,\n                        }}\n                    />\n                );\n            }\n            if (quote.maxFiat && Number(quote.fiatStringAmount) > quote.maxFiat) {\n                return (\n                    <Translation\n                        id=\"TR_BUY_OFFER_ERROR_MAXIMUM_FIAT\"\n                        values={{\n                            amount: quote.fiatStringAmount,\n                            max: quote.maxFiat,\n                            currency: quote.fiatCurrency,\n                        }}\n                    />\n                );\n            }\n        }\n        return quote.error;\n    }\n    return '';\n}\n\nconst Quote = ({ className, quote, wantCrypto }: Props) => {\n    const theme = useTheme();\n    const { selectQuote, providersInfo } = useCoinmarketBuyOffersContext();\n    // TODO - tags are not yet fully supported by the API server\n    // in the future will be taken from quote.tags, will need some algorithm to evaluate them and show only one\n    const hasTag = false;\n    const { paymentMethod, exchange, error } = quote;\n\n    return (\n        <Wrapper className={className}>\n            <TagRow>{hasTag && <Tag>best offer</Tag>}</TagRow>\n            <Main>\n                {error && <Left>N/A</Left>}\n                {!error && (\n                    <Left>\n                        {wantCrypto\n                            ? `${quote.fiatStringAmount} ${quote.fiatCurrency}`\n                            : `${formatCryptoAmount(Number(quote.receiveStringAmount))} ${\n                                  quote.receiveCurrency\n                              }`}\n                    </Left>\n                )}\n                <Right>\n                    <StyledButton isDisabled={!!quote.error} onClick={() => selectQuote(quote)}>\n                        <Translation id=\"TR_BUY_GET_THIS_OFFER\" />\n                    </StyledButton>\n                </Right>\n            </Main>\n            <Details>\n                <Column>\n                    <Heading>\n                        <Translation id=\"TR_BUY_PROVIDER\" />\n                    </Heading>\n                    <Value>\n                        <CoinmarketBuyProviderInfo exchange={exchange} providers={providersInfo} />\n                    </Value>\n                </Column>\n                <Column>\n                    <Heading>\n                        <Translation id=\"TR_BUY_PAID_BY\" />\n                    </Heading>\n                    <Value>\n                        <CoinmarketPaymentType method={paymentMethod} />\n                    </Value>\n                </Column>\n                <Column>\n                    <Heading>\n                        <Translation id=\"TR_BUY_FEES\" />{' '}\n                        <StyledQuestionTooltip tooltip=\"TR_OFFER_FEE_INFO\" />\n                    </Heading>\n                    <Value>\n                        <Translation id=\"TR_BUY_ALL_FEES_INCLUDED\" />\n                    </Value>\n                </Column>\n            </Details>\n            {error && (\n                <ErrorFooter>\n                    <IconWrapper>\n                        <StyledIcon icon=\"CROSS\" size={12} color={theme.TYPE_RED} />\n                    </IconWrapper>\n                    <ErrorText>{getQuoteError(quote, wantCrypto)}</ErrorText>\n                </ErrorFooter>\n            )}\n\n            {quote.infoNote && !error && <Footer>{quote.infoNote}</Footer>}\n        </Wrapper>\n    );\n};\n\nexport default Quote;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { CoinLogo, variables, Icon } from '@trezor/components';\nimport { BuyTrade } from 'invity-api';\nimport { useCoinmarketBuyOffersContext } from '@wallet-hooks/useCoinmarketBuyOffers';\nimport Quote from './Quote';\nimport { Translation } from '@suite-components';\nimport { CoinmarketRefreshTime } from '@wallet-components';\nimport { formatCryptoAmount } from '@wallet-utils/coinmarket/coinmarketUtils';\n\ninterface Props {\n    isAlternative?: boolean;\n    quotes: BuyTrade[];\n}\n\nconst Wrapper = styled.div``;\nconst Quotes = styled.div``;\n\nconst StyledQuote = styled(Quote)`\n    margin-bottom: 20px;\n`;\n\nconst Header = styled.div`\n    margin: 36px 0 24px 0;\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst Left = styled.div``;\nconst Right = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n`;\n\nconst SummaryRow = styled.div`\n    display: flex;\n    align-items: center;\n    font-size: ${variables.FONT_SIZE.H2};\n    text-transform: uppercase;\n`;\n\nconst OrigAmount = styled.div`\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-size: ${variables.FONT_SIZE.SMALL};\n`;\n\nconst StyledIcon = styled(Icon)`\n    padding: 0 10px;\n`;\n\nconst Text = styled.div`\n    display: flex;\n    padding-top: 3px;\n    align-items: center;\n`;\n\nconst Crypto = styled(Text)`\n    padding-left: 10px;\n`;\n\nconst Receive = styled(Text)`\n    padding-right: 10px;\n`;\n\nconst StyledCoinLogo = styled(CoinLogo)``;\n\nconst NoQuotes = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    align-items: center;\n    flex: 1;\n`;\n\nconst List = ({ isAlternative, quotes }: Props) => {\n    const {\n        account,\n        quotesRequest,\n        timer,\n        REFETCH_INTERVAL_IN_SECONDS,\n    } = useCoinmarketBuyOffersContext();\n\n    if (!quotesRequest) return null;\n    const {\n        fiatStringAmount,\n        fiatCurrency,\n        cryptoStringAmount,\n        wantCrypto,\n        receiveCurrency,\n    } = quotesRequest;\n\n    return (\n        <Wrapper>\n            <Header>\n                <Left>\n                    {isAlternative ? (\n                        <>\n                            <SummaryRow>\n                                <Text>\n                                    {wantCrypto ? '' : `${quotes[0].fiatStringAmount} `}\n                                    {quotes[0].fiatCurrency}\n                                </Text>\n                                <StyledIcon icon=\"ARROW_RIGHT\" />\n                                {wantCrypto && (\n                                    <Receive>\n                                        {formatCryptoAmount(Number(quotes[0].receiveStringAmount))}\n                                    </Receive>\n                                )}\n                                <StyledCoinLogo size={21} symbol={account.symbol} />\n                                <Crypto>{quotes[0].receiveCurrency}</Crypto>\n                            </SummaryRow>\n                            {!wantCrypto && (\n                                <OrigAmount>\n                                    ≈ {fiatStringAmount} {fiatCurrency}\n                                </OrigAmount>\n                            )}\n                        </>\n                    ) : (\n                        <SummaryRow>\n                            <Text>\n                                {wantCrypto ? '' : `${fiatStringAmount} `}\n                                {fiatCurrency}\n                            </Text>\n                            <StyledIcon icon=\"ARROW_RIGHT\" />\n                            {wantCrypto && (\n                                <Receive>{formatCryptoAmount(Number(cryptoStringAmount))}</Receive>\n                            )}\n                            <StyledCoinLogo size={21} symbol={account.symbol} />\n                            <Crypto>{receiveCurrency}</Crypto>\n                        </SummaryRow>\n                    )}\n                </Left>\n                {!isAlternative && !timer.isStopped && (\n                    <Right>\n                        <CoinmarketRefreshTime\n                            isLoading={timer.isLoading}\n                            refetchInterval={REFETCH_INTERVAL_IN_SECONDS}\n                            seconds={timer.timeSpend.seconds}\n                            label={<Translation id=\"TR_BUY_OFFERS_REFRESH\" />}\n                        />\n                    </Right>\n                )}\n            </Header>\n            <Quotes>\n                {quotes?.length === 0 ? (\n                    <NoQuotes>\n                        <Translation id=\"TR_BUY_NO_OFFERS\" />\n                    </NoQuotes>\n                ) : (\n                    quotes.map(quote => (\n                        <StyledQuote\n                            wantCrypto={wantCrypto}\n                            key={`${quote.exchange}-${quote.paymentMethod}-${quote.receiveCurrency}`}\n                            quote={quote}\n                        />\n                    ))\n                )}\n            </Quotes>\n        </Wrapper>\n    );\n};\n\nexport default List;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { getUnusedAddressFromAccount } from '@wallet-utils/coinmarket/coinmarketUtils';\nimport {\n    FiatValue,\n    QuestionTooltip,\n    Translation,\n    HiddenPlaceholder,\n    AccountLabeling,\n} from '@suite-components';\nimport { Input, Button, variables, CoinLogo, DeviceImage } from '@trezor/components';\nimport { useCoinmarketBuyOffersContext } from '@wallet-hooks/useCoinmarketBuyOffers';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-top: 10px;\n`;\n\nconst CardContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 24px;\n`;\n\nconst LogoWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    padding: 0 0 0 15px;\n`;\n\nconst AccountWrapper = styled.div`\n    display: flex;\n    padding: 0 0 0 15px;\n    flex-direction: column;\n`;\n\nconst Label = styled.div`\n    display: flex;\n    align-items: center;\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst StyledQuestionTooltip = styled(QuestionTooltip)`\n    padding-left: 3px;\n`;\n\nconst UpperCase = styled.div`\n    text-transform: uppercase;\n    padding: 0 3px;\n`;\n\nconst FiatWrapper = styled.div`\n    padding: 0 0 0 3px;\n`;\n\nconst CustomLabel = styled(Label)`\n    padding-bottom: 12px;\n`;\n\nconst LabelText = styled.div``;\n\nconst StyledDeviceImage = styled(DeviceImage)`\n    padding: 0 10px 0 0;\n`;\n\nconst Amount = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.TINY};\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst AccountName = styled.div`\n    display: flex;\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst FakeInput = styled.div`\n    display: flex;\n    margin-bottom: 20px;\n    padding: 5px;\n    min-height: 61px;\n    align-items: center;\n    border-radius: 4px;\n    border: solid 2px ${props => props.theme.STROKE_GREY};\n    background: ${props => props.theme.BG_WHITE};\n`;\n\nconst ButtonWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-top: 20px;\n    border-top: 1px solid ${props => props.theme.STROKE_GREY};\n    margin: 20px 0;\n`;\n\nconst Confirmed = styled.div`\n    display: flex;\n    height: 60px;\n    font-size: ${variables.FONT_SIZE.BIG};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    background: ${props => props.theme.BG_GREY};\n    align-items: center;\n    justify-content: center;\n`;\n\nconst VerifyAddressComponent = () => {\n    const {\n        account,\n        device,\n        callInProgress,\n        verifyAddress,\n        selectedQuote,\n        goToPayment,\n        addressVerified,\n    } = useCoinmarketBuyOffersContext();\n    const { symbol, formattedBalance } = account;\n    const { path, address } = getUnusedAddressFromAccount(account);\n\n    if (!path || !address || !selectedQuote) {\n        return null;\n    }\n\n    return (\n        <Wrapper>\n            <CardContent>\n                <CustomLabel>\n                    <LabelText>\n                        <Translation id=\"TR_BUY_RECEIVING_ACCOUNT\" />\n                    </LabelText>\n                    <StyledQuestionTooltip tooltip=\"TR_BUY_RECEIVE_ACCOUNT_QUESTION_TOOLTIP\" />\n                </CustomLabel>\n                <FakeInput>\n                    <LogoWrapper>\n                        <CoinLogo size={25} symbol={symbol} />\n                    </LogoWrapper>\n                    <AccountWrapper>\n                        <AccountName>\n                            <AccountLabeling account={account} />\n                        </AccountName>\n                        <Amount>\n                            <HiddenPlaceholder>{formattedBalance}</HiddenPlaceholder>{' '}\n                            <UpperCase>{symbol}</UpperCase> •\n                            <FiatWrapper>\n                                <FiatValue amount={formattedBalance} symbol={symbol} />\n                            </FiatWrapper>\n                        </Amount>\n                    </AccountWrapper>\n                </FakeInput>\n                <Input\n                    label={\n                        <Label>\n                            <Translation id=\"TR_BUY_RECEIVING_ADDRESS\" />\n                            <StyledQuestionTooltip tooltip=\"TR_BUY_RECEIVE_ADDRESS_QUESTION_TOOLTIP\" />\n                        </Label>\n                    }\n                    value={address}\n                    readOnly\n                />\n                {addressVerified && addressVerified === address && (\n                    <Confirmed>\n                        {device && (\n                            <StyledDeviceImage\n                                height={25}\n                                trezorModel={device.features?.major_version === 1 ? 1 : 2}\n                            />\n                        )}\n                        <Translation id=\"TR_BUY_CONFIRMED_ON_TREZOR\" />\n                    </Confirmed>\n                )}\n            </CardContent>\n            <ButtonWrapper>\n                {(!addressVerified || addressVerified !== address) && (\n                    <Button\n                        isLoading={callInProgress}\n                        isDisabled={callInProgress}\n                        onClick={() => verifyAddress(account)}\n                    >\n                        <Translation id=\"TR_BUY_CONFIRM_ON_TREZOR\" />\n                    </Button>\n                )}\n                {addressVerified && addressVerified === address && (\n                    <Button\n                        isLoading={callInProgress}\n                        isDisabled={callInProgress}\n                        onClick={() => goToPayment(address)}\n                    >\n                        <Translation id=\"TR_BUY_GO_TO_PAYMENT\" />\n                    </Button>\n                )}\n            </ButtonWrapper>\n        </Wrapper>\n    );\n};\n\nexport default VerifyAddressComponent;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Card, variables } from '@trezor/components';\nimport VerifyAddress from './components/VerifyAddress';\nimport { CoinmarketBuyOfferInfo } from '@wallet-components';\nimport { useCoinmarketBuyOffersContext } from '@wallet-hooks/useCoinmarketBuyOffers';\n\nconst Wrapper = styled.div`\n    display: flex;\n    margin-top: 20px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        flex-direction: column;\n    }\n`;\n\nconst StyledCard = styled(Card)`\n    flex: 1;\n    padding: 0;\n`;\n\nconst SelectedOffer = () => {\n    const { account, selectedQuote, providersInfo } = useCoinmarketBuyOffersContext();\n    if (!selectedQuote) return null;\n\n    return (\n        <Wrapper>\n            <StyledCard>\n                <VerifyAddress />\n            </StyledCard>\n            <CoinmarketBuyOfferInfo\n                selectedQuote={selectedQuote}\n                account={account}\n                providers={providersInfo}\n            />\n        </Wrapper>\n    );\n};\n\nexport default SelectedOffer;\n","import React, { useEffect, useContext } from 'react';\nimport styled from 'styled-components';\nimport { CoinmarketFooter, CoinmarketBuyTopPanel } from '@wallet-components';\nimport { variables } from '@trezor/components';\nimport { LayoutContext, Translation } from '@suite-components';\nimport { useCoinmarketBuyOffersContext } from '@wallet-hooks/useCoinmarketBuyOffers';\n\nimport List from './List';\nimport SelectedOffer from './SelectedOffer';\n\nconst Wrapper = styled.div`\n    padding: 16px 32px 32px 32px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        padding: 16px;\n    }\n`;\n\nconst Divider = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    cursor: default;\n    padding: 61px 0;\n`;\n\nconst DividerLine = styled.div`\n    height: 1px;\n    flex: 1;\n    background: ${props => props.theme.STROKE_GREY};\n`;\n\nconst DividerLeft = styled(DividerLine)``;\nconst DividerRight = styled(DividerLine)``;\n\nconst Currency = styled.div`\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    text-transform: uppercase;\n    padding-left: 3px;\n`;\n\nconst DividerMiddle = styled.div`\n    display: flex;\n    align-items: center;\n    padding: 5px 20px;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    font-size: ${variables.FONT_SIZE.SMALL};\n    border-radius: 25px;\n    border: 1px solid ${props => props.theme.STROKE_GREY};\n    background: ${props => props.theme.BG_WHITE};\n    text-align: center;\n`;\n\nconst NoQuotes = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    min-height: 550px;\n    align-items: center;\n    flex: 1;\n`;\n\nconst Offers = () => {\n    const { quotes, alternativeQuotes, selectedQuote } = useCoinmarketBuyOffersContext();\n    const { setLayout } = useContext(LayoutContext);\n\n    useEffect(() => {\n        if (setLayout) setLayout('Trezor Suite | Trade', undefined, <CoinmarketBuyTopPanel />);\n    }, [setLayout]);\n\n    return (\n        <Wrapper>\n            {!selectedQuote && (\n                <>\n                    {quotes?.length === 0 && alternativeQuotes?.length === 0 ? (\n                        <NoQuotes>\n                            <Translation id=\"TR_BUY_NO_OFFERS\" />\n                        </NoQuotes>\n                    ) : (\n                        <>\n                            <List quotes={quotes} />\n                            {alternativeQuotes && alternativeQuotes.length > 0 && (\n                                <>\n                                    <Divider>\n                                        <DividerLeft />\n                                        <DividerMiddle>\n                                            <Translation id=\"TR_BUY_OTHER_OFFERS_IN\" />\n                                            <Currency>{alternativeQuotes[0].fiatCurrency}</Currency>\n                                        </DividerMiddle>\n                                        <DividerRight />\n                                    </Divider>\n                                    <List isAlternative quotes={alternativeQuotes} />\n                                </>\n                            )}\n                        </>\n                    )}\n                </>\n            )}\n            {selectedQuote && <SelectedOffer />}\n            <CoinmarketFooter />\n        </Wrapper>\n    );\n};\n\nexport default Offers;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { AppState } from '@suite-types';\nimport { WalletLayout } from '@wallet-components';\nimport styled from 'styled-components';\nimport { ComponentProps, Props } from '@wallet-types/coinmarketBuyOffers';\nimport { CoinmarketBuyOffersContext, useOffers } from '@wallet-hooks/useCoinmarketBuyOffers';\nimport Offers from './Offers';\n\nconst mapStateToProps = (state: AppState): ComponentProps => ({\n    selectedAccount: state.wallet.selectedAccount,\n    device: state.suite.device,\n    quotes: state.wallet.coinmarket.buy.quotes,\n    alternativeQuotes: state.wallet.coinmarket.buy.alternativeQuotes,\n    quotesRequest: state.wallet.coinmarket.buy.quotesRequest,\n    isFromRedirect: state.wallet.coinmarket.buy.isFromRedirect,\n    addressVerified: state.wallet.coinmarket.buy.addressVerified,\n    providersInfo: state.wallet.coinmarket.buy.buyInfo?.providerInfos,\n});\n\nconst Wrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n`;\n\nconst OffersIndexLoaded = (props: Props) => {\n    const { selectedAccount } = props;\n    const coinmarketOffersValues = useOffers({ ...props, selectedAccount });\n\n    return (\n        <CoinmarketBuyOffersContext.Provider value={coinmarketOffersValues}>\n            <Wrapper>\n                <Offers />\n            </Wrapper>\n        </CoinmarketBuyOffersContext.Provider>\n    );\n};\n\nconst OffersIndex = (props: ComponentProps) => {\n    const { selectedAccount } = props;\n    if (selectedAccount.status !== 'loaded') {\n        return <WalletLayout title=\"TR_NAV_BUY\" account={selectedAccount} />;\n    }\n    return <OffersIndexLoaded {...props} selectedAccount={selectedAccount} />;\n};\n\nexport default connect(mapStateToProps)(OffersIndex);\n","import Offers from '@wallet-views/coinmarket/buy/offers';\n\nexport default Offers;\n","import { useEffect, useState } from 'react';\n\nexport interface Timer {\n    timeSpend: {\n        seconds: number;\n    };\n    resetCount: number;\n    isStopped: boolean;\n    isLoading: boolean;\n    stop: () => void;\n    reset: () => void;\n    loading: () => void;\n}\n\nexport const useTimer = (): Timer => {\n    const [timeSpend, setTimeSpend] = useState(0);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isStopped, setIsStopped] = useState(false);\n    const [resetCount, setResetCount] = useState(0);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setTimeSpend(timeSpend + 1000);\n        }, 1000);\n\n        if (isStopped || isLoading) {\n            clearTimeout(timeout);\n        }\n\n        return () => {\n            clearTimeout(timeout);\n        };\n    });\n\n    const reset = () => {\n        setIsLoading(false);\n        setResetCount(resetCount + 1);\n        setTimeSpend(0);\n        setIsStopped(false);\n    };\n\n    const stop = () => {\n        setIsStopped(true);\n    };\n\n    const loading = () => {\n        setTimeSpend(0);\n        setIsLoading(true);\n        setIsStopped(false);\n    };\n\n    return {\n        timeSpend: {\n            seconds: timeSpend / 1000,\n        },\n        resetCount,\n        isStopped,\n        isLoading,\n        stop,\n        reset,\n        loading,\n    };\n};\n","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/accounts/coinmarket/buy/offers\",\n        function () {\n          return require(\"private-next-pages/accounts/coinmarket/buy/offers/index.tsx\");\n        }\n      ]);\n    "],"sourceRoot":""}