{"version":3,"sources":["webpack://_N_E/../suite/src/hooks/wallet/useCoinmarketBuyDetail.ts","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/detail/components/PaymentFailed/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/detail/components/PaymentProcessing/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/detail/components/PaymentSuccessful/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/detail/components/WaitingForPayment/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/detail/Detail/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/detail/index.tsx","webpack://_N_E/./pages/accounts/coinmarket/buy/detail/index.tsx","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?bacf"],"names":["CoinmarketBuyDetailContext","createContext","displayName","Wrapper","styled","div","Image","img","Title","variables","FONT_WEIGHT","DEMI_BOLD","Description","props","theme","TYPE_LIGHT_GREY","MEDIUM","Link","a","StyledButton","Button","PaymentFailed","transactionId","supportUrl","account","goto","useActions","routerActions","src","resolveStaticPath","Translation","id","href","target","variant","onClick","symbol","accountIndex","index","accountType","PaymentProcessing","PaymentSuccessful","PaymentButton","WaitingForPayment","trade","isWorking","setIsWorking","useState","submitRequestForm","coinmarketBuyActions","async","returnUrl","createTxLink","invityAPI","getBuyTradeForm","then","response","isLoading","isDisabled","SCREEN_SIZE","LG","StyledCard","Card","CoinmarketDetail","setLayout","useContext","LayoutContext","useEffect","undefined","buyInfo","context","Error","useCoinmarketBuyDetailContext","tradeStatus","data","status","showError","showProcessing","showWaiting","showSuccess","exchange","provider","providerInfos","supportUrlTemplate","statusUrl","replace","paymentId","key","selectedQuote","providers","DetailIndexLoaded","selectedAccount","coinmarketBuyContextValues","trades","buyTrade","find","tradeType","originalPaymentId","invityAPIUrl","useSelector","state","suite","settings","debug","wallet","coinmarket","buy","setInvityAPIServer","useWatchBuyTrade","useCoinmarketBuyDetail","Provider","value","Detail","connect","title","window","__NEXT_P","push"],"mappings":"uMAOO,MA0BMA,EAA6BC,wBAAoC,MAC9ED,EAA2BE,YAAc,6B,oICxBzC,MAAMC,EAAUC,UAAOC,IAAV,kDAAGD,CAAH,+GAQPE,EAAQF,UAAOG,IAAV,gDAAGH,CAAH,MAELI,EAAQJ,UAAOC,IAAV,gDAAGD,CAAH,qCAEQK,YAAUC,YAAYC,WAGnCC,EAAcR,UAAOC,IAAV,sDAAGD,CAAH,8IAIJS,GAASA,EAAMC,MAAMC,iBACfN,YAAUC,YAAYM,QAMnCC,EAAOb,UAAOc,EAAV,+CAAGd,CAAH,yBAIJe,EAAef,kBAAOgB,UAAV,uDAAGhB,CAAH,sBA8CHiB,MApCO,EAAGC,gBAAeC,aAAYC,cAChD,MAAM,KAAEC,GAASC,YAAW,CACxBD,KAAME,MAEV,OACI,EAACxB,EAAD,KACI,EAACG,EAAD,CAAOsB,IAAKC,YAAkB,+BAC9B,EAACrB,EAAD,KACI,EAACsB,EAAA,EAAD,CAAaC,GAAG,+BAEpB,EAACnB,EAAD,KACI,EAACkB,EAAA,EAAD,CAAaC,GAAG,8BAEnBT,GAAiB,EAAC,IAAD,CAAyBA,cAAeA,IACzDC,GACG,EAACN,EAAD,CAAMe,KAAMT,EAAYU,OAAO,UAC3B,EAAC,SAAD,CAAQC,QAAQ,YACZ,EAACJ,EAAA,EAAD,CAAaC,GAAG,kCAI5B,EAACZ,EAAD,CACIgB,QAAS,IACLV,EAAK,wBAAyB,CAC1BW,OAAQZ,EAAQY,OAChBC,aAAcb,EAAQc,MACtBC,YAAaf,EAAQe,eAI7B,EAACT,EAAA,EAAD,CAAaC,GAAG,kC,oBC3EhC,MAAM5B,EAAUC,UAAOC,IAAV,sDAAGD,CAAH,+GAQPI,EAAQJ,UAAOC,IAAV,oDAAGD,CAAH,qCAEQK,YAAUC,YAAYC,WAGnCM,EAAOb,UAAOc,EAAV,mDAAGd,CAAH,sBA0BKoC,MAlBW,EAAGjB,gBAErB,EAAC,EAAD,KACI,EAAC,SAAD,MACA,EAAC,EAAD,KACI,EAACO,EAAA,EAAD,CAAaC,GAAG,iCAEnBR,GACG,EAAC,EAAD,CAAMS,KAAMT,EAAYU,OAAO,UAC3B,EAAC,SAAD,CAAQC,QAAQ,YACZ,EAACJ,EAAA,EAAD,CAAaC,GAAG,qC,oBC3BxC,MAAM5B,EAAUC,UAAOC,IAAV,sDAAGD,CAAH,+GAQPE,EAAQF,UAAOG,IAAV,oDAAGH,CAAH,MAELI,EAAQJ,UAAOC,IAAV,oDAAGD,CAAH,qCAEQK,YAAUC,YAAYC,WAGnCC,EAAcR,UAAOC,IAAV,0DAAGD,CAAH,8IAIJS,GAASA,EAAMC,MAAMC,iBACfN,YAAUC,YAAYM,QAsC1ByB,MA5BW,EAAGjB,cACzB,MAAM,KAAEC,GAASC,YAAW,CACxBD,KAAME,MAEV,OACI,EAAC,EAAD,KACI,EAAC,EAAD,CAAOC,IAAKC,YAAkB,wCAC9B,EAAC,EAAD,KACI,EAAC,IAAD,CAAaE,GAAG,iCAEpB,EAAC,EAAD,KACI,EAAC,IAAD,CAAaA,GAAG,gCAEpB,EAAC,SAAD,CACII,QAAS,IACLV,EAAK,wBAAyB,CAC1BW,OAAQZ,EAAQY,OAChBC,aAAcb,EAAQc,MACtBC,YAAaf,EAAQe,eAI7B,EAAC,IAAD,CAAaR,GAAG,oC,4CChDhC,MAAM5B,EAAUC,UAAOC,IAAV,sDAAGD,CAAH,+GAQPE,EAAQF,UAAOG,IAAV,oDAAGH,CAAH,MAELI,EAAQJ,UAAOC,IAAV,oDAAGD,CAAH,qCAEQK,YAAUC,YAAYC,WAGnCC,EAAcR,UAAOC,IAAV,0DAAGD,CAAH,8IAIJS,GAASA,EAAMC,MAAMC,iBACfN,YAAUC,YAAYM,QAUnC0B,EAAgBtC,kBAAOgB,UAAV,4DAAGhB,CAAH,sBA+CJuC,MArCW,EAAGrB,gBAAesB,QAAOpB,cAC/C,MAAM,EAACqB,EAAD,EAAYC,GAAgBC,oBAAS,IACrC,kBAAEC,GAAsBtB,YAAW,CACrCsB,kBAAmBC,MAavB,OACI,EAAC,EAAD,KACI,EAAC,EAAD,CAAOrB,IAAKC,YAAkB,wCAC9B,EAAC,EAAD,KACI,EAACC,EAAA,EAAD,CAAaC,GAAG,mCAEpB,EAAC,EAAD,KACI,EAACD,EAAA,EAAD,CAAaC,GAAG,kCAEnBT,GAAiB,EAAC,IAAD,CAAyBA,cAAeA,IAC1D,EAACoB,EAAD,CAAeP,QApBHe,UAChBJ,GAAa,GACb,MAAMK,QAAkBC,YAAaR,EAAOpB,GAC5C6B,IAAUC,gBAAgB,CAAEV,QAAOO,cAAaI,MAAKC,IAC7CA,GACAR,EAAkBQ,OAeeC,UAAWZ,EAAWa,WAAYb,GACnE,EAACf,EAAA,EAAD,CAAaC,GAAG,oC,oBClEhC,MAAM5B,EAAUC,UAAOC,IAAV,2CAAGD,CAAH,2FAIuBK,YAAUkD,YAAYC,IAKpDC,EAAazD,kBAAO0D,QAAV,8CAAG1D,CAAH,uBAoED2D,MA/DU,KAAM,UAC3B,MAAM,UAAEC,GAAcC,qBAAWC,KAEjCC,qBAAU,KACFH,GAAWA,EAAU,4BAAwBI,EAAW,EAAC,IAAD,SAC7D,CAACJ,IAEJ,MAAM,QAAExC,EAAF,MAAWoB,EAAX,QAAkByB,GLCiB,MACzC,MAAMC,EAAUL,qBAAWjE,GAC3B,GAAgB,OAAZsE,EAAkB,MAAMC,MAAM,mDAClC,OAAOD,GKJ6BE,IAC9B,KAAE/C,GAASC,YAAW,CAAED,KAAME,MAIpC,IAAKiB,EAMD,OALAnB,EAAK,wBAAyB,CAC1BW,OAAQZ,EAAQY,OAChBC,aAAcb,EAAQc,MACtBC,YAAaf,EAAQe,cAElB,KAGX,MAAMkC,EAAW,OAAG7B,QAAH,IAAGA,GAAH,UAAGA,EAAO8B,YAAV,aAAG,EAAaC,OAC3BC,EAA4B,UAAhBH,GAA2C,YAAhBA,EACvCI,EAAiC,qBAAhBJ,EACjBK,EAA8B,cAAhBL,EACdM,EAA8B,YAAhBN,EAEdO,EAAQ,OAAGpC,QAAH,IAAGA,GAAH,UAAGA,EAAO8B,YAAV,aAAG,EAAaM,SACxBC,EACFZ,GAAWA,EAAQa,eAAiBF,EAAWX,EAAQa,cAAcF,QAAYZ,EAC/Ee,GAA6B,OAARF,QAAQ,IAARA,OAAA,EAAAA,EAAUG,aAAV,OAAuBH,QAAvB,IAAuBA,OAAvB,EAAuBA,EAAU1D,YACtDA,EAAU,OAAG4D,QAAH,IAAGA,OAAH,EAAGA,EAAoBE,QAAQ,iBAAsB,OAALzC,QAAK,IAALA,GAAA,UAAAA,EAAO8B,YAAP,eAAaY,YAAa,IAE1F,OACI,EAAC,EAAD,KACI,EAACzB,EAAD,KACKe,GACG,EAAC,EAAD,CACIpD,QAASA,EACTF,cAAesB,EAAM2C,IACrBhE,WAAYA,IAGnBsD,GAAkB,EAAC,EAAD,MAClBC,GACG,EAAC,EAAD,CACIlC,MAAOA,EAAM8B,KACbpD,cAAesB,EAAM2C,IACrB/D,QAASA,IAGhBuD,GAAe,EAAC,EAAD,CAAmBvD,QAASA,KAEhD,EAAC,IAAD,CACIA,QAASA,EACTgE,cAAe5C,EAAM8B,KACrBpD,cAAesB,EAAM2C,IACrBE,UAAS,OAAEpB,QAAF,IAAEA,OAAF,EAAEA,EAASa,kB,8lBCxEpC,MAMM/E,GAAUC,UAAOC,IAAV,2CAAGD,CAAH,oDAMPsF,GAAqB7E,IACvB,MAAM,gBAAE8E,GAAoB9E,EACtB+E,ENpB6B/E,KACnC,MAAM,gBAAE8E,EAAF,OAAmBE,EAAnB,cAA2BvE,GAAkBT,EAC7CiF,EAAWD,EAAOE,MACpBnD,IAAK,YACmB,QAApBA,EAAMoD,YACLpD,EAAM2C,MAAQjE,IAAiB,UAAAsB,EAAM8B,YAAN,eAAYuB,qBAAsB3E,OAEpE,QAAEE,GAAYmE,GACd,aAAEO,EAAF,QAAgB7B,GAAY8B,aAAYC,IAAS,CACnDF,aAAcE,EAAMC,MAAMC,SAASC,MAAML,aACzC7B,QAAS+B,EAAMI,OAAOC,WAAWC,IAAIrC,YAQzC,OANI6B,GACA7C,IAAUsD,mBAAmBT,GAGjCU,YAAiBpF,EAASsE,GAEnB,CACHtE,UACAoB,MAAOkD,EACPxE,gBACA+C,YMF+BwC,CAAuB,GAAD,MAAMhG,GAAN,IAAa8E,qBAEtE,OACI,EAAC3F,EAA2B8G,SAA5B,CAAqCC,MAAOnB,GACxC,EAAC,GAAD,KACI,EAACoB,EAAD,SAeDC,oBAlCUb,IAAD,CACpBT,gBAAiBS,EAAMI,OAAOb,gBAC9BE,OAAQO,EAAMI,OAAOC,WAAWZ,OAChCvE,cAAe8E,EAAMI,OAAOC,WAAWC,IAAIpF,iBA+BhC2F,EATMpG,IACjB,MAAM,gBAAE8E,GAAoB9E,EAE5B,MAA+B,WAA3B8E,EAAgBhB,OACT,EAAC,IAAD,CAAcuC,MAAM,aAAa1F,QAASmE,IAE9C,EAACD,GAAD,eAAuB7E,EAAvB,CAA8B8E,gBAAiBA,QC1C3CqB,c,sBCDRG,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,kCACA,WACE,OAAO,EAAQ,a","file":"static/chunks/pages/accounts/coinmarket/buy/detail-842049ef2150628c1897.js","sourcesContent":["import { createContext, useContext } from 'react';\nimport { Props, ContextValues } from '@wallet-types/coinmarketBuyDetail';\nimport { useWatchBuyTrade } from '@wallet-hooks/useCoinmarket';\nimport { useSelector } from '@suite-hooks';\nimport invityAPI from '@suite-services/invityAPI';\nimport { TradeBuy } from '@wallet-reducers/coinmarketReducer';\n\nexport const useCoinmarketBuyDetail = (props: Props) => {\n    const { selectedAccount, trades, transactionId } = props;\n    const buyTrade = trades.find(\n        trade =>\n            trade.tradeType === 'buy' &&\n            (trade.key === transactionId || trade.data?.originalPaymentId === transactionId),\n    ) as TradeBuy;\n    const { account } = selectedAccount;\n    const { invityAPIUrl, buyInfo } = useSelector(state => ({\n        invityAPIUrl: state.suite.settings.debug.invityAPIUrl,\n        buyInfo: state.wallet.coinmarket.buy.buyInfo,\n    }));\n    if (invityAPIUrl) {\n        invityAPI.setInvityAPIServer(invityAPIUrl);\n    }\n\n    useWatchBuyTrade(account, buyTrade);\n\n    return {\n        account,\n        trade: buyTrade,\n        transactionId,\n        buyInfo,\n    };\n};\n\nexport const CoinmarketBuyDetailContext = createContext<ContextValues | null>(null);\nCoinmarketBuyDetailContext.displayName = 'CoinmarketBuyDetailContext';\n\nexport const useCoinmarketBuyDetailContext = () => {\n    const context = useContext(CoinmarketBuyDetailContext);\n    if (context === null) throw Error('CoinmarketBuyDetailContext used without Context');\n    return context;\n};\n","import * as routerActions from '@suite-actions/routerActions';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { resolveStaticPath } from '@suite-utils/nextjs';\nimport { Button, variables } from '@trezor/components';\nimport { CoinmarketTransactionId } from '@wallet-components';\nimport { useActions } from '@suite-hooks/useActions';\nimport { Account } from '@wallet-types';\nimport { Translation } from '@suite-components/Translation';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 60px 20px 60px 20px;\n    flex-direction: column;\n`;\n\nconst Image = styled.img``;\n\nconst Title = styled.div`\n    margin-top: 25px;\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst Description = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    margin: 17px 0 10px 0;\n    max-width: 310px;\n    text-align: center;\n`;\n\nconst Link = styled.a`\n    margin-bottom: 30px;\n`;\n\nconst StyledButton = styled(Button)`\n    margin-top: 30px;\n`;\n\ninterface Props {\n    transactionId?: string;\n    supportUrl?: string;\n    account: Account;\n}\n\nconst PaymentFailed = ({ transactionId, supportUrl, account }: Props) => {\n    const { goto } = useActions({\n        goto: routerActions.goto,\n    });\n    return (\n        <Wrapper>\n            <Image src={resolveStaticPath('/images/svg/uni-error.svg')} />\n            <Title>\n                <Translation id=\"TR_BUY_DETAIL_ERROR_TITLE\" />\n            </Title>\n            <Description>\n                <Translation id=\"TR_BUY_DETAIL_ERROR_TEXT\" />\n            </Description>\n            {transactionId && <CoinmarketTransactionId transactionId={transactionId} />}\n            {supportUrl && (\n                <Link href={supportUrl} target=\"_blank\">\n                    <Button variant=\"tertiary\">\n                        <Translation id=\"TR_BUY_DETAIL_ERROR_SUPPORT\" />\n                    </Button>\n                </Link>\n            )}\n            <StyledButton\n                onClick={() =>\n                    goto('wallet-coinmarket-buy', {\n                        symbol: account.symbol,\n                        accountIndex: account.index,\n                        accountType: account.accountType,\n                    })\n                }\n            >\n                <Translation id=\"TR_BUY_DETAIL_ERROR_BUTTON\" />\n            </StyledButton>\n        </Wrapper>\n    );\n};\n\nexport default PaymentFailed;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variables, Loader, Button } from '@trezor/components';\nimport { Translation } from '@suite-components/Translation';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 60px 20px 60px 20px;\n    flex-direction: column;\n`;\n\nconst Title = styled.div`\n    margin-top: 25px;\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst Link = styled.a`\n    margin-top: 50px;\n`;\n\ninterface Props {\n    supportUrl?: string;\n}\n\nconst PaymentProcessing = ({ supportUrl }: Props) => {\n    return (\n        <Wrapper>\n            <Loader />\n            <Title>\n                <Translation id=\"TR_BUY_DETAIL_PENDING_TITLE\" />\n            </Title>\n            {supportUrl && (\n                <Link href={supportUrl} target=\"_blank\">\n                    <Button variant=\"tertiary\">\n                        <Translation id=\"TR_BUY_DETAIL_PENDING_SUPPORT\" />\n                    </Button>\n                </Link>\n            )}\n        </Wrapper>\n    );\n};\n\nexport default PaymentProcessing;\n","import * as routerActions from '@suite-actions/routerActions';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { resolveStaticPath } from '@suite-utils/nextjs';\nimport { Button, variables } from '@trezor/components';\nimport { Translation } from '@suite-components';\nimport { useActions } from '@suite-hooks';\nimport { Account } from '@wallet-types';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 60px 20px 60px 20px;\n    flex-direction: column;\n`;\n\nconst Image = styled.img``;\n\nconst Title = styled.div`\n    margin-top: 25px;\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst Description = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    margin: 17px 0 30px 0;\n    max-width: 310px;\n    text-align: center;\n`;\n\ninterface Props {\n    account: Account;\n}\n\nconst PaymentSuccessful = ({ account }: Props) => {\n    const { goto } = useActions({\n        goto: routerActions.goto,\n    });\n    return (\n        <Wrapper>\n            <Image src={resolveStaticPath('/images/svg/coinmarket-success.svg')} />\n            <Title>\n                <Translation id=\"TR_BUY_DETAIL_SUCCESS_TITLE\" />\n            </Title>\n            <Description>\n                <Translation id=\"TR_BUY_DETAIL_SUCCESS_TEXT\" />\n            </Description>\n            <Button\n                onClick={() =>\n                    goto('wallet-coinmarket-buy', {\n                        symbol: account.symbol,\n                        accountIndex: account.index,\n                        accountType: account.accountType,\n                    })\n                }\n            >\n                <Translation id=\"TR_BUY_DETAIL_SUCCESS_BUTTON\" />\n            </Button>\n        </Wrapper>\n    );\n};\n\nexport default PaymentSuccessful;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { resolveStaticPath } from '@suite-utils/nextjs';\nimport { Button, variables } from '@trezor/components';\nimport { CoinmarketTransactionId } from '@wallet-components';\nimport { Translation } from '@suite-components/Translation';\nimport { BuyTrade } from 'invity-api';\nimport { Account } from '@wallet-types';\nimport invityAPI from '@suite-services/invityAPI';\nimport { createTxLink } from '@wallet-utils/coinmarket/buyUtils';\nimport * as coinmarketBuyActions from '@wallet-actions/coinmarketBuyActions';\nimport { useActions } from '@suite-hooks';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 60px 20px 60px 20px;\n    flex-direction: column;\n`;\n\nconst Image = styled.img``;\n\nconst Title = styled.div`\n    margin-top: 25px;\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst Description = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    margin: 17px 0 10px 0;\n    max-width: 200px;\n    text-align: center;\n`;\n\n// const CancelButton = styled(Button)`\n//     margin-top: 15px;\n// `;\n\nconst PaymentButton = styled(Button)`\n    margin-top: 30px;\n`;\n\ninterface Props {\n    transactionId?: string;\n    trade: BuyTrade;\n    account: Account;\n}\n\nconst WaitingForPayment = ({ transactionId, trade, account }: Props) => {\n    const [isWorking, setIsWorking] = useState(false);\n    const { submitRequestForm } = useActions({\n        submitRequestForm: coinmarketBuyActions.submitRequestForm,\n    });\n\n    const goToPayment = async () => {\n        setIsWorking(true);\n        const returnUrl = await createTxLink(trade, account);\n        invityAPI.getBuyTradeForm({ trade, returnUrl }).then(response => {\n            if (response) {\n                submitRequestForm(response);\n            }\n        });\n    };\n    // const cancelTrade = () => {};\n    return (\n        <Wrapper>\n            <Image src={resolveStaticPath('/images/svg/coinmarket-waiting.svg')} />\n            <Title>\n                <Translation id=\"TR_BUY_DETAIL_SUBMITTED_TITLE\" />\n            </Title>\n            <Description>\n                <Translation id=\"TR_BUY_DETAIL_SUBMITTED_TEXT\" />\n            </Description>\n            {transactionId && <CoinmarketTransactionId transactionId={transactionId} />}\n            <PaymentButton onClick={goToPayment} isLoading={isWorking} isDisabled={isWorking}>\n                <Translation id=\"TR_BUY_DETAIL_SUBMITTED_GATE\" />\n            </PaymentButton>\n            {/* TODO add a possibility in the future to cancel the transaction by the user                \n            <CancelButton isWhite variant=\"tertiary\" onClick={cancelTrade}>\n                <Translation id=\"TR_BUY_DETAIL_SUBMITTED_CANCEL\" />\n            </CancelButton> */}\n        </Wrapper>\n    );\n};\n\nexport default WaitingForPayment;\n","import React, { useEffect, useContext } from 'react';\nimport styled from 'styled-components';\nimport { LayoutContext } from '@suite-components';\nimport { Card, variables } from '@trezor/components';\nimport { CoinmarketBuyOfferInfo, CoinmarketBuyTopPanel } from '@wallet-components';\nimport { useCoinmarketBuyDetailContext } from '@wallet-hooks/useCoinmarketBuyDetail';\nimport * as routerActions from '@suite-actions/routerActions';\nimport { useActions } from '@suite-hooks';\n\nimport PaymentFailed from '../components/PaymentFailed';\nimport PaymentProcessing from '../components/PaymentProcessing';\nimport PaymentSuccessful from '../components/PaymentSuccessful';\nimport WaitingForPayment from '../components/WaitingForPayment';\n\nconst Wrapper = styled.div`\n    display: flex;\n    margin-top: 20px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        flex-direction: column;\n    }\n`;\n\nconst StyledCard = styled(Card)`\n    flex: 1;\n    padding: 0;\n`;\n\nconst CoinmarketDetail = () => {\n    const { setLayout } = useContext(LayoutContext);\n\n    useEffect(() => {\n        if (setLayout) setLayout('Trezor Suite | Trade', undefined, <CoinmarketBuyTopPanel />);\n    }, [setLayout]);\n\n    const { account, trade, buyInfo } = useCoinmarketBuyDetailContext();\n    const { goto } = useActions({ goto: routerActions.goto });\n\n    // if trade not found, it is because user refreshed the page and stored transactionId got removed\n    // go to the default coinmarket page, the trade is shown there in the previous trades\n    if (!trade) {\n        goto('wallet-coinmarket-buy', {\n            symbol: account.symbol,\n            accountIndex: account.index,\n            accountType: account.accountType,\n        });\n        return null;\n    }\n\n    const tradeStatus = trade?.data?.status;\n    const showError = tradeStatus === 'ERROR' || tradeStatus === 'BLOCKED';\n    const showProcessing = tradeStatus === 'APPROVAL_PENDING';\n    const showWaiting = tradeStatus === 'SUBMITTED';\n    const showSuccess = tradeStatus === 'SUCCESS';\n\n    const exchange = trade?.data?.exchange;\n    const provider =\n        buyInfo && buyInfo.providerInfos && exchange ? buyInfo.providerInfos[exchange] : undefined;\n    const supportUrlTemplate = provider?.statusUrl || provider?.supportUrl;\n    const supportUrl = supportUrlTemplate?.replace('{{paymentId}}', trade?.data?.paymentId || '');\n\n    return (\n        <Wrapper>\n            <StyledCard>\n                {showError && (\n                    <PaymentFailed\n                        account={account}\n                        transactionId={trade.key}\n                        supportUrl={supportUrl}\n                    />\n                )}\n                {showProcessing && <PaymentProcessing />}\n                {showWaiting && (\n                    <WaitingForPayment\n                        trade={trade.data}\n                        transactionId={trade.key}\n                        account={account}\n                    />\n                )}\n                {showSuccess && <PaymentSuccessful account={account} />}\n            </StyledCard>\n            <CoinmarketBuyOfferInfo\n                account={account}\n                selectedQuote={trade.data}\n                transactionId={trade.key}\n                providers={buyInfo?.providerInfos}\n            />\n        </Wrapper>\n    );\n};\n\nexport default CoinmarketDetail;\n","import React from 'react';\nimport { AppState } from '@suite-types';\nimport {\n    useCoinmarketBuyDetail,\n    CoinmarketBuyDetailContext,\n} from '@wallet-hooks/useCoinmarketBuyDetail';\nimport { WalletLayout } from '@wallet-components';\nimport styled from 'styled-components';\nimport { ComponentProps, Props } from '@wallet-types/coinmarketBuyDetail';\nimport { connect } from 'react-redux';\n\nimport Detail from './Detail';\n\nconst mapStateToProps = (state: AppState): ComponentProps => ({\n    selectedAccount: state.wallet.selectedAccount,\n    trades: state.wallet.coinmarket.trades,\n    transactionId: state.wallet.coinmarket.buy.transactionId,\n});\n\nconst Wrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n`;\n\nconst DetailIndexLoaded = (props: Props) => {\n    const { selectedAccount } = props;\n    const coinmarketBuyContextValues = useCoinmarketBuyDetail({ ...props, selectedAccount });\n\n    return (\n        <CoinmarketBuyDetailContext.Provider value={coinmarketBuyContextValues}>\n            <Wrapper>\n                <Detail />\n            </Wrapper>\n        </CoinmarketBuyDetailContext.Provider>\n    );\n};\n\nconst DetailIndex = (props: ComponentProps) => {\n    const { selectedAccount } = props;\n\n    if (selectedAccount.status !== 'loaded') {\n        return <WalletLayout title=\"TR_NAV_BUY\" account={selectedAccount} />;\n    }\n    return <DetailIndexLoaded {...props} selectedAccount={selectedAccount} />;\n};\n\nexport default connect(mapStateToProps)(DetailIndex);\n","import Detail from '@wallet-views/coinmarket/buy/detail';\n\nexport default Detail;\n","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/accounts/coinmarket/buy/detail\",\n        function () {\n          return require(\"private-next-pages/accounts/coinmarket/buy/detail/index.tsx\");\n        }\n      ]);\n    "],"sourceRoot":""}