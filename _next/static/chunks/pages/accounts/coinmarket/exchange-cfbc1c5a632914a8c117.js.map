{"version":3,"sources":["webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?bf2f","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/react-use/lib/useDebounce.js","webpack://_N_E/../suite/src/hooks/wallet/useCoinmarketExchangeForm.ts","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/components/ExchangeForm/Inputs/SendCryptoInput/SendCryptoSelect/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/components/ExchangeForm/Inputs/SendCryptoInput/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/components/ExchangeForm/Inputs/FiatInput/FiatSelect/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/components/ExchangeForm/Inputs/FiatInput/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/components/ExchangeForm/Inputs/ReceiveCryptoSelect/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/components/ExchangeForm/Inputs/Buttons/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/components/ExchangeForm/Inputs/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/components/ExchangeForm/Fees/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/components/ExchangeForm/Footer/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/components/ExchangeForm/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/index.tsx","webpack://_N_E/./pages/accounts/coinmarket/exchange/index.tsx"],"names":["window","__NEXT_P","push","Object","defineProperty","exports","value","tslib_1","react_1","useTimeoutFn_1","__importDefault","default","fn","ms","deps","_a","isReady","cancel","reset","useEffect","ExchangeFormContext","createContext","displayName","useCoinmarketExchangeForm","props","exchangeInfo","useInvityAPI","selectedAccount","quotesRequest","fees","fiat","localCurrency","exchangeCoinInfo","device","account","network","symbol","networkType","coinFees","levels","getFeeLevels","feeInfo","fiatRates","coins","find","item","localCurrencyOption","label","toUpperCase","methods","useForm","mode","shouldUnregister","defaultValues","selectedFee","feePerUnit","feeLimit","register","setValue","getValues","setError","clearErrors","token","setToken","useState","amountLimits","setAmountLimits","undefined","isMax","setIsMax","isComposing","setIsComposing","transactionInfo","setTransactionInfo","storedPlaceholderAddress","setStoredPlaceholderAddress","saveQuoteRequest","saveQuotes","saveTrade","composeTransaction","saveComposedTransaction","goto","useActions","coinmarketExchangeActions","coinmarketCommonActions","routerActions","updateFiatValue","amount","currency","current","fiatValue","toFiatCurrency","rates","shouldValidate","compose","async","ok","formValues","data","sendCryptoSelect","selectedFeeLevel","level","feeLevelLabel","placeholderAddress","legacy","NETWORKS","accountType","result","TrezorConnect","getAddress","coin","path","bip44","replace","useEmptyPassphrase","showOnTrezor","success","payload","address","addresses","change","descriptor","getComposeAddressPlaceholder","sendCryptoInput","isMaxActive","setMax","toLowerCase","isInvity","formattedToken","invityApiSymbolToSymbol","tokenInfo","tokens","t","decimals","type","fillValue","amountToFill","BigNumber","max","decimalPlaces","toFixed","estimatedFeeLimit","errorMessage","message","typedRegister","useCallback","rules","isLoading","exchangeList","length","noProviders","sellSymbols","has","changeFeeLevel","useFees","defaultValue","onChange","_","composeRequest","field","onSubmit","sendStringAmount","send","request","receive","receiveCryptoSelect","allQuotes","invityAPI","getExchangeQuotes","limits","getAmountLimits","fixedQuotes","floatQuotes","splitToFixedFloatQuotes","accountIndex","index","updateFiatCurrency","updateSendCryptoValue","cryptoValue","fromFiatCurrency","useCoinmarketExchangeFormContext","context","useContext","Error","Option","styled","div","Label","SendCryptoSelect","control","uppercaseSymbol","name","formatLabel","render","selected","lowerCaseToken","formatOptionLabel","option","size","isClearable","options","getSendCryptoOptions","isDropdownVisible","isDisabled","minWidth","isClean","hideTextCursor","StyledInput","Input","SendCryptoInput","errors","tokenData","formattedAvailableBalance","balance","formatNetworkAmount","availableBalance","reserve","misc","useDebounce","currentAmount","Bignumber","gte","event","target","state","noTopLabel","maxLength","MAX_LENGTH","AMOUNT","innerRef","validate","amountBig","isNaN","lte","Number","min","id","values","minimum","formatCryptoAmount","maximum","gt","lt","key","isInteger","isDecimalsValid","bottomText","error","innerAddon","FiatSelect","currencyOptions","FIAT","currencies","forEach","buildCurrencyOptions","FiatInput","trigger","fiatInput","onFocus","Wrapper","variables","SCREEN_SIZE","LG","CoinLogo","img","OptionName","theme","TYPE_LIGHT_GREY","OptionLabel","buildOptions","popular","stable","all","symbolToFilter","filter","ticker","info","buySymbols","category","ReceiveCryptoSelect","customSearch","searchText","includes","filterOption","src","server","placeholder","isSearchable","XL","TokenBalance","NEUE_FONT_SIZE","TINY","TokenBalanceValue","span","FONT_WEIGHT","DEMI_BOLD","Left","Button","BG_GREY","TYPE_DARK_GREY","FONT_SIZE","MEDIUM","Bottom","setRatioAmount","divisor","dividedBy","toString","formattedBalance","onClick","Top","LeftWrapper","RightWrapper","MiddleWrapper","StyledIcon","Icon","Line","color","Inputs","useTheme","TYPE_RED","STROKE_GREY","icon","Buttons","StyledCard","ExchangeFees","composedLevels","Fees","showLabel","Center","StyledButton","Footer","formState","watch","hasValues","formIsValid","keys","isSubmitting","Form","form","FeesWrapper","Loading","BIG","NoProviders","CoinmarketExchangeForm","handleSubmit","CoinmarketExchangeLoaded","coinmarketExchangeContextValues","Provider","ExchangeForm","CoinmarketExchange","useSelector","wallet","coinmarket","exchange","suite","settings","status","title","CoinMarketExchange"],"mappings":"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","file":"static/chunks/pages/accounts/coinmarket/exchange-cfbc1c5a632914a8c117.js","sourcesContent":["\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/accounts/coinmarket/exchange\",\n        function () {\n          return require(\"private-next-pages/accounts/coinmarket/exchange/index.tsx\");\n        }\n      ]);\n    ","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar react_1 = require(\"react\");\nvar useTimeoutFn_1 = tslib_1.__importDefault(require(\"./useTimeoutFn\"));\nfunction useDebounce(fn, ms, deps) {\n    if (ms === void 0) { ms = 0; }\n    if (deps === void 0) { deps = []; }\n    var _a = useTimeoutFn_1.default(fn, ms), isReady = _a[0], cancel = _a[1], reset = _a[2];\n    react_1.useEffect(reset, deps);\n    return [isReady, cancel];\n}\nexports.default = useDebounce;\n","import { createContext, useContext, useCallback, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport TrezorConnect from '@onekeyhq/connect';\nimport { ExchangeTradeQuoteRequest } from 'invity-api';\nimport BigNumber from 'bignumber.js';\nimport { NETWORKS } from '@wallet-config';\nimport { useActions } from '@suite-hooks';\nimport invityAPI from '@suite-services/invityAPI';\nimport { invityApiSymbolToSymbol } from '@wallet-utils/coinmarket/coinmarketUtils';\nimport { toFiatCurrency, fromFiatCurrency } from '@wallet-utils/fiatConverterUtils';\nimport { getFeeLevels } from '@wallet-utils/sendFormUtils';\nimport { PrecomposedTransactionFinal } from '@wallet-types/sendForm';\nimport { useInvityAPI } from '@wallet-hooks/useCoinmarket';\nimport * as coinmarketExchangeActions from '@wallet-actions/coinmarketExchangeActions';\nimport * as coinmarketCommonActions from '@wallet-actions/coinmarket/coinmarketCommonActions';\nimport * as routerActions from '@suite-actions/routerActions';\nimport {\n    FormState,\n    Props,\n    ComposeData,\n    AmountLimits,\n    ExchangeFormContextValues,\n} from '@wallet-types/coinmarketExchangeForm';\nimport { getAmountLimits, splitToFixedFloatQuotes } from '@wallet-utils/coinmarket/exchangeUtils';\nimport { useFees } from './form/useFees';\n\nexport const ExchangeFormContext = createContext<ExchangeFormContextValues | null>(null);\nExchangeFormContext.displayName = 'CoinmarketExchangeContext';\n\nexport const useCoinmarketExchangeForm = (props: Props): ExchangeFormContextValues => {\n    const { exchangeInfo } = useInvityAPI();\n    const {\n        selectedAccount,\n        quotesRequest,\n        fees,\n        fiat,\n        localCurrency,\n        exchangeCoinInfo,\n        device,\n    } = props;\n    const { account, network } = selectedAccount;\n    const { symbol, networkType } = account;\n    const coinFees = fees[symbol];\n    const levels = getFeeLevels(networkType, coinFees);\n    const feeInfo = { ...coinFees, levels };\n    const fiatRates = fiat.coins.find(item => item.symbol === symbol);\n    const localCurrencyOption = { value: localCurrency, label: localCurrency.toUpperCase() };\n    const methods = useForm<FormState>({\n        mode: 'onChange',\n        shouldUnregister: false, // NOTE: tracking custom fee inputs\n        defaultValues: { selectedFee: 'normal', feePerUnit: '', feeLimit: '' },\n    });\n    const { register, setValue, getValues, setError, clearErrors } = methods;\n    const [token, setToken] = useState<string | undefined>(getValues('sendCryptoSelect')?.value);\n    const [amountLimits, setAmountLimits] = useState<AmountLimits | undefined>(undefined);\n    const [isMax, setIsMax] = useState<boolean | undefined>(undefined);\n    const [isComposing, setIsComposing] = useState<boolean>(false);\n    const [transactionInfo, setTransactionInfo] = useState<null | PrecomposedTransactionFinal>(\n        null,\n    );\n    const [storedPlaceholderAddress, setStoredPlaceholderAddress] = useState<string | undefined>();\n    const {\n        saveQuoteRequest,\n        saveQuotes,\n        saveTrade,\n        composeTransaction,\n        saveComposedTransaction,\n        goto,\n    } = useActions({\n        saveQuoteRequest: coinmarketExchangeActions.saveQuoteRequest,\n        saveQuotes: coinmarketExchangeActions.saveQuotes,\n        saveTrade: coinmarketExchangeActions.saveTrade,\n        composeTransaction: coinmarketCommonActions.composeTransaction,\n        saveComposedTransaction: coinmarketCommonActions.saveComposedTransaction,\n        goto: routerActions.goto,\n    });\n\n    const updateFiatValue = (amount: string) => {\n        const currency: { value: string; label: string } | undefined = getValues('fiatSelect');\n        if (!fiatRates || !fiatRates.current || !currency) return;\n        const fiatValue = toFiatCurrency(amount, currency.value, fiatRates.current.rates);\n        setValue('fiatInput', fiatValue || '', { shouldValidate: true });\n    };\n\n    const getComposeAddressPlaceholder = async () => {\n        // the address is later replaced by the address of the exchange\n        // as a precaution, use user's own address as a placeholder\n        const { networkType } = account;\n        switch (networkType) {\n            case 'bitcoin': {\n                // use legacy (the most expensive) address for fee calculation\n                // as we do not know what address type the exchange will use\n                const legacy =\n                    NETWORKS.find(\n                        network =>\n                            network.symbol === account.symbol && network.accountType === 'legacy',\n                    ) ||\n                    NETWORKS.find(\n                        network =>\n                            network.symbol === account.symbol && network.accountType === 'segwit',\n                    ) ||\n                    network;\n                if (legacy && device) {\n                    const result = await TrezorConnect.getAddress({\n                        device,\n                        coin: legacy.symbol,\n                        path: `${legacy.bip44.replace('i', '0')}/0/0`,\n                        useEmptyPassphrase: device.useEmptyPassphrase,\n                        showOnTrezor: false,\n                    });\n                    if (result.success) {\n                        return result.payload.address;\n                    }\n                }\n                // as a fallback, use the change address of current account\n                return account.addresses?.change[0].address;\n            }\n            case 'ethereum':\n            case 'ripple':\n                return account.descriptor;\n            // no default\n        }\n    };\n\n    const compose = async (data: ComposeData) => {\n        let ok = false;\n        setIsComposing(true);\n        const formValues = getValues();\n        const token =\n            data && data.token ? data.token : formValues.sendCryptoSelect.value || undefined;\n        const feeLevel = feeInfo.levels.find(level => level.label === data.feeLevelLabel);\n        const selectedFeeLevel =\n            feeLevel || feeInfo.levels.find(level => level.label === formValues.selectedFee);\n        if (!selectedFeeLevel) return false;\n\n        let placeholderAddress = storedPlaceholderAddress;\n        if (!placeholderAddress) {\n            placeholderAddress = await getComposeAddressPlaceholder();\n            setStoredPlaceholderAddress(placeholderAddress);\n        }\n\n        let { feePerUnit } = selectedFeeLevel;\n        if (selectedFeeLevel.label === 'custom') {\n            feePerUnit = data?.feePerUnit ? data.feePerUnit : formValues.feePerUnit || '0';\n        }\n\n        const result = await composeTransaction({\n            account,\n            amount: data && data.amount ? data.amount : formValues.sendCryptoInput || '0',\n            feeInfo,\n            feePerUnit,\n            feeLimit: data && data.feeLimit ? data.feeLimit : formValues.feeLimit || '0',\n            network,\n            selectedFee: formValues.selectedFee,\n            isMaxActive: data && data.setMax ? data.setMax || false : false,\n            address: placeholderAddress,\n            token: token ? token.toLowerCase() : undefined,\n            isInvity: true,\n        });\n\n        const formattedToken = invityApiSymbolToSymbol(token);\n        const tokenInfo = account.tokens?.find(t => t.symbol === formattedToken);\n        const decimals = tokenInfo ? tokenInfo.decimals : network.decimals;\n\n        const transactionInfo = result ? result[selectedFeeLevel.label] : null;\n        if (transactionInfo?.type === 'final') {\n            setTransactionInfo(transactionInfo);\n            if (data.fillValue) {\n                let amountToFill = data.amount || '0';\n                if (data.setMax) {\n                    amountToFill = new BigNumber(transactionInfo.max || '0')\n                        .decimalPlaces(decimals)\n                        .toFixed();\n                }\n                setValue('sendCryptoInput', amountToFill, { shouldValidate: true });\n                updateFiatValue(amountToFill);\n            }\n            saveComposedTransaction(transactionInfo);\n            clearErrors('sendCryptoInput');\n            setValue('estimatedFeeLimit', transactionInfo.estimatedFeeLimit);\n            ok = true;\n        }\n\n        if (transactionInfo?.type === 'error' && transactionInfo.errorMessage) {\n            setError('sendCryptoInput', {\n                type: 'compose',\n                message: transactionInfo.errorMessage as any,\n            });\n        }\n\n        setIsComposing(false);\n        return ok;\n    };\n\n    const updateFiatCurrency = (currency: { label: string; value: string }) => {\n        const amount = getValues('sendCryptoInput') || '0';\n        if (!fiatRates || !fiatRates.current || !currency) return;\n        const fiatValue = toFiatCurrency(amount, currency.value, fiatRates.current.rates);\n        if (fiatValue) {\n            setValue('fiatInput', fiatValue, { shouldValidate: true });\n        }\n    };\n\n    const updateSendCryptoValue = (amount: string, decimals: number) => {\n        const currency: { value: string; label: string } | undefined = getValues('fiatSelect');\n        if (!fiatRates || !fiatRates.current || !currency) return;\n        const cryptoValue = fromFiatCurrency(\n            amount,\n            currency.value,\n            fiatRates.current.rates,\n            decimals,\n        );\n\n        setValue('sendCryptoInput', cryptoValue || '', { shouldValidate: true });\n    };\n\n    const typedRegister = useCallback(<T>(rules?: T) => register(rules), [register]);\n    const isLoading = !exchangeInfo?.exchangeList || exchangeInfo?.exchangeList.length === 0;\n    const noProviders =\n        exchangeInfo?.exchangeList?.length === 0 || !exchangeInfo?.sellSymbols.has(account.symbol);\n\n    const onSubmit = async () => {\n        const formValues = getValues();\n        const sendStringAmount = formValues.sendCryptoInput || '';\n        const send = formValues.sendCryptoSelect.value;\n        const receive = formValues.receiveCryptoSelect.value;\n        const request: ExchangeTradeQuoteRequest = {\n            receive,\n            send,\n            sendStringAmount,\n        };\n\n        const ok = await compose({ setMax: isMax });\n        if (ok) {\n            saveQuoteRequest(request);\n            const allQuotes = await invityAPI.getExchangeQuotes(request);\n            const limits = getAmountLimits(allQuotes);\n\n            if (limits) {\n                setAmountLimits(limits);\n            } else {\n                const [fixedQuotes, floatQuotes] = splitToFixedFloatQuotes(allQuotes, exchangeInfo);\n                saveQuotes(fixedQuotes, floatQuotes);\n                goto('wallet-coinmarket-exchange-offers', {\n                    symbol: account.symbol,\n                    accountIndex: account.index,\n                    accountType: account.accountType,\n                });\n            }\n        }\n    };\n\n    // compose is not a callback. i don't want to rewrite the whole hook because of this\n    // there is a lot to improve with compose method, like debounce or work with all precomposed levels instead of one\n    // automatic switch to first possible FeeLevel (like send form)\n    const onFeeLevelChange = (_: any, current?: FormState['selectedFee']) => {\n        compose({\n            fillValue: isMax,\n            setMax: isMax,\n            feeLevelLabel: current,\n        });\n    };\n\n    const composeRequest = (field?: string) => {\n        const formValues = getValues();\n        if (field === 'feePerUnit') {\n            compose({\n                fillValue: isMax,\n                setMax: isMax,\n                feePerUnit: formValues.feePerUnit,\n            });\n        }\n        if (field === 'feeLimit') {\n            compose({\n                fillValue: isMax,\n                setMax: isMax,\n                feeLimit: formValues.feeLimit,\n            });\n        }\n    };\n\n    // sub-hook, FeeLevels handler\n    const { changeFeeLevel } = useFees({\n        defaultValue: 'normal',\n        feeInfo,\n        onChange: onFeeLevelChange,\n        composeRequest,\n        ...methods,\n    });\n\n    return {\n        ...methods,\n        account,\n        onSubmit,\n        updateFiatValue,\n        register: typedRegister,\n        exchangeInfo,\n        isMax: isMax || false,\n        changeFeeLevel,\n        setToken,\n        saveQuoteRequest,\n        setMax: setIsMax,\n        saveQuotes,\n        quotesRequest,\n        transactionInfo,\n        localCurrencyOption,\n        exchangeCoinInfo,\n        updateFiatCurrency,\n        token,\n        updateSendCryptoValue,\n        saveTrade,\n        feeInfo,\n        compose,\n        fiatRates,\n        isComposing,\n        amountLimits,\n        setAmountLimits,\n        isLoading,\n        noProviders,\n        network,\n        setIsComposing,\n    };\n};\n\nexport const useCoinmarketExchangeFormContext = () => {\n    const context = useContext(ExchangeFormContext);\n    if (context === null) throw Error('ExchangeFormContext used without Context');\n    return context;\n};\n","import { Select, CoinLogo } from '@trezor/components';\nimport React from 'react';\nimport { Controller } from 'react-hook-form';\nimport styled from 'styled-components';\nimport { useCoinmarketExchangeFormContext } from '@wallet-hooks/useCoinmarketExchangeForm';\nimport { getSendCryptoOptions, formatLabel } from '@wallet-utils/coinmarket/exchangeUtils';\n\nconst Option = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Label = styled.div`\n    padding-left: 10px;\n`;\n\nconst SendCryptoSelect = () => {\n    const {\n        control,\n        setAmountLimits,\n        account,\n        setMax,\n        setValue,\n        exchangeInfo,\n        setToken,\n        compose,\n    } = useCoinmarketExchangeFormContext();\n    const sendCryptoSelect = 'sendCryptoSelect';\n    const uppercaseSymbol = account.symbol.toUpperCase();\n\n    return (\n        <Controller\n            control={control}\n            name={sendCryptoSelect}\n            defaultValue={{\n                value: uppercaseSymbol,\n                label: formatLabel(uppercaseSymbol),\n            }}\n            render={({ onChange, value }) => {\n                return (\n                    <Select\n                        onChange={async (selected: any) => {\n                            setMax(false);\n                            onChange(selected);\n                            setAmountLimits(undefined);\n                            setValue('sendCryptoInput', '');\n                            setValue('fiatInput', '');\n                            const lowerCaseToken = selected.value.toLowerCase();\n                            if (\n                                lowerCaseToken === 'eth' ||\n                                lowerCaseToken === 'trop' ||\n                                lowerCaseToken === 'etc'\n                            ) {\n                                setToken(undefined);\n                                await compose({ token: undefined });\n                            } else {\n                                setToken(lowerCaseToken);\n                                await compose({ token: lowerCaseToken });\n                            }\n                        }}\n                        formatOptionLabel={(option: any) => {\n                            return (\n                                <Option>\n                                    <CoinLogo size={18} symbol={account.symbol} />\n                                    <Label>{formatLabel(option.label)}</Label>\n                                </Option>\n                            );\n                        }}\n                        value={value}\n                        isClearable={false}\n                        options={getSendCryptoOptions(account, exchangeInfo)}\n                        isDropdownVisible={account.networkType === 'ethereum'}\n                        isDisabled={account.networkType !== 'ethereum'}\n                        minWidth=\"100px\"\n                        isClean\n                        hideTextCursor\n                    />\n                );\n            }}\n        />\n    );\n};\n\nexport default SendCryptoSelect;\n","import { Input } from '@trezor/components';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { formatNetworkAmount } from '@wallet-utils/accountUtils';\nimport { FIAT } from '@suite-config';\nimport useDebounce from 'react-use/lib/useDebounce';\nimport { isDecimalsValid, isInteger } from '@wallet-utils/validation';\nimport { useCoinmarketExchangeFormContext } from '@wallet-hooks/useCoinmarketExchangeForm';\nimport { Translation } from '@suite-components';\nimport SendCryptoSelect from './SendCryptoSelect';\nimport { InputError } from '@wallet-components';\nimport Bignumber from 'bignumber.js';\nimport { MAX_LENGTH } from '@suite-constants/inputs';\nimport {\n    formatCryptoAmount,\n    invityApiSymbolToSymbol,\n} from '@wallet-utils/coinmarket/coinmarketUtils';\n\nexport const buildCurrencyOptions = () => {\n    const result: { value: string; label: string }[] = [];\n    FIAT.currencies.forEach(currency =>\n        result.push({ value: currency, label: currency.toUpperCase() }),\n    );\n    return result;\n};\n\nconst StyledInput = styled(Input)`\n    border-right: 0;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n`;\n\nconst SendCryptoInput = () => {\n    const {\n        register,\n        errors,\n        clearErrors,\n        network,\n        account,\n        amountLimits,\n        compose,\n        token,\n        isMax,\n        setMax,\n        updateFiatValue,\n        getValues,\n    } = useCoinmarketExchangeFormContext();\n    const sendCryptoInput = 'sendCryptoInput';\n    const fiatInput = 'fiatInput';\n    const { symbol, tokens } = account;\n    const tokenData = tokens?.find(t => t.symbol === invityApiSymbolToSymbol(token));\n    const formattedAvailableBalance = tokenData\n        ? tokenData.balance || '0'\n        : formatNetworkAmount(account.availableBalance, account.symbol);\n    const reserve =\n        account.networkType === 'ripple'\n            ? formatNetworkAmount(account.misc.reserve, account.symbol)\n            : undefined;\n    const decimals = tokenData ? tokenData.decimals : network.decimals;\n    const amount = getValues(sendCryptoInput);\n    useDebounce(\n        () => {\n            // take value at debounce time, the user may type fast\n            const currentAmount = getValues(sendCryptoInput);\n            if (currentAmount && !isMax) {\n                const amountBig = new Bignumber(currentAmount);\n                if (amountBig.gte(0)) {\n                    compose({\n                        setMax: false,\n                        amount: currentAmount,\n                    });\n                }\n            }\n        },\n        333,\n        [amount],\n    );\n\n    return (\n        <StyledInput\n            onChange={event => {\n                updateFiatValue(event.target.value);\n                clearErrors(fiatInput);\n                setMax(false);\n            }}\n            state={errors[sendCryptoInput] ? 'error' : undefined}\n            name={sendCryptoInput}\n            noTopLabel\n            maxLength={MAX_LENGTH.AMOUNT}\n            innerRef={register({\n                validate: (value: string) => {\n                    const amountBig = new Bignumber(value);\n                    if (value) {\n                        if (amountBig.isNaN()) {\n                            return 'AMOUNT_IS_NOT_NUMBER';\n                        }\n\n                        if (amountBig.lte(0)) {\n                            return 'AMOUNT_IS_TOO_LOW';\n                        }\n\n                        if (amountLimits) {\n                            const amount = Number(value);\n                            if (amountLimits.min && amount < amountLimits.min) {\n                                return (\n                                    <Translation\n                                        id=\"TR_EXCHANGE_VALIDATION_ERROR_MINIMUM_CRYPTO\"\n                                        values={{\n                                            minimum: formatCryptoAmount(amountLimits.min),\n                                            currency: amountLimits.currency,\n                                        }}\n                                    />\n                                );\n                            }\n\n                            if (amountLimits.max && amount > amountLimits.max) {\n                                return (\n                                    <Translation\n                                        id=\"TR_EXCHANGE_VALIDATION_ERROR_MAXIMUM_CRYPTO\"\n                                        values={{\n                                            maximum: formatCryptoAmount(amountLimits.max),\n                                            currency: amountLimits.currency,\n                                        }}\n                                    />\n                                );\n                            }\n                        }\n\n                        if (amountBig.gt(formattedAvailableBalance)) {\n                            if (\n                                reserve &&\n                                amountBig.lt(formatNetworkAmount(account.balance, symbol))\n                            ) {\n                                return (\n                                    <Translation\n                                        key=\"AMOUNT_IS_MORE_THAN_RESERVE\"\n                                        id=\"AMOUNT_IS_MORE_THAN_RESERVE\"\n                                        values={{ reserve }}\n                                    />\n                                );\n                            }\n                            return 'AMOUNT_IS_NOT_ENOUGH';\n                        }\n\n                        // ERC20 without decimal places\n                        if (!decimals && !isInteger(value)) {\n                            return 'AMOUNT_IS_NOT_INTEGER';\n                        }\n\n                        if (!isDecimalsValid(value, decimals)) {\n                            return (\n                                <Translation\n                                    key=\"AMOUNT_IS_NOT_IN_RANGE_DECIMALS\"\n                                    id=\"AMOUNT_IS_NOT_IN_RANGE_DECIMALS\"\n                                    values={{ decimals }}\n                                />\n                            );\n                        }\n                    }\n                },\n            })}\n            bottomText={<InputError error={errors[sendCryptoInput]} />}\n            innerAddon={<SendCryptoSelect />}\n        />\n    );\n};\n\nexport default SendCryptoInput;\n","import { Select } from '@trezor/components';\nimport React from 'react';\nimport { Controller } from 'react-hook-form';\nimport { FIAT } from '@suite-config';\nimport { useCoinmarketExchangeFormContext } from '@wallet-hooks/useCoinmarketExchangeForm';\n\nexport const buildCurrencyOptions = () => {\n    const result: { value: string; label: string }[] = [];\n    FIAT.currencies.forEach(currency =>\n        result.push({ value: currency, label: currency.toUpperCase() }),\n    );\n\n    return result;\n};\n\nconst FiatSelect = () => {\n    const {\n        control,\n        setAmountLimits,\n        account,\n        updateFiatCurrency,\n        localCurrencyOption,\n    } = useCoinmarketExchangeFormContext();\n    const fiatSelect = 'fiatSelect';\n    const currencyOptions = buildCurrencyOptions();\n\n    return (\n        <Controller\n            control={control}\n            name={fiatSelect}\n            defaultValue={localCurrencyOption}\n            render={({ onChange, value }) => {\n                return (\n                    <Select\n                        onChange={(selected: any) => {\n                            onChange(selected);\n                            updateFiatCurrency(selected);\n                            setAmountLimits(undefined);\n                        }}\n                        value={value}\n                        isClearable={false}\n                        options={currencyOptions}\n                        isDropdownVisible={account.networkType === 'ethereum'}\n                        minWidth=\"70px\"\n                        isClean\n                        hideTextCursor\n                    />\n                );\n            }}\n        />\n    );\n};\n\nexport default FiatSelect;\n","import { Input } from '@trezor/components';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { InputError } from '@wallet-components';\nimport { isDecimalsValid } from '@wallet-utils/validation';\nimport { useCoinmarketExchangeFormContext } from '@wallet-hooks/useCoinmarketExchangeForm';\nimport { Translation } from '@suite-components';\nimport FiatSelect from './FiatSelect';\nimport BigNumber from 'bignumber.js';\nimport { MAX_LENGTH } from '@suite-constants/inputs';\n\nconst StyledInput = styled(Input)`\n    border-left: 0;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n`;\n\nconst FiatInput = () => {\n    const {\n        register,\n        network,\n        clearErrors,\n        errors,\n        trigger,\n        updateSendCryptoValue,\n        setMax,\n        setValue,\n    } = useCoinmarketExchangeFormContext();\n    const fiatInput = 'fiatInput';\n\n    return (\n        <StyledInput\n            onFocus={() => {\n                trigger([fiatInput]);\n            }}\n            onChange={event => {\n                setMax(false);\n                if (errors[fiatInput]) {\n                    setValue('sendCryptoInput', '');\n                } else {\n                    updateSendCryptoValue(event.target.value, network.decimals);\n                    clearErrors(fiatInput);\n                }\n            }}\n            state={errors[fiatInput] ? 'error' : undefined}\n            name={fiatInput}\n            noTopLabel\n            maxLength={MAX_LENGTH.AMOUNT}\n            innerRef={register({\n                validate: (value: any) => {\n                    if (value) {\n                        const amountBig = new BigNumber(value);\n                        if (amountBig.isNaN()) {\n                            return 'AMOUNT_IS_NOT_NUMBER';\n                        }\n\n                        if (!isDecimalsValid(value, 2)) {\n                            return (\n                                <Translation\n                                    id=\"AMOUNT_IS_NOT_IN_RANGE_DECIMALS\"\n                                    values={{ decimals: 2 }}\n                                />\n                            );\n                        }\n\n                        if (amountBig.lte(0)) {\n                            return 'AMOUNT_IS_TOO_LOW';\n                        }\n                    }\n                },\n            })}\n            bottomText={<InputError error={errors[fiatInput]} />}\n            innerAddon={<FiatSelect />}\n        />\n    );\n};\n\nexport default FiatInput;\n","import { variables, Select } from '@trezor/components';\nimport { ExchangeInfo } from '@wallet-actions/coinmarketExchangeActions';\nimport React from 'react';\nimport { Controller } from 'react-hook-form';\nimport styled from 'styled-components';\nimport { ExchangeCoinInfo } from 'invity-api';\nimport { useCoinmarketExchangeFormContext } from '@wallet-hooks/useCoinmarketExchangeForm';\nimport { Translation } from '@suite-components';\nimport { Account } from '@wallet-types';\nimport invityAPI from '@suite-services/invityAPI';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n    min-width: 230px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        flex-direction: column;\n    }\n`;\n\nconst CoinLogo = styled.img`\n    display: flex;\n    align-items: center;\n    padding-right: 6px;\n    height: 16px;\n`;\n\nconst Option = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst OptionName = styled.div`\n    display: flex;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nconst OptionLabel = styled.div`\n    min-width: 70px;\n`;\n\nconst buildOptions = (\n    account: Account,\n    exchangeCoinInfo?: ExchangeCoinInfo[],\n    exchangeInfo?: ExchangeInfo,\n    token?: string,\n) => {\n    if (!exchangeInfo || !exchangeCoinInfo) return null;\n\n    interface Options {\n        label: React.ReactElement;\n        options: { label: string; value: string; name: string }[];\n    }\n\n    const popular: Options = {\n        label: <Translation id=\"TR_EXCHANGE_POPULAR_COINS\" />,\n        options: [],\n    };\n\n    const stable: Options = {\n        label: <Translation id=\"TR_EXCHANGE_STABLE_COINS\" />,\n        options: [],\n    };\n\n    const all: Options = {\n        label: <Translation id=\"TR_EXCHANGE_OTHER_COINS\" />,\n        options: [],\n    };\n\n    const symbolToFilter = token || account.symbol;\n\n    const filteredExchangeCoins = exchangeCoinInfo.filter(\n        coin => coin.ticker.toLowerCase() !== symbolToFilter,\n    );\n\n    filteredExchangeCoins.forEach(info => {\n        if (!exchangeInfo.buySymbols.has(info.ticker.toLowerCase())) return false;\n\n        if (info.category === 'Popular currencies') {\n            popular.options.push({\n                label: info.ticker.toUpperCase(),\n                value: info.ticker.toUpperCase(),\n                name: info.name,\n            });\n        }\n\n        if (info.category === 'Stablecoins') {\n            stable.options.push({\n                label: `${info.ticker.toUpperCase()}`,\n                value: info.ticker.toUpperCase(),\n                name: info.name,\n            });\n        }\n\n        if (info.category === 'All currencies') {\n            all.options.push({\n                label: `${info.ticker.toUpperCase()}`,\n                value: info.ticker.toUpperCase(),\n                name: info.name,\n            });\n        }\n    });\n\n    return [popular, stable, all];\n};\n\nconst ReceiveCryptoSelect = () => {\n    const {\n        control,\n        setAmountLimits,\n        exchangeInfo,\n        exchangeCoinInfo,\n        account,\n        token,\n    } = useCoinmarketExchangeFormContext();\n\n    const customSearch = (\n        option: { data: { label: string; value: string; name: string } },\n        searchText: string,\n    ) => {\n        if (\n            option.data.label.toLowerCase().includes(searchText.toLowerCase()) ||\n            option.data.name.toLowerCase().includes(searchText.toLowerCase())\n        ) {\n            return true;\n        }\n        return false;\n    };\n\n    return (\n        <Wrapper>\n            <Controller\n                control={control}\n                defaultValue={false}\n                name=\"receiveCryptoSelect\"\n                render={({ onChange, value }) => {\n                    return (\n                        <Select\n                            onChange={(selected: any) => {\n                                onChange(selected);\n                                setAmountLimits(undefined);\n                            }}\n                            value={value}\n                            isClearable={false}\n                            filterOption={customSearch}\n                            options={buildOptions(account, exchangeCoinInfo, exchangeInfo, token)}\n                            minWidth=\"70px\"\n                            noTopLabel\n                            formatOptionLabel={(option: any) => {\n                                return (\n                                    <Option>\n                                        <CoinLogo\n                                            src={`${\n                                                invityAPI.server\n                                            }/images/coins/suite/${option.value.toUpperCase()}.svg`}\n                                        />\n                                        <OptionLabel>{option.label}</OptionLabel>\n                                        <OptionName>{option.name}</OptionName>\n                                    </Option>\n                                );\n                            }}\n                            placeholder={<Translation id=\"TR_TRADE_SELECT_COIN\" />}\n                            isSearchable\n                        />\n                    );\n                }}\n            />\n        </Wrapper>\n    );\n};\n\nexport default ReceiveCryptoSelect;\n","import { variables } from '@trezor/components';\nimport React from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Translation } from '@suite-components';\nimport styled from 'styled-components';\nimport { invityApiSymbolToSymbol } from '@wallet-utils/coinmarket/coinmarketUtils';\nimport { useCoinmarketExchangeFormContext } from '@wallet-hooks/useCoinmarketExchangeForm';\nimport { formatLabel } from '@wallet-utils/coinmarket/exchangeUtils';\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.XL}) {\n        margin-top: 27px;\n    }\n`;\n\nconst TokenBalance = styled.div`\n    padding: 0px 6px;\n    font-size: ${variables.NEUE_FONT_SIZE.TINY};\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nconst TokenBalanceValue = styled.span`\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst Left = styled.div`\n    display: flex;\n`;\n\nconst Button = styled.div`\n    padding: 4px 6px;\n    margin-right: 10px;\n    cursor: pointer;\n    border-radius: 4px;\n    background-color: ${props => props.theme.BG_GREY};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    font-size: ${variables.FONT_SIZE.TINY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst Bottom = () => {\n    const {\n        compose,\n        token,\n        account,\n        setMax,\n        network,\n        setValue,\n        updateFiatValue,\n    } = useCoinmarketExchangeFormContext();\n    const formattedToken = invityApiSymbolToSymbol(token);\n    const tokenData = account.tokens?.find(t => t.symbol === formattedToken);\n\n    const setRatioAmount = (divisor: number) => {\n        setMax(false);\n        const amount = tokenData\n            ? new BigNumber(tokenData.balance || '0')\n                  .dividedBy(divisor)\n                  .decimalPlaces(tokenData.decimals)\n                  .toString()\n            : new BigNumber(account.formattedBalance)\n                  .dividedBy(divisor)\n                  .decimalPlaces(network.decimals)\n                  .toString();\n        setValue('sendCryptoInput', amount);\n        updateFiatValue(amount);\n    };\n\n    return (\n        <Wrapper>\n            <Left>\n                <Button onClick={() => setRatioAmount(2)}>1/2</Button>\n                <Button onClick={() => setRatioAmount(3)}>1/3</Button>\n                <Button onClick={() => setRatioAmount(4)}>1/4</Button>\n                <Button\n                    onClick={async () => {\n                        setMax(true);\n                        await compose({\n                            setMax: true,\n                            fillValue: true,\n                        });\n                    }}\n                >\n                    <Translation id=\"TR_EXCHANGE_ALL\" />\n                </Button>\n            </Left>\n            <TokenBalance>\n                {tokenData && (\n                    <TokenBalanceValue>\n                        <Translation id=\"TOKEN_BALANCE\" values={{ balance: tokenData.balance }} />\n                        {tokenData.symbol ? ` ${formatLabel(tokenData.symbol)}` : ''}\n                    </TokenBalanceValue>\n                )}\n            </TokenBalance>\n        </Wrapper>\n    );\n};\n\nexport default Bottom;\n","import { Icon, variables, useTheme } from '@trezor/components';\nimport React, { useEffect } from 'react';\nimport styled from 'styled-components';\nimport { invityApiSymbolToSymbol } from '@wallet-utils/coinmarket/coinmarketUtils';\nimport { useCoinmarketExchangeFormContext } from '@wallet-hooks/useCoinmarketExchangeForm';\nimport SendCryptoInput from './SendCryptoInput';\nimport FiatInput from './FiatInput';\nimport ReceiveCryptoSelect from './ReceiveCryptoSelect';\nimport Buttons from './Buttons';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n`;\n\nconst Top = styled.div`\n    display: flex;\n    flex: 1;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.XL}) {\n        flex-direction: column;\n    }\n`;\n\nconst LeftWrapper = styled.div`\n    display: flex;\n    flex: 1;\n`;\n\nconst RightWrapper = styled.div`\n    display: flex;\n    justify-content: flex-end;\n`;\n\nconst MiddleWrapper = styled.div`\n    display: flex;\n    min-width: 35px;\n    height: 48px;\n    align-items: center;\n    justify-content: center;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.XL}) {\n        padding-bottom: 27px;\n    }\n`;\n\nconst StyledIcon = styled(Icon)`\n    @media screen and (max-width: ${variables.SCREEN_SIZE.XL}) {\n        transform: rotate(90deg);\n    }\n`;\n\nconst Line = styled.div<{ color: string }>`\n    height: 48px;\n    border: 1px solid ${props => props.color};\n`;\n\nconst Inputs = () => {\n    const theme = useTheme();\n    const { trigger, amountLimits, token, account, errors } = useCoinmarketExchangeFormContext();\n    const formattedToken = invityApiSymbolToSymbol(token);\n    const tokenData = account.tokens?.find(t => t.symbol === formattedToken);\n    useEffect(() => {\n        trigger(['sendCryptoInput']);\n    }, [amountLimits, trigger]);\n\n    return (\n        <Wrapper>\n            <Top>\n                <LeftWrapper>\n                    <SendCryptoInput />\n                    <Line\n                        color={\n                            errors.sendCryptoInput || errors.fiatInput\n                                ? theme.TYPE_RED\n                                : theme.STROKE_GREY\n                        }\n                    />\n                    {!tokenData && <FiatInput />}\n                </LeftWrapper>\n                <MiddleWrapper>\n                    <StyledIcon icon=\"TRANSFER\" size={16} />\n                </MiddleWrapper>\n                <RightWrapper>\n                    <ReceiveCryptoSelect />\n                </RightWrapper>\n            </Top>\n            <Buttons />\n        </Wrapper>\n    );\n};\n\nexport default Inputs;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Fees from '@wallet-components/Fees';\nimport { useCoinmarketExchangeFormContext } from '@wallet-hooks/useCoinmarketExchangeForm';\nimport { PrecomposedLevels } from '@wallet-types/sendForm';\n\nconst StyledCard = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-items: space-between;\n    margin: 25px 0;\n`;\n\n// wrapper for shareable Fees component\nconst ExchangeFees = () => {\n    const {\n        errors,\n        register,\n        setValue,\n        getValues,\n        account,\n        changeFeeLevel,\n        feeInfo,\n        transactionInfo,\n    } = useCoinmarketExchangeFormContext();\n\n    // workaround\n    // exchange hook does not provide whole PrecomposedLevels object\n    // build it from transactionInfo\n    let composedLevels: PrecomposedLevels | undefined;\n    if (transactionInfo) {\n        const selectedFee = getValues('selectedFee');\n        composedLevels = {};\n        composedLevels[selectedFee] = transactionInfo;\n    }\n\n    return (\n        <StyledCard>\n            <Fees\n                errors={errors}\n                register={register}\n                feeInfo={feeInfo}\n                setValue={setValue}\n                getValues={getValues}\n                account={account}\n                composedLevels={composedLevels}\n                changeFeeLevel={changeFeeLevel}\n                showLabel\n            />\n        </StyledCard>\n    );\n};\n\nexport default ExchangeFees;\n","import React from 'react';\nimport { Button } from '@trezor/components';\nimport { Translation } from '@suite-components';\nimport styled from 'styled-components';\nimport { useCoinmarketExchangeFormContext } from '@wallet-hooks/useCoinmarketExchangeForm';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    padding-top: 40px;\n`;\n\nconst Center = styled.div`\n    display: flex;\n    flex: 1;\n    justify-content: center;\n`;\n\nconst StyledButton = styled(Button)`\n    min-width: 200px;\n    margin-left: 20px;\n`;\n\nconst Footer = () => {\n    const { formState, watch, errors, isComposing } = useCoinmarketExchangeFormContext();\n    const hasValues = !!watch('sendCryptoInput') && !!watch('receiveCryptoSelect')?.value;\n    const formIsValid = Object.keys(errors).length === 0;\n\n    return (\n        <Wrapper>\n            <Center>\n                <StyledButton\n                    isDisabled={!(formIsValid && hasValues) || formState.isSubmitting}\n                    isLoading={formState.isSubmitting || isComposing}\n                    type=\"submit\"\n                >\n                    <Translation id=\"TR_EXCHANGE_SHOW_OFFERS\" />\n                </StyledButton>\n            </Center>\n        </Wrapper>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variables } from '@trezor/components';\nimport { Translation } from '@suite-components';\nimport { useCoinmarketExchangeFormContext } from '@wallet-hooks/useCoinmarketExchangeForm';\n\nimport Inputs from './Inputs';\nimport Fees from './Fees';\nimport Footer from './Footer';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        padding: 0;\n    }\n`;\n\nconst Form = styled.form``;\n\nconst FeesWrapper = styled.div`\n    margin: 25px 0;\n    border-top: 1px solid ${props => props.theme.STROKE_GREY};\n    border-bottom: 1px solid ${props => props.theme.STROKE_GREY};\n`;\n\nconst Loading = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.BIG};\n`;\n\nconst NoProviders = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.BIG};\n`;\n\nconst CoinmarketExchangeForm = () => {\n    const { onSubmit, handleSubmit, isLoading, noProviders } = useCoinmarketExchangeFormContext();\n\n    return (\n        <Wrapper>\n            {isLoading && (\n                <Loading>\n                    <Translation id=\"TR_EXCHANGE_LOADING\" />\n                </Loading>\n            )}\n            {!isLoading && noProviders && (\n                <NoProviders>\n                    <Translation id=\"TR_EXCHANGE_NO_PROVIDERS\" />\n                </NoProviders>\n            )}\n            {!isLoading && !noProviders && (\n                <Form onSubmit={handleSubmit(onSubmit)}>\n                    <Inputs />\n                    <FeesWrapper>\n                        <Fees />\n                    </FeesWrapper>\n                    <Footer />\n                </Form>\n            )}\n        </Wrapper>\n    );\n};\n\nexport default CoinmarketExchangeForm;\n","import React from 'react';\nimport { CoinmarketLayout, WalletLayout } from '@wallet-components';\nimport { useSelector } from '@suite-hooks';\nimport { Props } from '@wallet-types/coinmarketExchangeForm';\nimport ExchangeForm from './components/ExchangeForm';\nimport {\n    useCoinmarketExchangeForm,\n    ExchangeFormContext,\n} from '@wallet-hooks/useCoinmarketExchangeForm';\n\nconst CoinmarketExchangeLoaded = (props: Props) => {\n    const { selectedAccount } = props;\n    const coinmarketExchangeContextValues = useCoinmarketExchangeForm({\n        ...props,\n        selectedAccount,\n    });\n\n    return (\n        <CoinmarketLayout>\n            <ExchangeFormContext.Provider value={coinmarketExchangeContextValues}>\n                <ExchangeForm />\n            </ExchangeFormContext.Provider>\n        </CoinmarketLayout>\n    );\n};\n\nconst CoinmarketExchange = () => {\n    const props = useSelector(state => ({\n        selectedAccount: state.wallet.selectedAccount,\n        quotesRequest: state.wallet.coinmarket.exchange.quotesRequest,\n        exchangeCoinInfo: state.wallet.coinmarket.exchange.exchangeCoinInfo,\n        fiat: state.wallet.fiat,\n        device: state.suite.device,\n        localCurrency: state.wallet.settings.localCurrency,\n        fees: state.wallet.fees,\n    }));\n\n    const { selectedAccount } = props;\n    if (selectedAccount.status !== 'loaded') {\n        return <WalletLayout title=\"TR_NAV_EXCHANGE\" account={selectedAccount} />;\n    }\n\n    return <CoinmarketExchangeLoaded {...props} selectedAccount={selectedAccount} />;\n};\n\nexport default CoinmarketExchange;\n","import CoinMarketExchange from '@wallet-views/coinmarket/exchange';\n\nexport default CoinMarketExchange;\n"],"sourceRoot":""}