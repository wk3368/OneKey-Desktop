{"version":3,"sources":["webpack://_N_E/../suite/src/hooks/wallet/useCoinmarketSpend.ts","webpack://_N_E/../suite/src/views/wallet/coinmarket/spend/components/Spend/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/spend/index.tsx","webpack://_N_E/./pages/accounts/coinmarket/spend/index.tsx","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?e6ec"],"names":["SpendContext","createContext","displayName","Wrapper","styled","div","variables","SCREEN_SIZE","LG","Loading","FONT_SIZE","BIG","NoProviders","Vouchers","ProviderInfo","props","theme","TYPE_LIGHT_GREY","StyledIcon","Icon","IframeWrapper","STROKE_GREY","WebContent","IframeContent","WebInfo","StyledButton","Button","Left","Right","CoinmarketSpend","isLoading","noProviders","voucherSiteUrl","openWindow","setShowLeaveModal","context","useContext","Error","useCoinmarketSpendContext","showIframe","isDesktop","id","icon","title","sandbox","style","width","height","border","display","src","variant","onClick","SpendLoaded","selectedAccount","coinmarketSpendContextValues","sellInfo","useInvityAPI","setVoucherSiteUrl","useState","composeTransaction","saveComposedTransaction","signTransaction","addNotification","useActions","coinmarketCommonActions","notificationActions","coinmarketSellActions","translationString","useTranslation","language","fees","account","network","country","sellList","provider","providers","filter","p","type","tradedCoins","includes","symbol","toUpperCase","useEffect","undefined","invityAPI","getVoucherQuotes","cryptoCurrency","refundAddress","getUnusedAddressFromAccount","address","then","response","length","quote","error","siteUrl","onSendCrypto","useCallback","async","trade","cryptoAmount","destinationAddress","errorMessage","selectedFee","coinFees","levels","getFeeLevels","networkType","feeInfo","selectedFeeLevel","find","level","label","result","amount","toString","feePerUnit","feeLimit","isMaxActive","isInvity","transactionInfo","destinationTag","totalSpent","confirmVoucherTrade","values","handleMessage","voucherSiteOrigin","event","origin","requestVoucherTrade","exchange","name","data","status","window","desktopApi","windowFocus","on","removeAllListeners","addEventListener","removeEventListener","endpointIframe","getHttpReceiverAddress","handleMessageEndpoint","endpointWithParams","encodeURIComponent","open","useCoinmarketSpend","Provider","value","Spend","useSelector","state","wallet","device","suite","settings","CoinMarketSpend","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/accounts/coinmarket/spend-a16b4bdc55fe77175b4a.js","sourcesContent":["import { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport { useInvityAPI } from '@wallet-hooks/useCoinmarket';\nimport { Props, SpendContextValues } from '@wallet-types/coinmarketSpend';\nimport invityAPI from '@suite-services/invityAPI';\nimport { SellVoucherTrade } from 'invity-api';\nimport { getUnusedAddressFromAccount } from '@suite/utils/wallet/coinmarket/coinmarketUtils';\nimport { useActions } from '@suite-hooks';\nimport { useTranslation } from '@suite-hooks/useTranslation';\nimport * as coinmarketCommonActions from '@wallet-actions/coinmarket/coinmarketCommonActions';\nimport * as coinmarketSellActions from '@wallet-actions/coinmarketSellActions';\nimport * as notificationActions from '@suite-actions/notificationActions';\nimport { PrecomposedLevels } from '@wallet-types/sendForm';\nimport { getFeeLevels } from '@wallet-utils/sendFormUtils';\nimport { isDesktop } from '@suite/utils/suite/env';\n\nexport const SpendContext = createContext<SpendContextValues | null>(null);\nSpendContext.displayName = 'CoinmarketSpendContext';\n\nexport const useCoinmarketSpend = (props: Props): SpendContextValues => {\n    const { sellInfo } = useInvityAPI();\n    const [voucherSiteUrl, setVoucherSiteUrl] = useState<string | undefined>('error');\n\n    const {\n        composeTransaction,\n        saveComposedTransaction,\n        signTransaction,\n        addNotification,\n        setShowLeaveModal,\n    } = useActions({\n        composeTransaction: coinmarketCommonActions.composeTransaction,\n        saveComposedTransaction: coinmarketCommonActions.saveComposedTransaction,\n        signTransaction: coinmarketCommonActions.signTransaction,\n        addNotification: notificationActions.addToast,\n        setShowLeaveModal: coinmarketSellActions.setShowLeaveModal,\n    });\n    const { translationString } = useTranslation();\n\n    const { selectedAccount, language, fees } = props;\n    const { account, network } = selectedAccount;\n\n    const country = sellInfo?.sellList?.country;\n    const isLoading = !sellInfo || !voucherSiteUrl;\n    const provider = sellInfo?.sellList?.providers.filter(p => p.type === 'Voucher')[0];\n    const noProviders =\n        !provider ||\n        !provider.tradedCoins.includes(account.symbol.toUpperCase()) ||\n        !voucherSiteUrl ||\n        voucherSiteUrl === 'error';\n\n    useEffect(() => {\n        if (provider) {\n            if (provider.tradedCoins.includes(account.symbol.toUpperCase())) {\n                setVoucherSiteUrl(undefined);\n                invityAPI\n                    .getVoucherQuotes({\n                        country,\n                        cryptoCurrency: account.symbol.toUpperCase(),\n                        language,\n                        refundAddress: getUnusedAddressFromAccount(account).address,\n                    })\n                    .then(response => {\n                        if (response.length > 0) {\n                            const quote = response[0];\n                            if (quote.error === undefined) {\n                                setVoucherSiteUrl(quote.siteUrl);\n                            } else {\n                                setVoucherSiteUrl('error');\n                            }\n                        }\n                    });\n            } else {\n                setVoucherSiteUrl('error');\n            }\n        }\n    }, [account, country, language, provider]);\n\n    const onSendCrypto = useCallback(\n        async (trade: SellVoucherTrade) => {\n            if (trade.cryptoAmount && trade.destinationAddress && !trade.error) {\n                let errorMessage: string | undefined;\n                const selectedFee = 'normal';\n                const coinFees = fees[account.symbol];\n                const levels = getFeeLevels(account.networkType, coinFees);\n                const feeInfo = { ...coinFees, levels };\n                const selectedFeeLevel = feeInfo.levels.find(level => level.label === selectedFee);\n                if (!selectedFeeLevel) return false;\n                const result: PrecomposedLevels | undefined = await composeTransaction({\n                    account,\n                    amount: trade.cryptoAmount.toString(),\n                    feeInfo,\n                    feePerUnit: selectedFeeLevel.feePerUnit,\n                    selectedFee,\n                    feeLimit: selectedFeeLevel.feeLimit || '0',\n                    network,\n                    isMaxActive: false,\n                    address: trade.destinationAddress,\n                    isInvity: true,\n                });\n\n                const transactionInfo = result ? result[selectedFeeLevel.label] : null;\n                if (transactionInfo?.type === 'final') {\n                    saveComposedTransaction(transactionInfo);\n                    const success = await signTransaction({\n                        account,\n                        address: trade.destinationAddress,\n                        destinationTag: undefined,\n                        transactionInfo,\n                        network,\n                        amount: transactionInfo.totalSpent,\n                    });\n                    if (success) {\n                        await invityAPI.confirmVoucherTrade(trade);\n                        setShowLeaveModal(false);\n                    }\n                    return;\n                }\n\n                if (transactionInfo?.type === 'error' && transactionInfo.errorMessage) {\n                    errorMessage = translationString(\n                        transactionInfo.errorMessage.id,\n                        transactionInfo.errorMessage.values as { [key: string]: any },\n                    );\n                }\n\n                if (!errorMessage) {\n                    errorMessage = 'Cannot create transaction';\n                }\n                addNotification({\n                    type: 'error',\n                    error: errorMessage,\n                });\n            }\n        },\n        [\n            account,\n            addNotification,\n            composeTransaction,\n            fees,\n            network,\n            saveComposedTransaction,\n            setShowLeaveModal,\n            signTransaction,\n            translationString,\n        ],\n    );\n\n    useEffect(() => {\n        if (!isLoading && !noProviders) {\n            const handleMessage = async (event: MessageEvent) => {\n                if (provider && provider.voucherSiteOrigin === event.origin) {\n                    const trade = await invityAPI.requestVoucherTrade({\n                        exchange: provider.name,\n                        cryptoCurrency: account.symbol.toUpperCase(),\n                        data: event.data,\n                    });\n\n                    if (trade.error) {\n                        addNotification({\n                            type: 'error',\n                            error: trade.error,\n                        });\n                    }\n\n                    if (trade.status === 'SEND_CRYPTO' && !trade.error) {\n                        onSendCrypto(trade);\n                        window.desktopApi?.windowFocus();\n                    }\n                }\n            };\n\n            if (isDesktop()) {\n                // handle messages from desktop\n                window.desktopApi?.on('spend/message', handleMessage);\n                return () => {\n                    window.desktopApi?.removeAllListeners('spend/message');\n                };\n            }\n\n            // handle messages from web\n            window.addEventListener('message', handleMessage);\n            return () => {\n                window.removeEventListener('message', handleMessage);\n            };\n        }\n    }, [account.symbol, isLoading, noProviders, provider, onSendCrypto, addNotification]);\n\n    const openWindow = async (voucherSiteUrl?: string) => {\n        const endpointIframe = await window.desktopApi?.getHttpReceiverAddress(`/spend-iframe`);\n        const handleMessageEndpoint = await window.desktopApi?.getHttpReceiverAddress(\n            `/spend-handle-message`,\n        );\n        if (voucherSiteUrl && handleMessageEndpoint) {\n            const endpointWithParams = `${endpointIframe}?voucherSiteUrl=${encodeURIComponent(\n                voucherSiteUrl,\n            )}&handleMessageEndpoint=${encodeURIComponent(handleMessageEndpoint)}`;\n            window.open(endpointWithParams, '_blank');\n        }\n    };\n\n    return {\n        openWindow,\n        account,\n        isLoading,\n        noProviders,\n        network,\n        provider,\n        voucherSiteUrl,\n        setShowLeaveModal,\n    };\n};\n\nexport const useCoinmarketSpendContext = () => {\n    const context = useContext(SpendContext);\n    if (context === null) throw Error('SpendContext used without Context');\n    return context;\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Icon, variables, Button } from '@trezor/components';\nimport { Translation } from '@suite-components';\nimport { isDesktop } from '@suite-utils/env';\nimport { useCoinmarketSpendContext } from '@wallet-hooks/useCoinmarketSpend';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        padding: 0;\n    }\n`;\n\nconst Loading = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.BIG};\n`;\n\nconst NoProviders = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.BIG};\n`;\n\nconst Vouchers = styled.div``;\n\nconst ProviderInfo = styled.div`\n    display: flex;\n    align-items: center;\n    margin-bottom: 15px;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nconst StyledIcon = styled(Icon)`\n    padding-right: 4px;\n`;\n\nconst IframeWrapper = styled.div`\n    min-height: 500px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    border: 1px solid ${props => props.theme.STROKE_GREY};\n`;\n\nconst WebContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center;\n    min-height: 150px;\n`;\n\nconst IframeContent = styled.div``;\n\nconst WebInfo = styled.div`\n    display: flex;\n    justify-content: center;\n`;\n\nconst StyledButton = styled(Button)`\n    margin-top: 25px;\n`;\n\nconst Left = styled.div`\n    padding-right: 5px;\n    display: flex;\n`;\n\nconst Right = styled.div``;\n\nconst CoinmarketSpend = () => {\n    const {\n        isLoading,\n        noProviders,\n        voucherSiteUrl,\n        openWindow,\n        setShowLeaveModal,\n    } = useCoinmarketSpendContext();\n    const showIframe = !isDesktop();\n\n    return (\n        <Wrapper>\n            {isLoading && (\n                <Loading>\n                    <Translation id=\"TR_SPEND_LOADING\" />\n                </Loading>\n            )}\n            {!isLoading && noProviders && (\n                <NoProviders>\n                    <Translation id=\"TR_SPEND_NO_PROVIDERS\" />\n                </NoProviders>\n            )}\n            {!isLoading && !noProviders && (\n                <Vouchers>\n                    {showIframe && (\n                        <IframeContent>\n                            <ProviderInfo>\n                                <Left>\n                                    <StyledIcon icon=\"INFO\" />\n                                </Left>\n                                <Right>\n                                    <Translation id=\"TR_SPEND_PROVIDER_CONTENT\" />\n                                </Right>\n                            </ProviderInfo>\n                            <IframeWrapper>\n                                <iframe\n                                    title=\".\"\n                                    sandbox=\"allow-scripts allow-forms allow-same-origin\"\n                                    style={{\n                                        width: '100%',\n                                        height: '650px',\n                                        border: '0',\n                                        display: 'block',\n                                    }}\n                                    src={voucherSiteUrl}\n                                />\n                            </IframeWrapper>\n                        </IframeContent>\n                    )}\n                    {!showIframe && (\n                        <WebContent>\n                            <WebInfo>\n                                <Left>\n                                    <StyledIcon icon=\"INFO\" />\n                                </Left>\n                                <Right>\n                                    <Translation id=\"TR_SPEND_PROVIDER_CONTENT_WINDOW\" />\n                                </Right>\n                            </WebInfo>\n                            <StyledButton\n                                variant=\"primary\"\n                                onClick={() => {\n                                    setShowLeaveModal(true);\n                                    openWindow(voucherSiteUrl);\n                                }}\n                            >\n                                <Translation id=\"TR_SPEND_OPEN_WINDOW\" />\n                            </StyledButton>\n                        </WebContent>\n                    )}\n                </Vouchers>\n            )}\n        </Wrapper>\n    );\n};\n\nexport default CoinmarketSpend;\n","import React from 'react';\nimport { CoinmarketLayout, WalletLayout } from '@wallet-components';\nimport { useSelector } from '@suite-hooks';\nimport { Props } from '@wallet-types/coinmarketSpend';\nimport Spend from './components/Spend';\nimport { useCoinmarketSpend, SpendContext } from '@wallet-hooks/useCoinmarketSpend';\n\nconst SpendLoaded = (props: Props) => {\n    const { selectedAccount } = props;\n    const coinmarketSpendContextValues = useCoinmarketSpend({\n        ...props,\n        selectedAccount,\n    });\n\n    return (\n        <CoinmarketLayout>\n            <SpendContext.Provider value={coinmarketSpendContextValues}>\n                <Spend />\n            </SpendContext.Provider>\n        </CoinmarketLayout>\n    );\n};\n\nconst CoinmarketSpend = () => {\n    const props = useSelector(state => ({\n        selectedAccount: state.wallet.selectedAccount,\n        device: state.suite.device,\n        language: state.suite.settings.language,\n        fees: state.wallet.fees,\n    }));\n\n    const { selectedAccount } = props;\n    if (selectedAccount.status !== 'loaded') {\n        return <WalletLayout title=\"TR_NAV_SPEND\" account={selectedAccount} />;\n    }\n\n    return <SpendLoaded {...props} selectedAccount={selectedAccount} />;\n};\n\nexport default CoinmarketSpend;\n","import CoinMarketSpend from '@wallet-views/coinmarket/spend';\n\nexport default CoinMarketSpend;\n","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/accounts/coinmarket/spend\",\n        function () {\n          return require(\"private-next-pages/accounts/coinmarket/spend/index.tsx\");\n        }\n      ]);\n    "],"sourceRoot":""}