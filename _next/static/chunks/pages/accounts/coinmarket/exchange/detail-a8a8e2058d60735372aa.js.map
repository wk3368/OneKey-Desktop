{"version":3,"sources":["webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?591b","webpack://_N_E/../suite/src/hooks/wallet/useCoinmarketExchangeDetail.ts","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/detail/components/PaymentFailed/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/detail/components/PaymentSuccessful/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/detail/components/PaymentKYC/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/detail/components/PaymentConverting/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/detail/components/PaymentSending/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/detail/Detail/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/detail/index.tsx","webpack://_N_E/./pages/accounts/coinmarket/exchange/detail/index.tsx"],"names":["window","__NEXT_P","push","CoinmarketExchangeDetailContext","createContext","displayName","Wrapper","styled","div","Image","img","Title","variables","FONT_WEIGHT","DEMI_BOLD","Description","props","theme","TYPE_LIGHT_GREY","MEDIUM","Link","a","PaymentFailed","transactionId","supportUrl","account","goto","useActions","routerActions","src","resolveStaticPath","Translation","id","href","target","variant","onClick","symbol","accountIndex","index","accountType","PaymentSuccessful","PaymentKYC","provider","kycUrl","PaymentConverting","PaymentSending","SCREEN_SIZE","LG","StyledCard","Card","CoinmarketDetail","setLayout","useContext","LayoutContext","useEffect","undefined","trade","exchangeInfo","context","Error","useCoinmarketExchangeDetailContext","tradeStatus","data","status","showSending","ExchangeTradeFinalStatuses","includes","exchange","providerInfos","supportUrlTemplate","statusUrl","replace","orderId","key","selectedQuote","DetailIndexLoaded","selectedAccount","coinmarketExchangeContextValues","trades","exchangeTrade","find","tradeType","invityAPIUrl","useSelector","state","suite","settings","debug","invityAPI","setInvityAPIServer","wallet","coinmarket","useWatchExchangeTrade","useCoinmarketExchangeDetail","Provider","value","Detail","DetailIndex","title"],"mappings":"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","file":"static/chunks/pages/accounts/coinmarket/exchange/detail-a8a8e2058d60735372aa.js","sourcesContent":["\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/accounts/coinmarket/exchange/detail\",\n        function () {\n          return require(\"private-next-pages/accounts/coinmarket/exchange/detail/index.tsx\");\n        }\n      ]);\n    ","import { createContext, useContext } from 'react';\nimport { Props, ContextValues } from '@wallet-types/coinmarketExchangeDetail';\nimport { useWatchExchangeTrade } from '@wallet-hooks/useCoinmarket';\nimport { useSelector } from '@suite-hooks';\nimport { TradeExchange } from '@wallet-reducers/coinmarketReducer';\nimport invityAPI from '@suite-services/invityAPI';\n\nexport const useCoinmarketExchangeDetail = (props: Props) => {\n    const { selectedAccount, trades, transactionId } = props;\n    const exchangeTrade = trades.find(\n        trade => trade.tradeType === 'exchange' && trade.key === transactionId,\n    ) as TradeExchange;\n    const { account } = selectedAccount;\n    const invityAPIUrl = useSelector(state => state.suite.settings.debug.invityAPIUrl);\n    if (invityAPIUrl) {\n        invityAPI.setInvityAPIServer(invityAPIUrl);\n    }\n    const exchangeInfo = useSelector(state => state.wallet.coinmarket.exchange.exchangeInfo);\n    useWatchExchangeTrade(account, exchangeTrade);\n\n    return {\n        account,\n        trade: exchangeTrade,\n        transactionId,\n        exchangeInfo,\n    };\n};\n\nexport const CoinmarketExchangeDetailContext = createContext<ContextValues | null>(null);\nCoinmarketExchangeDetailContext.displayName = 'CoinmarketExchangeDetailContext';\n\nexport const useCoinmarketExchangeDetailContext = () => {\n    const context = useContext(CoinmarketExchangeDetailContext);\n    if (context === null) throw Error('CoinmarketExchangeDetailContext used without Context');\n    return context;\n};\n","import * as routerActions from '@suite-actions/routerActions';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { resolveStaticPath } from '@suite-utils/nextjs';\nimport { Button, variables } from '@trezor/components';\nimport { CoinmarketTransactionId } from '@wallet-components';\nimport { useActions } from '@suite-hooks/useActions';\nimport { Account } from '@wallet-types';\nimport { Translation } from '@suite-components/Translation';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 60px 20px 60px 20px;\n    flex-direction: column;\n`;\n\nconst Image = styled.img``;\n\nconst Title = styled.div`\n    margin-top: 25px;\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst Description = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    margin: 17px 0 10px 0;\n    max-width: 310px;\n    text-align: center;\n`;\n\nconst Link = styled.a`\n    margin-top: 30px;\n    margin-bottom: 30px;\n`;\n\ninterface Props {\n    transactionId?: string;\n    supportUrl?: string;\n    account: Account;\n}\n\nconst PaymentFailed = ({ transactionId, supportUrl, account }: Props) => {\n    const { goto } = useActions({\n        goto: routerActions.goto,\n    });\n    return (\n        <Wrapper>\n            <Image src={resolveStaticPath('/images/svg/uni-error.svg')} />\n            <Title>\n                <Translation id=\"TR_EXCHANGE_DETAIL_ERROR_TITLE\" />\n            </Title>\n            <Description>\n                <Translation id=\"TR_EXCHANGE_DETAIL_ERROR_TEXT\" />\n            </Description>\n            {transactionId && <CoinmarketTransactionId transactionId={transactionId} />}\n            {supportUrl && (\n                <Link href={supportUrl} target=\"_blank\">\n                    <Button variant=\"tertiary\">\n                        <Translation id=\"TR_EXCHANGE_DETAIL_ERROR_SUPPORT\" />\n                    </Button>\n                </Link>\n            )}\n            <Button\n                onClick={() =>\n                    goto('wallet-coinmarket-exchange', {\n                        symbol: account.symbol,\n                        accountIndex: account.index,\n                        accountType: account.accountType,\n                    })\n                }\n            >\n                <Translation id=\"TR_EXCHANGE_DETAIL_ERROR_BUTTON\" />\n            </Button>\n        </Wrapper>\n    );\n};\n\nexport default PaymentFailed;\n","import * as routerActions from '@suite-actions/routerActions';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { resolveStaticPath } from '@suite-utils/nextjs';\nimport { Button, variables } from '@trezor/components';\nimport { Translation } from '@suite-components';\nimport { useActions } from '@suite-hooks';\nimport { Account } from '@wallet-types';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 60px 20px 60px 20px;\n    flex-direction: column;\n`;\n\nconst Image = styled.img``;\n\nconst Title = styled.div`\n    margin-top: 25px;\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst Description = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    margin: 17px 0 30px 0;\n    max-width: 310px;\n    text-align: center;\n`;\n\ninterface Props {\n    account: Account;\n}\n\nconst PaymentSuccessful = ({ account }: Props) => {\n    const { goto } = useActions({\n        goto: routerActions.goto,\n    });\n    return (\n        <Wrapper>\n            <Image src={resolveStaticPath('/images/svg/coinmarket-success.svg')} />\n            <Title>\n                <Translation id=\"TR_EXCHANGE_DETAIL_SUCCESS_TITLE\" />\n            </Title>\n            <Description>\n                <Translation id=\"TR_EXCHANGE_DETAIL_SUCCESS_TEXT\" />\n            </Description>\n            <Button\n                onClick={() =>\n                    goto('wallet-coinmarket-exchange', {\n                        symbol: account.symbol,\n                        accountIndex: account.index,\n                        accountType: account.accountType,\n                    })\n                }\n            >\n                <Translation id=\"TR_EXCHANGE_DETAIL_SUCCESS_BUTTON\" />\n            </Button>\n        </Wrapper>\n    );\n};\n\nexport default PaymentSuccessful;\n","import * as routerActions from '@suite-actions/routerActions';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { resolveStaticPath } from '@suite-utils/nextjs';\nimport { Button, variables } from '@trezor/components';\nimport { CoinmarketTransactionId } from '@wallet-components';\nimport { useActions } from '@suite-hooks/useActions';\nimport { Account } from '@wallet-types';\nimport { Translation } from '@suite-components/Translation';\nimport { ExchangeProviderInfo } from 'invity-api';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 60px 20px 60px 20px;\n    flex-direction: column;\n`;\n\nconst Image = styled.img``;\n\nconst Title = styled.div`\n    margin-top: 25px;\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst Description = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    margin: 17px 0 10px 0;\n    max-width: 310px;\n    text-align: center;\n`;\n\nconst Link = styled.a`\n    margin-top: 5px;\n    margin-bottom: 20px;\n`;\n\ninterface Props {\n    transactionId?: string;\n    supportUrl?: string;\n    provider?: ExchangeProviderInfo;\n    account: Account;\n}\n\nconst PaymentKYC = ({ transactionId, supportUrl, provider, account }: Props) => {\n    const { goto } = useActions({\n        goto: routerActions.goto,\n    });\n    return (\n        <Wrapper>\n            <Image src={resolveStaticPath('/images/svg/uni-warning.svg')} />\n            <Title>\n                <Translation id=\"TR_EXCHANGE_DETAIL_KYC_TITLE\" />\n            </Title>\n            <Description>\n                <Translation id=\"TR_EXCHANGE_DETAIL_KYC_TEXT\" />\n            </Description>\n            {transactionId && <CoinmarketTransactionId transactionId={transactionId} />}\n            {supportUrl && (\n                <Link href={supportUrl} target=\"_blank\">\n                    <Button variant=\"tertiary\">\n                        <Translation id=\"TR_EXCHANGE_DETAIL_KYC_SUPPORT\" />\n                    </Button>\n                </Link>\n            )}\n            {provider?.kycUrl && (\n                <Link href={provider?.kycUrl} target=\"_blank\">\n                    <Button variant=\"tertiary\">\n                        <Translation id=\"TR_EXCHANGE_DETAIL_KYC_INFO_LINK\" />\n                    </Button>\n                </Link>\n            )}\n            <Button\n                onClick={() =>\n                    goto('wallet-coinmarket-exchange', {\n                        symbol: account.symbol,\n                        accountIndex: account.index,\n                        accountType: account.accountType,\n                    })\n                }\n            >\n                <Translation id=\"TR_EXCHANGE_DETAIL_KYC_BUTTON\" />\n            </Button>\n        </Wrapper>\n    );\n};\n\nexport default PaymentKYC;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variables, Loader, Button } from '@trezor/components';\nimport { Translation } from '@suite-components/Translation';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 60px 20px 60px 20px;\n    flex-direction: column;\n`;\n\nconst Title = styled.div`\n    margin-top: 25px;\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst Link = styled.a`\n    margin-top: 50px;\n`;\n\ninterface Props {\n    supportUrl?: string;\n}\n\nconst PaymentConverting = ({ supportUrl }: Props) => {\n    return (\n        <Wrapper>\n            <Loader />\n            <Title>\n                <Translation id=\"TR_EXCHANGE_DETAIL_CONVERTING_TITLE\" />\n            </Title>\n            {supportUrl && (\n                <Link href={supportUrl} target=\"_blank\">\n                    <Button variant=\"tertiary\">\n                        <Translation id=\"TR_EXCHANGE_DETAIL_CONVERTING_SUPPORT\" />\n                    </Button>\n                </Link>\n            )}\n        </Wrapper>\n    );\n};\n\nexport default PaymentConverting;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variables, Loader, Button } from '@trezor/components';\nimport { Translation } from '@suite-components/Translation';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 60px 20px 60px 20px;\n    flex-direction: column;\n`;\n\nconst Title = styled.div`\n    margin-top: 25px;\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst Link = styled.a`\n    margin-top: 50px;\n`;\n\ninterface Props {\n    supportUrl?: string;\n}\n\nconst PaymentSending = ({ supportUrl }: Props) => {\n    return (\n        <Wrapper>\n            <Loader />\n            <Title>\n                <Translation id=\"TR_EXCHANGE_DETAIL_SENDING_TITLE\" />\n            </Title>\n            {supportUrl && (\n                <Link href={supportUrl} target=\"_blank\">\n                    <Button variant=\"tertiary\">\n                        <Translation id=\"TR_EXCHANGE_DETAIL_SENDING_SUPPORT\" />\n                    </Button>\n                </Link>\n            )}\n        </Wrapper>\n    );\n};\n\nexport default PaymentSending;\n","import React, { useEffect, useContext } from 'react';\nimport styled from 'styled-components';\nimport { LayoutContext } from '@suite-components';\nimport { Card, variables } from '@trezor/components';\nimport { CoinmarketExchangeOfferInfo, CoinmarketExchangeTopPanel } from '@wallet-components';\nimport { useCoinmarketExchangeDetailContext } from '@wallet-hooks/useCoinmarketExchangeDetail';\nimport { ExchangeTradeFinalStatuses } from '@wallet-hooks/useCoinmarket';\nimport * as routerActions from '@suite-actions/routerActions';\nimport { useActions } from '@suite-hooks';\n\nimport PaymentFailed from '../components/PaymentFailed';\nimport PaymentSuccessful from '../components/PaymentSuccessful';\nimport PaymentKYC from '../components/PaymentKYC';\nimport PaymentConverting from '../components/PaymentConverting';\nimport PaymentSending from '../components/PaymentSending';\n\nconst Wrapper = styled.div`\n    display: flex;\n    margin-top: 20px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        flex-direction: column;\n    }\n`;\n\nconst StyledCard = styled(Card)`\n    flex: 1;\n    padding: 0;\n`;\n\nconst CoinmarketDetail = () => {\n    const { setLayout } = useContext(LayoutContext);\n\n    useEffect(() => {\n        if (setLayout) setLayout('Trezor Suite | Trade', undefined, <CoinmarketExchangeTopPanel />);\n    }, [setLayout]);\n\n    const { account, trade, exchangeInfo } = useCoinmarketExchangeDetailContext();\n    const { goto } = useActions({ goto: routerActions.goto });\n\n    // if trade not found, it is because user refreshed the page and stored transactionId got removed\n    // go to the default coinmarket page, the trade is shown there in the previous trades\n    if (!trade) {\n        goto('wallet-coinmarket-exchange', {\n            symbol: account.symbol,\n            accountIndex: account.index,\n            accountType: account.accountType,\n        });\n        return null;\n    }\n\n    const tradeStatus = trade?.data?.status || 'CONFIRMING';\n\n    const showSending =\n        !ExchangeTradeFinalStatuses.includes(tradeStatus) && tradeStatus !== 'CONVERTING';\n\n    const exchange = trade?.data?.exchange;\n    const provider =\n        exchangeInfo && exchangeInfo.providerInfos && exchange\n            ? exchangeInfo.providerInfos[exchange]\n            : undefined;\n    const supportUrlTemplate = provider?.statusUrl || provider?.supportUrl;\n    const supportUrl = supportUrlTemplate?.replace('{{orderId}}', trade?.data?.orderId || '');\n\n    return (\n        <Wrapper>\n            <StyledCard>\n                {tradeStatus === 'SUCCESS' && <PaymentSuccessful account={account} />}\n                {tradeStatus === 'KYC' && (\n                    <PaymentKYC account={account} provider={provider} supportUrl={supportUrl} />\n                )}\n                {tradeStatus === 'ERROR' && (\n                    <PaymentFailed\n                        account={account}\n                        transactionId={trade.key}\n                        supportUrl={supportUrl}\n                    />\n                )}\n                {tradeStatus === 'CONVERTING' && <PaymentConverting supportUrl={supportUrl} />}\n                {showSending && <PaymentSending supportUrl={supportUrl} />}\n            </StyledCard>\n            <CoinmarketExchangeOfferInfo\n                account={account}\n                exchangeInfo={exchangeInfo}\n                selectedQuote={trade.data}\n                transactionId={trade.key}\n            />\n        </Wrapper>\n    );\n};\n\nexport default CoinmarketDetail;\n","import React from 'react';\nimport {\n    useCoinmarketExchangeDetail,\n    CoinmarketExchangeDetailContext,\n} from '@wallet-hooks/useCoinmarketExchangeDetail';\nimport { useSelector } from '@suite-hooks';\nimport { WalletLayout } from '@wallet-components';\nimport styled from 'styled-components';\nimport { Props } from '@wallet-types/coinmarketExchangeDetail';\n\nimport Detail from './Detail';\n\nconst Wrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n`;\n\nconst DetailIndexLoaded = (props: Props) => {\n    const { selectedAccount } = props;\n    const coinmarketExchangeContextValues = useCoinmarketExchangeDetail({\n        ...props,\n        selectedAccount,\n    });\n\n    return (\n        <CoinmarketExchangeDetailContext.Provider value={coinmarketExchangeContextValues}>\n            <Wrapper>\n                <Detail />\n            </Wrapper>\n        </CoinmarketExchangeDetailContext.Provider>\n    );\n};\n\nconst DetailIndex = () => {\n    const props = useSelector(state => ({\n        selectedAccount: state.wallet.selectedAccount,\n        trades: state.wallet.coinmarket.trades,\n        transactionId: state.wallet.coinmarket.exchange.transactionId,\n    }));\n\n    const { selectedAccount } = props;\n    if (selectedAccount.status !== 'loaded') {\n        return <WalletLayout title=\"TR_NAV_EXCHANGE\" account={selectedAccount} />;\n    }\n    return <DetailIndexLoaded {...props} selectedAccount={selectedAccount} />;\n};\n\nexport default DetailIndex;\n","import Detail from '@wallet-views/coinmarket/exchange/detail';\n\nexport default Detail;\n"],"sourceRoot":""}