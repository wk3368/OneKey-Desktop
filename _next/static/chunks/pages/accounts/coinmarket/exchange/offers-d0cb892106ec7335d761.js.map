{"version":3,"sources":["webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?086e","webpack://_N_E/../suite/src/hooks/suite/useTimeInterval.ts","webpack://_N_E/../suite/src/hooks/wallet/useCoinmarketExchangeOffers.ts","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/offers/Offers/List/Quote/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/offers/Offers/List/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/offers/Offers/SelectedOffer/components/VerifyAddress/ReceiveOptions/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/offers/Offers/SelectedOffer/components/VerifyAddress/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/offers/Offers/SelectedOffer/components/SendTransaction/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/offers/Offers/SelectedOffer/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/offers/Offers/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/exchange/offers/index.tsx","webpack://_N_E/./pages/accounts/coinmarket/exchange/offers/index.tsx"],"names":["window","__NEXT_P","push","useTimer","timeSpend","setTimeSpend","useState","isLoading","setIsLoading","isStopped","setIsStopped","resetCount","setResetCount","useEffect","timeout","setTimeout","clearTimeout","seconds","stop","reset","loading","useOffers","props","timer","selectedAccount","quotesRequest","fixedQuotes","floatQuotes","exchangeInfo","device","addressVerified","isLocked","useDevice","account","network","callInProgress","setCallInProgress","selectedQuote","setSelectedQuote","receiveAccount","setReceiveAccount","suiteReceiveAccounts","setSuiteReceiveAccounts","innerFixedQuotes","setInnerFixedQuotes","innerFloatQuotes","setInnerFloatQuotes","exchangeStep","setExchangeStep","goto","useActions","routerActions","verifyAddress","coinmarketCommonActions","saveTrade","openCoinmarketExchangeConfirmModal","saveTransactionId","signTransaction","addNotification","coinmarketExchangeActions","notificationActions","invityAPIUrl","useSelector","state","suite","settings","debug","invityAPI","setInvityAPIServer","accounts","wallet","transactionInfo","coinmarket","transaction","composed","exchangeCoinInfo","exchange","symbol","accountIndex","index","accountType","async","createInvityAPIKey","descriptor","allQuotes","getExchangeQuotes","splitToFixedFloatQuotes","getQuotes","receiveSymbol","coinInfo","find","ci","ticker","token","toLowerCase","getReceiveAccountSymbol","receive","unavailableCapabilities","features","networks","filter","n","length","a","deviceState","empty","visible","undefined","confirmTrade","address","extraField","refundAddress","getUnusedAddressFromAccount","response","doExchangeTrade","trade","receiveAddress","error","status","orderId","type","sendTransaction","sendAddress","totalSpent","destinationTag","partnerPaymentExtraId","amount","Date","toISOString","selectQuote","provider","providerInfos","quote","companyName","REFETCH_INTERVAL_IN_SECONDS","CoinmarketExchangeOffersContext","createContext","displayName","useCoinmarketExchangeOffersContext","context","useContext","Error","Wrapper","styled","div","theme","BG_WHITE","TagRow","Main","STROKE_GREY","Left","variables","FONT_SIZE","H2","Right","Details","Column","maxWidth","Heading","TYPE_LIGHT_GREY","FONT_WEIGHT","DEMI_BOLD","StyledButton","Button","Value","TYPE_DARK_GREY","MEDIUM","ErrorFooter","TYPE_RED","StyledIcon","Icon","IconWrapper","ErrorText","StyledQuestionTooltip","QuestionTooltip","Quote","className","useTheme","receiveStringAmount","errorQuote","isQuoteError","formatCryptoAmount","Number","isDisabled","onClick","id","CoinmarketExchangeProviderInfo","providers","tooltip","kycPolicy","icon","size","color","min","sendStringAmount","values","currency","send","max","getQuoteError","Quotes","StyledQuote","SummaryRow","NORMAL","Divider","DividerLine","RatesRow","List","quotes","isFixed","map","key","LogoWrapper","AccountWrapper","UpperCase","FiatWrapper","Amount","TINY","AccountName","Option","AccountType","span","ReceiveOptions","menuIsOpen","setMenuIsOpen","dispatch","useDispatch","selectedAccountOption","setSelectedAccountOption","setValue","selectAccountOptions","forEach","selectAccountOption","option","shouldValidate","useTimeoutFn","onChange","selected","modalActions","noRedirect","noTopLabel","value","isClearable","options","minWidth","formatOptionLabel","formattedBalance","toUpperCase","isDropdownVisible","placeholder","SMALL","CardContent","Label","CustomLabel","LabelText","StyledDeviceImage","DeviceImage","ButtonWrapper","Confirmed","BIG","BG_GREY","Row","VerifyAddressComponent","register","watch","errors","formState","useForm","mode","typedRegister","useCallback","rules","extraFieldDescription","extraFieldName","name","description","toCurrency","formErrors","isValid","label","variant","innerRef","required","validate","addressValidator","readOnly","bottomText","height","trezorModel","major_version","valid","isHexValid","isInteger","Address","SendTransactionComponent","providerName","SCREEN_SIZE","LG","StyledCard","Card","Header","Step","active","TYPE_GREEN","Middle","SelectedOffer","colors","VerifyAddress","SendTransaction","CoinmarketExchangeOfferInfo","NoQuotes","Text","StyledCoinLogo","CoinLogo","InvityCoinLogo","img","TextAmount","Offers","setLayout","LayoutContext","useMemo","quotesCount","src","server","refetchInterval","OffersIndexLoaded","coinmarketOffersValues","Provider","OffersIndex","title"],"mappings":"+FACOA,OAAOC,SAAWD,OAAOC,UAAY,IAAIC,KAAK,CAC7C,uCACA,WACE,OAAO,EAAQ,Y,kCCJzB,kDAcO,MAAMC,EAAW,KACpB,MAAM,EAACC,EAAD,EAAYC,GAAgBC,mBAAS,IACrC,EAACC,EAAD,EAAYC,GAAgBF,oBAAS,IACrC,EAACG,EAAD,EAAYC,GAAgBJ,oBAAS,IACrC,EAACK,EAAD,EAAaC,GAAiBN,mBAAS,GAE7CO,qBAAU,KACN,MAAMC,EAAUC,YAAW,KACvBV,EAAaD,EAAY,OAC1B,KAMH,OAJIK,GAAaF,IACbS,aAAaF,GAGV,KACHE,aAAaF,OAqBrB,MAAO,CACHV,UAAW,CACPa,QAASb,EAAY,KAEzBO,aACAF,YACAF,YACAW,KAjBS,KACTR,GAAa,IAiBbS,MAzBU,KACVX,GAAa,GACbI,EAAcD,EAAa,GAC3BN,EAAa,GACbK,GAAa,IAsBbU,QAfY,KACZf,EAAa,GACbG,GAAa,GACbE,GAAa,O,0OCjCrB,MAgBaW,EAAaC,IACtB,MAAMC,EAAQpB,eAER,gBACFqB,EADE,cAEFC,EAFE,YAGFC,EAHE,YAIFC,EAJE,aAKFC,EALE,OAMFC,EANE,gBAOFC,GACAR,GAEE,SAAES,GAAaC,eACf,QAAEC,EAAF,QAAWC,GAAYV,GACvB,EAACW,EAAD,EAAiBC,GAAqB9B,mBAAkByB,MAAc,IACtE,EAACM,EAAD,EAAgBC,GAAoBhC,sBACpC,EAACiC,EAAD,EAAiBC,GAAqBlC,sBACtC,EAACmC,EAAD,EAAuBC,GAA2BpC,sBAGlD,EAACqC,EAAD,EAAmBC,GAAuBtC,mBAA0BoB,IACpE,EAACmB,EAAD,EAAmBC,GAAuBxC,mBAA0BqB,IACpE,EAACoB,EAAD,EAAeC,GAAmB1C,mBAAuB,sBACzD,KAAE2C,GAASC,YAAW,CAAED,KAAME,OAC9B,cAAEC,GAAkBF,YAAW,CAAEE,cAAeC,OAChD,UACFC,EADE,mCAEFC,EAFE,kBAGFC,EAHE,gBAIFC,EAJE,gBAKFC,GACAR,YAAW,CACXI,UAAWK,IACXJ,mCACII,IACJH,kBAAmBG,IACnBF,gBAAiBJ,IACjBK,gBAAiBE,MAGfC,EAAeC,aAAYC,GAASA,EAAMC,MAAMC,SAASC,MAAML,eACjEA,GACAM,IAAUC,mBAAmBP,GAGjC,MAAMQ,EAAWP,aAAYC,GAASA,EAAMO,OAAOD,WAC7CE,EAAkBT,aAAYC,GAASA,EAAMO,OAAOE,WAAWC,YAAYC,WAC3EC,EAAmBb,aACrBC,GAASA,EAAMO,OAAOE,WAAWI,SAASD,mBAG9C9D,qBAAU,KACN,IAAKY,EAMD,YALAwB,EAAK,6BAA8B,CAC/B4B,OAAQ5C,EAAQ4C,OAChBC,aAAc7C,EAAQ8C,MACtBC,YAAa/C,EAAQ+C,cAkBxBzD,EAAMhB,WAAcgB,EAAMd,YACvBc,EAAMZ,YAAc,IACpBY,EAAML,OA3EkB,KA8ExBK,EAAMnB,UAAUa,UAChBM,EAAMH,UAnBI6D,WACd,IAAK5C,EAAe,CAChB8B,IAAUe,mBAAmBjD,EAAQkD,YACrC/C,GAAkB,GAClB,MAAMgD,QAAkBjB,IAAUkB,kBAAkB5D,GACpDW,GAAkB,GAClB,MAAOV,EAAaC,GAAe2D,YAAwBF,EAAWxD,GACtEgB,EAAoBlB,GACpBoB,EAAoBnB,GACpBJ,EAAMJ,UAWNoE,QAKZ,MAcMC,EArHsB,EAC5BX,EACAF,KAEA,GAAIE,EAAQ,CAER,MAAMY,EAAQ,OAAGd,QAAH,IAAGA,OAAH,EAAGA,EAAkBe,MAAKC,GAAMA,EAAGC,SAAWf,IAC5D,MAAwB,SAAZ,OAARY,QAAQ,IAARA,OAAA,EAAAA,EAAUI,OACH,MAEJhB,EAAOiB,cAGlB,OAAOjB,GAwGekB,CAAuB,OAAC1D,QAAD,IAACA,OAAD,EAACA,EAAe2D,QAASrB,GAEtE9D,qBAAU,KACN,GAAIwB,GAAkC,sBAAjBU,EAAsC,CACvD,MAAMkD,EACI,OAANpE,QAAM,IAANA,KAAQqE,UAAR,OAAoBrE,QAApB,IAAoBA,KAAQoE,wBACtBpE,EAAOoE,wBACP,GAKV,GAHwBE,IAASC,QAC7BC,GAAKA,EAAExB,SAAWW,IAAkBS,EAAwBI,EAAExB,UAE9CyB,OAAS,EAYzB,YAVA5D,EACI2B,EAAS+B,QACLG,GACIA,EAAEC,eAAF,OAAkB3E,QAAlB,IAAkBA,OAAlB,EAAkBA,EAAQkC,QAC1BwC,EAAE1B,SAAWW,KACXe,EAAEE,OACAF,EAAEG,SACiB,WAAlBH,EAAEvB,aAAwC,IAAZuB,EAAExB,UAMzDrC,OAAwBiE,KACzB,CAACtC,EAAUxC,EAAQkB,EAAcyC,EAAenD,IA8DnD,MAAO,CACHF,iBACAyE,aA9DiB3B,MAAO4B,EAAiBC,KACzC,MAAQD,QAASE,GAAkBC,YAA4B/E,GAC/D,IAAKI,IAAkB0E,EAAe,OACtC3E,GAAkB,GAClB,MAAM6E,QAAiB9C,IAAU+C,gBAAgB,CAC7CC,MAAO9E,EACP+E,eAAgBP,EAChBE,gBACAD,eAECG,GAKMA,EAASI,OAAUJ,EAASK,QAAWL,EAASM,SAMvDvE,EAAgB,oBAChBV,EAAiB2E,IANjBvD,EAAgB,CACZ8D,KAAM,QACNH,MAAOJ,EAASI,OAAS,qCAP7B3D,EAAgB,CACZ8D,KAAM,QACNH,MAAO,gCAWfjF,GAAkB,IAuClBqF,gBApCoBxC,UACpB,GACI5C,GACAA,EAAckF,SACdlF,EAAcqF,aACdnD,GAHA,OAIAA,QAJA,IAIAA,KAAiBoD,WACnB,OACuBlE,EAAgB,CACjCxB,UACA4E,QAASxE,EAAcqF,YACvBE,eAAgBvF,EAAcwF,sBAC9BtD,kBACArC,UACA4F,OAAQvD,EAAgBoD,qBAGlBrE,EAAUjB,EAAeJ,GAAS,IAAI8F,MAAOC,qBAC7CxE,EAAkBnB,EAAckF,SACtCtE,EAAK,oCAAqC,CACtC4B,OAAQ5C,EAAQ4C,OAChBC,aAAc7C,EAAQ8C,MACtBC,YAAa/C,EAAQ+C,oBAI7BtB,EAAgB,CACZ8D,KAAM,QACNH,MAAO,2CASfhF,gBACAI,uBACAW,gBACAvB,SACAN,QACAK,eACAmB,eACAC,kBACAM,YACA7B,gBACAK,kBACAJ,YAAaiB,EACbhB,YAAakB,EACboF,YAzHgBhD,UAChB,MAAMiD,EACU,OAAZtG,QAAY,IAAZA,KAAcuG,eAAiBC,EAAMxD,SAArC,OACMhD,QADN,IACMA,OADN,EACMA,EAAcuG,cAAcC,EAAMxD,UAClC,KACV,GAAInD,EAAe,OACM8B,EAAkC,OAAC2E,QAAD,IAACA,OAAD,EAACA,EAAUG,eAE9D/F,EAAiB8F,GACjB7G,EAAML,UAiHde,UACAqG,4BAhNgC,GAiNhC9C,gBACAjD,iBACAC,sBAIK+F,EAAkCC,wBAAoC,MACnFD,EAAgCE,YAAc,kCAEvC,MAAMC,EAAqC,KAC9C,MAAMC,EAAUC,qBAAWL,GAC3B,GAAgB,OAAZI,EAAkB,MAAME,MAAM,wDAClC,OAAOF,G,4DCpPX,MAAMG,EAAUC,UAAOC,IAAV,0CAAGD,CAAH,6GAOKzH,GAASA,EAAM2H,MAAMC,WAGjCC,EAASJ,UAAOC,IAAV,yCAAGD,CAAH,mCAaNK,GARML,UAAOC,IAAV,sCAAGD,CAAH,kGAQIA,UAAOC,IAAV,uCAAGD,CAAH,+GAKqBzH,GAASA,EAAM2H,MAAMI,eAG9CC,EAAOP,UAAOC,IAAV,uCAAGD,CAAH,gCAEOQ,YAAUC,UAAUC,IAG/BC,EAAQX,UAAOC,IAAV,wCAAGD,CAAH,4CAKLY,EAAUZ,UAAOC,IAAV,0CAAGD,CAAH,oEAWPa,EAASb,UAAOC,IAAV,yCAAGD,CAAH,wGAMKzH,GAAUA,EAAMuI,SAAWvI,EAAMuI,SAAW,SAGvDC,EAAUf,UAAOC,IAAV,0CAAGD,CAAH,4GAIAzH,GAASA,EAAM2H,MAAMc,iBACfR,YAAUS,YAAYC,WAInCC,EAAenB,kBAAOoB,UAAV,+CAAGpB,CAAH,kBAIZqB,EAAQrB,UAAOC,IAAV,wCAAGD,CAAH,gEAGEzH,GAASA,EAAM2H,MAAMoB,gBACfd,YAAUS,YAAYM,QAGnCC,EAAcxB,UAAOC,IAAV,8CAAGD,CAAH,mFAIWzH,GAASA,EAAM2H,MAAMI,cACpC/H,GAASA,EAAM2H,MAAMuB,WAG5BC,EAAa1B,kBAAO2B,QAAV,6CAAG3B,CAAH,sBAIV4B,EAAc5B,UAAOC,IAAV,8CAAGD,CAAH,wBAIX6B,EAAY7B,UAAOC,IAAV,4CAAGD,CAAH,MAET8B,EAAwB9B,kBAAO+B,KAAV,wDAAG/B,CAAH,iCAEdzH,GAASA,EAAM2H,MAAMc,kBAgGnBgB,MA5DD,EAAGC,YAAW5C,YACxB,MAAMa,EAAQgC,sBACR,YAAEhD,EAAF,aAAerG,EAAf,eAA6BO,GAAmBuG,KAEhD,SAAE9D,EAAF,QAAYoB,EAAZ,oBAAqBkF,GAAwB9C,EAC7C+C,EAAaC,YAAahD,GAE1BF,EACU,OAAZtG,QAAY,IAAZA,KAAcuG,eAAiBvD,EAA/B,OAA0ChD,QAA1C,IAA0CA,OAA1C,EAA0CA,EAAcuG,cAAcvD,GAAY,KAEtF,OACI,EAACkE,EAAD,CAASkC,UAAWA,GAChB,EAAC7B,EAAD,MATO,GAUP,EAACC,EAAD,KACK+B,GAAc,EAAC7B,EAAD,aACb6B,GACE,EAAC7B,EAAD,KAAQ,GAAE+B,YAAmBC,OAAOJ,OAAyBlF,KAEjE,EAAC0D,EAAD,KACI,EAACQ,EAAD,CACI3J,UAAW4B,EACXoJ,WAAYJ,GAAchJ,EAC1BqJ,QAAS,IAAMvD,EAAYG,IAE3B,EAAC,IAAD,CAAaqD,GAAG,kCAI5B,EAAC9B,EAAD,KACI,EAACC,EAAD,CAAQC,SAAS,SACb,EAACC,EAAD,KACI,EAAC,IAAD,CAAa2B,GAAG,0BAEpB,EAACrB,EAAD,KACI,EAACsB,EAAA,EAAD,CACI9G,SAAUA,EACV+G,UAAS,OAAE/J,QAAF,IAAEA,OAAF,EAAEA,EAAcuG,kBAIrC,EAACyB,EAAD,KACI,EAACE,EAAD,KACI,EAAC,IAAD,CAAa2B,GAAG,oBAChB,EAACZ,EAAD,CAAuBe,QAAQ,0BAEnC,EAACxB,EAAD,YAAQlC,QAAR,IAAQA,OAAR,EAAQA,EAAU2D,aAGzBV,GACG,EAACZ,EAAD,KACI,EAACI,EAAD,KACI,EAACF,EAAD,CAAYqB,KAAK,QAAQC,KAAM,GAAIC,MAAO/C,EAAMuB,YAEpD,EAACI,EAAD,KAjFpB,SAAuBxC,GACnB,OAAIA,EAAM6D,KAAOX,OAAOlD,EAAM8D,kBAAoB9D,EAAM6D,IAEhD,EAAC,IAAD,CACIR,GAAG,kCACHU,OAAQ,CACJrE,OAAQuD,YAAmBC,OAAOlD,EAAM8D,mBACxCD,IAAKZ,YAAmBjD,EAAM6D,KAC9BG,SAAUhE,EAAMiE,QAK5BjE,EAAMkE,KAAqB,SAAdlE,EAAMkE,KAAkBhB,OAAOlD,EAAM8D,kBAAoB9D,EAAMkE,IAExE,EAAC,IAAD,CACIb,GAAG,kCACHU,OAAQ,CACJrE,OAAQuD,YAAmBC,OAAOlD,EAAM8D,mBACxCI,IAAKjB,YAAmBjD,EAAMkE,KAC9BF,SAAUhE,EAAMiE,QAKzBjE,EAAMf,MAwDekF,CAAcnE,O,oBChM9C,MAAMU,EAAUC,UAAOC,IAAV,yCAAGD,CAAH,MACPyD,EAASzD,UAAOC,IAAV,wCAAGD,CAAH,MAEN0D,EAAc1D,kBAAOgC,GAAV,6CAAGhC,CAAH,yBAIX2D,EAAa3D,UAAOC,IAAV,4CAAGD,CAAH,2HAIHzH,GAASA,EAAM2H,MAAMoB,gBACjBd,YAAUC,UAAUmD,OAClBpD,YAAUS,YAAYC,WAInC2C,EAAU7D,UAAOC,IAAV,yCAAGD,CAAH,2EAQP8D,EAAc9D,UAAOC,IAAV,6CAAGD,CAAH,uCAGCzH,GAASA,EAAM2H,MAAMI,cAGjCC,EAAOP,UAAOC,IAAV,sCAAGD,CAAH,mBAIJW,EAAQX,UAAOC,IAAV,uCAAGD,CAAH,wDAGQQ,YAAUS,YAAYM,QAGnCO,EAAwB9B,kBAAO+B,KAAV,uDAAG/B,CAAH,iDAGdzH,GAASA,EAAM2H,MAAMc,kBAG5B+C,EAAW/D,UAAOC,IAAV,0CAAGD,CAAH,oDAgDCgE,MArCF,EAAGC,SAAQC,cACpB,MAAM,cAAExL,GAAkBiH,IAC1B,OAAKjH,GAAkBuL,EAGnB,EAAC,EAAD,KACI,EAACJ,EAAD,KACI,EAACC,EAAD,OAEJ,EAACH,EAAD,KACI,EAAC,EAAD,KACKO,EACG,EAACH,EAAD,KACI,EAAC,IAAD,CAAarB,GAAG,6BAChB,EAAC,EAAD,CAAuBG,QAAQ,mCAGnC,EAACkB,EAAD,KACI,EAAC,IAAD,CAAarB,GAAG,6BAChB,EAAC,EAAD,CAAuBG,QAAQ,oCAI3C,EAAC,EAAD,KACI,EAAC,IAAD,CAAaH,GAAG,8BAChB,EAAC,EAAD,CAAuBG,QAAQ,qCAGvC,EAACY,EAAD,KACKQ,EAAOE,KAAI9E,GACR,EAACqE,EAAD,CAAaU,IAAM,GAAE/E,EAAMxD,WAAYwD,MAAOA,QA5BxB,M,oFCvD1C,MAAMgF,GAAcrE,UAAOC,IAAV,uDAAGD,CAAH,wDAMXsE,GAAiBtE,UAAOC,IAAV,0DAAGD,CAAH,4DAMduE,GAAYvE,UAAOC,IAAV,qDAAGD,CAAH,6CAKTwE,GAAcxE,UAAOC,IAAV,uDAAGD,CAAH,wBAIXyE,GAASzE,UAAOC,IAAV,kDAAGD,CAAH,0DAEKQ,YAAUC,UAAUiE,MACxBnM,GAASA,EAAM2H,MAAMc,iBACfR,YAAUS,YAAYM,QAGnCoD,GAAc3E,UAAOC,IAAV,uDAAGD,CAAH,kCAEEQ,YAAUS,YAAYM,QAGnCqD,GAAS5E,UAAOC,IAAV,kDAAGD,CAAH,sCAKN6E,GAAc7E,UAAO8E,KAAV,uDAAG9E,CAAH,iCACJzH,GAASA,EAAM2H,MAAMc,kBAsKnB+D,OAnJSxM,IACpB,MAAM2H,EAAQgC,sBACR,OACFpJ,EADE,qBAEFY,EAFE,cAGF+C,EAHE,kBAIFhD,GACAkG,KACE,EAACqF,EAAD,EAAaC,GAAiB1N,wBAA8BqG,GAC5DsH,EAAWC,gBAEX,sBAAEC,EAAF,yBAAyBC,EAAzB,SAAmDC,GAAa/M,EAEhEgN,EAA8C,GAEhD7L,IACAA,EAAqB8L,SAAQtM,IACzBqM,EAAqBpO,KAAK,CAAEsH,KAAM,QAASvF,eAE/CqM,EAAqBpO,KAAK,CAAEsH,KAAM,eAEtC8G,EAAqBpO,KAAK,CAAEsH,KAAM,cAElC,MAAMgH,EAAuBC,IAGzB,GAFAL,EAAyBK,GACzBjM,EAAkBiM,EAAOxM,SACrBwM,EAAOxM,QAAS,CAChB,MAAM,QAAE4E,GAAYG,YAA4ByH,EAAOxM,SACvDoM,EAAS,UAAWxH,EAAS,CAAE6H,gBAAgB,MA8BvD,OANAC,MAAa,KACLL,EAAqBhI,OAAS,GAAsC,cAAjCgI,EAAqB,GAAG9G,MAC3DgH,EAAoBF,EAAqB,MAE9C,KAGC,GAAC,SAAD,CACIM,SAAWC,IA5BM5M,MACA,eADAA,EA6BG4M,GA5BZrH,KACJ3F,IACAmM,GAAc,GACdC,EACIa,aAAuB,CACnBtH,KAAM,cACN3F,OAAQA,EACRgD,OAAQW,EACRuJ,YAAY,OAKxBP,EAAoBvM,GACpB+L,OAAcrH,KAgBdqI,YAAU,EACVC,MAAOd,EACPe,aAAa,EACbC,QAASb,EACTc,SAAS,OACTC,kBAAoBZ,IAChB,OAAQA,EAAOjH,MACX,IAAK,QAAS,CACV,IAAKiH,EAAOxM,QAAS,OAAO,KAC5B,MAAM,OAAE4C,EAAF,iBAAUyK,GAAqBb,EAAOxM,QAC5C,OACI,GAAC0L,GAAD,KACI,GAACP,GAAD,KACI,GAAC,WAAD,CAAUrB,KAAM,GAAIlH,OAAQA,KAEhC,GAACwI,GAAD,KACI,GAACK,GAAD,KACI,GAAC,IAAD,CAAiBzL,QAASwM,EAAOxM,UACjC,GAAC2L,GAAD,KACoC,WAA/Ba,EAAOxM,QAAQ+C,YACVyJ,EAAOxM,QAAQ+C,YACf,KAGd,GAACwI,GAAD,KACI,GAAC,IAAD,KAAoB8B,GAAsC,IAC1D,GAAChC,GAAD,KAAYzI,GAFhB,UAGI,GAAC0I,GAAD,KACI,GAAC,IAAD,CAAWzF,OAAQwH,EAAkBzK,OAAQA,QAOrE,IAAK,YACD,OACI,GAAC8I,GAAD,KACI,GAACP,GAAD,KACI,GAAC,OAAD,CAAMtB,KAAK,OAAOC,KAAM,GAAIC,MAAO/C,EAAMoB,kBAE7C,GAACgD,GAAD,KACI,GAAC,IAAD,CACI5B,GAAG,mCACHU,OAAQ,CACJtH,OAAM,OAAEW,QAAF,IAAEA,OAAF,EAAEA,EAAe+J,mBAM/C,IAAK,YACD,OACI,GAAC5B,GAAD,KACI,GAACP,GAAD,KACI,GAAC,OAAD,CAAMtB,KAAK,YAAYC,KAAM,GAAIC,MAAO/C,EAAMoB,kBAElD,GAACgD,GAAD,KACI,GAAC,IAAD,CACI5B,GAAG,oCACHU,OAAQ,CACJtH,OAAM,OAAEW,QAAF,IAAEA,OAAF,EAAEA,EAAe+J,mBAM/C,QACI,OAAO,OAGnBC,kBAAmD,IAAhClB,EAAqBhI,OACxCiF,WAA4C,IAAhC+C,EAAqBhI,OACjCmJ,YACI,GAAC,IAAD,CACIhE,GAAG,qCACHU,OAAQ,CAAEtH,OAAM,OAAEW,QAAF,IAAEA,OAAF,EAAEA,EAAe+J,iBAGzCxB,WAAYA,K,uECxMxB,MAAMjF,GAAUC,UAAOC,IAAV,kDAAGD,CAAH,yDAMPe,GAAUf,UAAOC,IAAV,kDAAGD,CAAH,uEACAzH,GAASA,EAAM2H,MAAMc,iBAEfR,YAAUS,YAAYM,OACxBf,YAAUC,UAAUkG,OAG/BC,GAAc5G,UAAOC,IAAV,sDAAGD,CAAH,+DAMX6G,GAAQ7G,UAAOC,IAAV,gDAAGD,CAAH,qDAGQQ,YAAUS,YAAYM,QAGnCO,GAAwB9B,kBAAO+B,KAAV,gEAAG/B,CAAH,uBAIrB8G,GAAc9G,kBAAO6G,IAAV,sDAAG7G,CAAH,qBAIX+G,GAAY/G,UAAOC,IAAV,oDAAGD,CAAH,MAETgH,GAAoBhH,kBAAOiH,eAAV,4DAAGjH,CAAH,yBAIjBkH,GAAgBlH,UAAOC,IAAV,wDAAGD,CAAH,qHAKSzH,GAASA,EAAM2H,MAAMI,cAI3C6G,GAAYnH,UAAOC,IAAV,oDAAGD,CAAH,qHAGEQ,YAAUC,UAAU2G,IAClB5G,YAAUS,YAAYM,QACvBhJ,GAASA,EAAM2H,MAAMmH,UAKjCC,GAAMtH,UAAOC,IAAV,8CAAGD,CAAH,oBAoMMuH,OAtLgB,KAAM,YACjC,MAAM,eACFnO,EADE,OAEFN,EAFE,cAGFuB,EAHE,aAIFwD,EAJE,cAKFvE,EALE,gBAMFP,EANE,cAOF0D,GACAkD,KACE,EAACyF,EAAD,EAAwBC,GAA4B9N,sBACpD,SAAEiQ,EAAF,MAAYC,EAAZ,OAAmBC,EAAnB,UAA2BC,EAA3B,SAAsCrC,GAAasC,aAAmB,CACxEC,KAAM,aAGJC,EAAsEC,uBACnEC,GAAcR,EAASQ,IAC5B,CAACR,KAGC,QAAE1J,EAAF,WAAWC,GAAe0J,IAE1BQ,EAAqC,OAAb3O,QAAa,IAAbA,KAAe2O,sBACvC,CACIC,eAAc,OAAE5O,QAAF,IAAEA,GAAF,UAAEA,EAAe2O,6BAAjB,aAAE,EAAsCE,KACtDF,sBAAqB,OAAE3O,QAAF,IAAEA,GAAF,UAAEA,EAAe2O,6BAAjB,aAAE,EAAsCG,YAC7DC,WAAU,OAAE/O,QAAF,IAAEA,OAAF,EAAEA,EAAe2D,SAE/B,GAEAqL,GAAcX,EAAUY,QAE9B,OACI,GAAC,GAAD,KACI,GAAC,GAAD,KACI,GAAC,IAAD,CACI7F,GAAG,qCACHU,OAAQ,CAAEtH,OAAM,OAAExC,QAAF,IAAEA,OAAF,EAAEA,EAAe2D,YAGzC,GAAC2J,GAAD,KACI,GAACU,GAAD,KACI,GAACR,GAAD,KACI,GAACC,GAAD,KACI,GAAC,IAAD,CAAarE,GAAG,mCAEpB,GAAC,GAAD,CAAuBG,QAAQ,kDAEnC,GAAC,GAAD,CACIuC,sBAAuBA,EACvBC,yBAA0BA,EAC1BC,SAAUA,KAGlB,GAACgC,GAAD,KACI,GAAC,QAAD,CACIkB,MACI,GAAC3B,GAAD,KACI,GAAC,IAAD,CAAanE,GAAG,kCAChB,GAAC,GAAD,CAAuBG,QAAQ,kDAGvC4F,QAAQ,QACRN,KAAK,UACLO,SAAUZ,EAAc,CACpBa,SAAU,yCACVC,SAAU1C,IACN,GAAoC,eAAX,OAArBd,QAAqB,IAArBA,OAAA,EAAAA,EAAuB3G,OAAwBhC,IAC1CoM,KAAiBD,SAAS1C,EAAOzJ,GAClC,MAAO,2CAKvBqM,SAA0C,eAAX,OAArB1D,QAAqB,IAArBA,OAAA,EAAAA,EAAuB3G,MACjCzD,MAAO0M,EAAO5J,QAAU,aAAUF,EAClCmL,WAAY,GAAC,IAAD,CAAYzK,MAAOoJ,EAAO5J,YAGzC/E,GAAmBA,IAAoB+E,GACpC,GAACqJ,GAAD,KACKrO,GACG,GAACkO,GAAD,CACIgC,OAAQ,GACRC,YAAgD,KAAnC,UAAAnQ,EAAOqE,gBAAP,eAAiB+L,eAAsB,EAAI,IAGhE,GAAC,IAAD,CAAaxG,GAAG,uCAId,OAAbpJ,QAAa,IAAbA,OAAA,EAAAA,EAAe2O,wBACZ,GAACX,GAAD,KACI,GAAC,QAAD,CACImB,QAAQ,QACRD,MACI,GAAC3B,GAAD,KACI,GAAC,IAAD,CACInE,GAAG,0BACHU,OAAQ6E,IAEZ,GAAC,GAAD,CACIpF,QACI,GAAC,IAAD,CACIH,GAAG,2CACHU,OAAQ6E,OAM5BE,KAAK,aACLO,SAAUZ,EAAc,CACpBa,SAAuB,OAAbrP,QAAa,IAAbA,GAAA,UAAAA,EAAe2O,6BAAf,SAAsCU,SAC5C,GAAC,IAAD,CACIjG,GAAG,mCACHU,OAAQ6E,SAEZrK,EACJgL,SAAU1C,IACN,IAAIiD,GAAQ,EACD,QAAPjD,IACmD,SAAlC,OAAb5M,QAAa,IAAbA,GAAA,UAAAA,EAAe2O,6BAAf,eAAsCxJ,MACtC0K,EAAQC,aAAWlD,GAE4B,YAAlC,OAAb5M,QAAa,IAAbA,GAAA,UAAAA,EAAe2O,6BAAf,eAAsCxJ,QAEtC0K,EAAQE,aAAUnD,KAG1B,IAAKiD,EACD,OACI,GAAC,IAAD,CACIzG,GAAG,kCACHU,OAAQ6E,OAM5BjN,MAAO0M,EAAO3J,WAAa,aAAUH,EACrCmL,WAAY,GAAC,IAAD,CAAYzK,MAAOoJ,EAAO3J,iBAKrDqH,GACG,GAAC8B,GAAD,OACOnO,GAAmBA,IAAoB+E,IACtCsH,EAAsBlM,SAClB,GAAC,SAAD,CACI1B,UAAW4B,EACXoJ,WAAYpJ,EACZqJ,QAAS,KACD2C,EAAsBlM,SACtBmB,EAAc+K,EAAsBlM,SAAS,KAIrD,GAAC,IAAD,CAAawJ,GAAG,oCAGzB3J,GAAmBA,IAAoB+E,GACN,eAAX,OAArBsH,QAAqB,IAArBA,OAAA,EAAAA,EAAuB3G,QACvB,GAAC,SAAD,CACIjH,UAAW4B,EACXqJ,QAAS,KACD3E,GACAD,EAAaC,EAASC,IAG9ByE,WAAY8F,GAAclP,GAE1B,GAAC,IAAD,CAAasJ,GAAG,kC,qBC5P5C,MAAM3C,GAAUC,UAAOC,IAAV,oDAAGD,CAAH,yDAMP+G,GAAY/G,UAAOC,IAAV,sDAAGD,CAAH,6BACEQ,YAAUC,UAAUiE,MACxBnM,GAASA,EAAM2H,MAAMc,kBAG5BK,GAAQrB,UAAOC,IAAV,kDAAGD,CAAH,6DAEMQ,YAAUC,UAAUkG,OACxBpO,GAASA,EAAM2H,MAAMoB,gBACfd,YAAUS,YAAYM,QAGnC2F,GAAgBlH,UAAOC,IAAV,0DAAGD,CAAH,qHAKSzH,GAASA,EAAM2H,MAAMI,cAI3CgH,GAAMtH,UAAOC,IAAV,gDAAGD,CAAH,kBAIHsJ,GAAUtJ,UAAOC,IAAV,oDAAGD,CAAH,MA2CEuJ,OAzCkB,KAAM,MACnC,MAAM,QACFrQ,EADE,eAEFE,EAFE,cAGFE,EAHE,aAIFT,EAJE,gBAKF6F,GACAiB,IACJ,IAAKrG,EAAe,OAAO,KAC3B,MAAM,SAAEuC,EAAF,YAAY8C,GAAgBrF,EAClC,IAAKuC,EAAU,OAAO,KACtB,MAAM2N,GACU,OAAZ3Q,QAAY,IAAZA,GAAA,UAAAA,EAAcuG,cAAcvD,UAA5B,eAAuCyD,cAAehG,EAAcuC,SACxE,OACI,GAAC,GAAD,KACI,GAAC,GAAD,KACI,GAAC,GAAD,KACI,GAAC,IAAD,CAAa6G,GAAG,2BAEpB,GAAC,GAAD,KACI,GAAC,IAAD,CAAiBxJ,QAASA,MAGlC,GAAC,GAAD,KACI,GAAC,GAAD,KACI,GAAC,IAAD,CAAawJ,GAAG,sBAAsBU,OAAQ,CAAEoG,mBAEpD,GAAC,GAAD,KACI,GAACF,GAAD,KAAU3K,KAIlB,GAAC,GAAD,KACI,GAAC,SAAD,CAAQnH,UAAW4B,EAAgBqJ,QAAS/D,GACxC,GAAC,IAAD,CAAagE,GAAG,2C,qBChEpC,MAAM3C,GAAUC,UAAOC,IAAV,kDAAGD,CAAH,2FAIuBQ,YAAUiJ,YAAYC,IAKpDC,GAAa3J,kBAAO4J,QAAV,qDAAG5J,CAAH,uBAKV6J,GAAS7J,UAAOC,IAAV,iDAAGD,CAAH,2GAKmBzH,GAASA,EAAM2H,MAAMI,cAO9CwJ,GAAO9J,UAAOC,IAAV,+CAAGD,CAAH,yFACSzH,GACXA,EAAMwR,OAASvJ,YAAUS,YAAYC,UAAYV,YAAUS,YAAYM,SAClEhJ,GACLA,EAAMwR,OAASxR,GAASA,EAAM2H,MAAM8J,WAAazR,EAAM2H,MAAMc,iBAEpDR,YAAUC,UAAUkG,OAK/BpG,GAAOP,UAAOC,IAAV,+CAAGD,CAAH,0BAKJW,GAAQX,UAAOC,IAAV,gDAAGD,CAAH,mDAMLiK,GAASjK,UAAOC,IAAV,iDAAGD,CAAH,kGAMCzH,GAASA,EAAM2H,MAAMI,cA4CnB4J,OAzCO,KAClB,MAAM,QACFhR,EADE,cAEFI,EAFE,aAGFT,EAHE,aAIFmB,EAJE,eAKFR,GACAmG,IACJ,OAAKrG,EAGD,GAAC,GAAD,KACI,GAACqQ,GAAD,KACI,GAACE,GAAD,KACI,GAAC,GAAD,KACI,GAACC,GAAD,CAAMC,OAAyB,sBAAjB/P,GACV,GAAC,IAAD,CAAa0I,GAAG,sCAGxB,GAACuH,GAAD,KACI,GAAC,OAAD,CAAMlH,KAAK,cAAcE,MAAOkH,SAAOnJ,mBAE3C,GAAC,GAAD,KACI,GAAC8I,GAAD,CAAMC,OAAyB,qBAAjB/P,GACV,GAAC,IAAD,CAAa0I,GAAG,qCAIV,sBAAjB1I,GAAwC,GAACoQ,GAAD,MACvB,qBAAjBpQ,GAAuC,GAACqQ,GAAD,OAE5C,GAACC,GAAA,EAAD,CACIhR,cAAeA,EACfJ,QAASA,EACTL,aAAcA,EACdW,eAAgBA,KA3BD,M,qBC3D/B,MAAMuG,GAAUC,UAAOC,IAAV,2CAAGD,CAAH,8EAGuBQ,YAAUiJ,YAAYC,IAKpDa,GAAWvK,UAAOC,IAAV,4CAAGD,CAAH,2GASR6J,GAAS7J,UAAOC,IAAV,0CAAGD,CAAH,2BAIN2D,GAAa3D,UAAOC,IAAV,8CAAGD,CAAH,iFAICQ,YAAUC,UAAUC,IAG/B8J,GAAOxK,UAAOC,IAAV,wCAAGD,CAAH,sDAMJ0B,GAAa1B,kBAAO2B,QAAV,8CAAG3B,CAAH,oBAIVO,GAAOP,UAAOC,IAAV,wCAAGD,CAAH,sCAKJW,GAAQX,UAAOC,IAAV,yCAAGD,CAAH,yEAIMQ,YAAUC,UAAUkG,OAG/B8D,GAAiBzK,kBAAO0K,YAAV,kDAAG1K,CAAH,yBAId2K,GAAiB3K,UAAO4K,IAAV,kDAAG5K,CAAH,qCAKd6K,GAAa7K,kBAAOwK,IAAV,8CAAGxK,CAAH,yBAuED8K,OAnEA,KACX,MAAM,YACFnS,EADE,YAEFC,EAFE,cAGFF,EAHE,cAIFY,EAJE,MAKFd,EALE,4BAMF+G,EANE,QAOFrG,GACAyG,KACE,UAAEoL,GAAclL,qBAAWmL,KAMjC,GAJAC,mBAAQ,KACAF,GAAWA,EAAU,4BAAwBnN,EAAW,GAAC,IAAD,SAC7D,CAACmN,KAECrS,EAAe,OAAO,KAC3B,MAAMwS,GAAyB,OAAXvS,QAAW,IAAXA,OAAA,EAAAA,EAAa4E,SAAb,OAAsB3E,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAa2E,QACvD,OACI,GAAC,GAAD,MACMjE,GACE,sBACM4R,GACE,GAACX,GAAD,KACI,GAAC,IAAD,CAAa7H,GAAG,2BAGvBwI,EAAc,GACX,qBACI,GAAC,GAAD,KACI,GAAC,GAAD,KACI,GAAC,GAAD,KACI,GAACT,GAAD,CAAgBzH,KAAM,GAAIlH,OAAQ5C,EAAQ4C,SAC1C,GAAC+O,GAAD,KAAanS,EAAcyK,kBAC3B,GAACqH,GAAD,KAAO9R,EAAc4K,MACrB,GAAC,GAAD,CAAYP,KAAK,qBACjB,GAAC4H,GAAD,CACIQ,IAAM,GAAE/P,IAAUgQ,6BAA6B1S,EAAcuE,gBAEjE,GAACuN,GAAD,KAAO9R,EAAcuE,WAEvBzE,EAAMd,WACJ,GAAC,GAAD,KACI,GAAC,IAAD,CACIF,UAAWgB,EAAMhB,UACjB6T,gBAAiB9L,EACjBrH,QAASM,EAAMnB,UAAUa,QACzBsQ,MACI,GAAC,IAAD,CAAa9F,GAAG,qCAO5B,OAAX/J,QAAW,IAAXA,OAAA,EAAAA,EAAa4E,QAAS,GAAK,GAAC,EAAD,CAAM0G,OAAQtL,EAAauL,SAAO,KAClD,OAAXtL,QAAW,IAAXA,OAAA,EAAAA,EAAa2E,QAAS,GAAK,GAAC,EAAD,CAAM0G,OAAQrL,MAKzDU,GAAiB,GAAC,GAAD,MAClB,GAAC,IAAD,Q,kmBCjIZ,MAAMyG,GAAUC,UAAOC,IAAV,2CAAGD,CAAH,oDAMPsL,GAAqB/S,IACvB,MAAM,gBAAEE,GAAoBF,EACtBgT,EAAyBjT,EAAU,GAAD,MAAMC,GAAN,IAAaE,qBAErD,OACI,GAAC+G,EAAgCgM,SAAjC,CAA0CtF,MAAOqF,GAC7C,GAAC,GAAD,KACI,GAAC,GAAD,SAwBDE,OAlBK,KAChB,MAAMlT,EAAQwC,aAAYC,IAAS,CAC/BvC,gBAAiBuC,EAAMO,OAAO9C,gBAC9BK,OAAQkC,EAAMC,MAAMnC,OACpBH,YAAaqC,EAAMO,OAAOE,WAAWI,SAASlD,YAC9CC,YAAaoC,EAAMO,OAAOE,WAAWI,SAASjD,YAC9CF,cAAesC,EAAMO,OAAOE,WAAWI,SAASnD,cAChDK,gBAAiBiC,EAAMO,OAAOE,WAAWI,SAAS9C,gBAClDF,aAAcmC,EAAMO,OAAOE,WAAWI,SAAShD,kBAG7C,gBAAEJ,GAAoBF,EAC5B,MAA+B,WAA3BE,EAAgB8F,OACT,GAAC,IAAD,CAAcmN,MAAM,kBAAkBxS,QAAST,IAEnD,GAAC6S,GAAD,eAAuB/S,EAAvB,CAA8BE,gBAAiBA,MC3C3CqS,e","file":"static/chunks/pages/accounts/coinmarket/exchange/offers-d0cb892106ec7335d761.js","sourcesContent":["\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/accounts/coinmarket/exchange/offers\",\n        function () {\n          return require(\"private-next-pages/accounts/coinmarket/exchange/offers/index.tsx\");\n        }\n      ]);\n    ","import { useEffect, useState } from 'react';\n\nexport interface Timer {\n    timeSpend: {\n        seconds: number;\n    };\n    resetCount: number;\n    isStopped: boolean;\n    isLoading: boolean;\n    stop: () => void;\n    reset: () => void;\n    loading: () => void;\n}\n\nexport const useTimer = (): Timer => {\n    const [timeSpend, setTimeSpend] = useState(0);\n    const [isLoading, setIsLoading] = useState(false);\n    const [isStopped, setIsStopped] = useState(false);\n    const [resetCount, setResetCount] = useState(0);\n\n    useEffect(() => {\n        const timeout = setTimeout(() => {\n            setTimeSpend(timeSpend + 1000);\n        }, 1000);\n\n        if (isStopped || isLoading) {\n            clearTimeout(timeout);\n        }\n\n        return () => {\n            clearTimeout(timeout);\n        };\n    });\n\n    const reset = () => {\n        setIsLoading(false);\n        setResetCount(resetCount + 1);\n        setTimeSpend(0);\n        setIsStopped(false);\n    };\n\n    const stop = () => {\n        setIsStopped(true);\n    };\n\n    const loading = () => {\n        setTimeSpend(0);\n        setIsLoading(true);\n        setIsStopped(false);\n    };\n\n    return {\n        timeSpend: {\n            seconds: timeSpend / 1000,\n        },\n        resetCount,\n        isStopped,\n        isLoading,\n        stop,\n        reset,\n        loading,\n    };\n};\n","import { createContext, useContext, useState, useEffect } from 'react';\nimport invityAPI from '@suite-services/invityAPI';\nimport { useActions, useSelector, useDevice } from '@suite-hooks';\nimport { useTimer } from '@suite-hooks/useTimeInterval';\nimport { ExchangeCoinInfo, ExchangeTrade } from 'invity-api';\nimport * as coinmarketCommonActions from '@wallet-actions/coinmarket/coinmarketCommonActions';\nimport * as coinmarketExchangeActions from '@wallet-actions/coinmarketExchangeActions';\nimport * as routerActions from '@suite-actions/routerActions';\nimport { Account } from '@wallet-types';\nimport { Props, ContextValues, ExchangeStep } from '@wallet-types/coinmarketExchangeOffers';\nimport * as notificationActions from '@suite-actions/notificationActions';\nimport { splitToFixedFloatQuotes } from '@wallet-utils/coinmarket/exchangeUtils';\nimport networks from '@wallet-config/networks';\nimport { getUnusedAddressFromAccount } from '@wallet-utils/coinmarket/coinmarketUtils';\n\nconst getReceiveAccountSymbol = (\n    symbol?: string,\n    exchangeCoinInfo?: ExchangeCoinInfo[],\n): string | undefined => {\n    if (symbol) {\n        // check if the symbol is ETH token, in that case use ETH network as receiving account\n        const coinInfo = exchangeCoinInfo?.find(ci => ci.ticker === symbol);\n        if (coinInfo?.token === 'ETH') {\n            return 'eth';\n        }\n        return symbol.toLowerCase();\n    }\n\n    return symbol;\n};\n\nexport const useOffers = (props: Props) => {\n    const timer = useTimer();\n    const REFETCH_INTERVAL_IN_SECONDS = 30;\n    const {\n        selectedAccount,\n        quotesRequest,\n        fixedQuotes,\n        floatQuotes,\n        exchangeInfo,\n        device,\n        addressVerified,\n    } = props;\n\n    const { isLocked } = useDevice();\n    const { account, network } = selectedAccount;\n    const [callInProgress, setCallInProgress] = useState<boolean>(isLocked() || false);\n    const [selectedQuote, setSelectedQuote] = useState<ExchangeTrade>();\n    const [receiveAccount, setReceiveAccount] = useState<Account | undefined>();\n    const [suiteReceiveAccounts, setSuiteReceiveAccounts] = useState<\n        ContextValues['suiteReceiveAccounts']\n    >();\n    const [innerFixedQuotes, setInnerFixedQuotes] = useState<ExchangeTrade[]>(fixedQuotes);\n    const [innerFloatQuotes, setInnerFloatQuotes] = useState<ExchangeTrade[]>(floatQuotes);\n    const [exchangeStep, setExchangeStep] = useState<ExchangeStep>('RECEIVING_ADDRESS');\n    const { goto } = useActions({ goto: routerActions.goto });\n    const { verifyAddress } = useActions({ verifyAddress: coinmarketCommonActions.verifyAddress });\n    const {\n        saveTrade,\n        openCoinmarketExchangeConfirmModal,\n        saveTransactionId,\n        signTransaction,\n        addNotification,\n    } = useActions({\n        saveTrade: coinmarketExchangeActions.saveTrade,\n        openCoinmarketExchangeConfirmModal:\n            coinmarketExchangeActions.openCoinmarketExchangeConfirmModal,\n        saveTransactionId: coinmarketExchangeActions.saveTransactionId,\n        signTransaction: coinmarketCommonActions.signTransaction,\n        addNotification: notificationActions.addToast,\n    });\n\n    const invityAPIUrl = useSelector(state => state.suite.settings.debug.invityAPIUrl);\n    if (invityAPIUrl) {\n        invityAPI.setInvityAPIServer(invityAPIUrl);\n    }\n\n    const accounts = useSelector(state => state.wallet.accounts);\n    const transactionInfo = useSelector(state => state.wallet.coinmarket.transaction.composed);\n    const exchangeCoinInfo = useSelector(\n        state => state.wallet.coinmarket.exchange.exchangeCoinInfo,\n    );\n\n    useEffect(() => {\n        if (!quotesRequest) {\n            goto('wallet-coinmarket-exchange', {\n                symbol: account.symbol,\n                accountIndex: account.index,\n                accountType: account.accountType,\n            });\n            return;\n        }\n\n        const getQuotes = async () => {\n            if (!selectedQuote) {\n                invityAPI.createInvityAPIKey(account.descriptor);\n                setCallInProgress(true);\n                const allQuotes = await invityAPI.getExchangeQuotes(quotesRequest);\n                setCallInProgress(false);\n                const [fixedQuotes, floatQuotes] = splitToFixedFloatQuotes(allQuotes, exchangeInfo);\n                setInnerFixedQuotes(fixedQuotes);\n                setInnerFloatQuotes(floatQuotes);\n                timer.reset();\n            }\n        };\n\n        if (!timer.isLoading && !timer.isStopped) {\n            if (timer.resetCount >= 40) {\n                timer.stop();\n            }\n\n            if (timer.timeSpend.seconds === REFETCH_INTERVAL_IN_SECONDS) {\n                timer.loading();\n                getQuotes();\n            }\n        }\n    });\n\n    const selectQuote = async (quote: ExchangeTrade) => {\n        const provider =\n            exchangeInfo?.providerInfos && quote.exchange\n                ? exchangeInfo?.providerInfos[quote.exchange]\n                : null;\n        if (quotesRequest) {\n            const result = await openCoinmarketExchangeConfirmModal(provider?.companyName);\n            if (result) {\n                setSelectedQuote(quote);\n                timer.stop();\n            }\n        }\n    };\n\n    const receiveSymbol = getReceiveAccountSymbol(selectedQuote?.receive, exchangeCoinInfo);\n\n    useEffect(() => {\n        if (selectedQuote && exchangeStep === 'RECEIVING_ADDRESS') {\n            const unavailableCapabilities =\n                device?.features && device?.unavailableCapabilities\n                    ? device.unavailableCapabilities\n                    : {};\n            // is the symbol supported by the suite and the device natively\n            const receiveNetworks = networks.filter(\n                n => n.symbol === receiveSymbol && !unavailableCapabilities[n.symbol],\n            );\n            if (receiveNetworks.length > 0) {\n                // get accounts of the current symbol belonging to the current device\n                setSuiteReceiveAccounts(\n                    accounts.filter(\n                        a =>\n                            a.deviceState === device?.state &&\n                            a.symbol === receiveSymbol &&\n                            (!a.empty ||\n                                a.visible ||\n                                (a.accountType === 'normal' && a.index === 0)),\n                    ),\n                );\n                return;\n            }\n        }\n        setSuiteReceiveAccounts(undefined);\n    }, [accounts, device, exchangeStep, receiveSymbol, selectedQuote]);\n\n    const confirmTrade = async (address: string, extraField?: string) => {\n        const { address: refundAddress } = getUnusedAddressFromAccount(account);\n        if (!selectedQuote || !refundAddress) return;\n        setCallInProgress(true);\n        const response = await invityAPI.doExchangeTrade({\n            trade: selectedQuote,\n            receiveAddress: address,\n            refundAddress,\n            extraField,\n        });\n        if (!response) {\n            addNotification({\n                type: 'error',\n                error: 'No response from the server',\n            });\n        } else if (response.error || !response.status || !response.orderId) {\n            addNotification({\n                type: 'error',\n                error: response.error || 'Invalid response from the server',\n            });\n        } else {\n            setExchangeStep('SEND_TRANSACTION');\n            setSelectedQuote(response);\n        }\n        setCallInProgress(false);\n    };\n\n    const sendTransaction = async () => {\n        if (\n            selectedQuote &&\n            selectedQuote.orderId &&\n            selectedQuote.sendAddress &&\n            transactionInfo &&\n            transactionInfo?.totalSpent\n        ) {\n            const result = await signTransaction({\n                account,\n                address: selectedQuote.sendAddress,\n                destinationTag: selectedQuote.partnerPaymentExtraId,\n                transactionInfo,\n                network,\n                amount: transactionInfo.totalSpent,\n            });\n            if (result) {\n                await saveTrade(selectedQuote, account, new Date().toISOString());\n                await saveTransactionId(selectedQuote.orderId);\n                goto('wallet-coinmarket-exchange-detail', {\n                    symbol: account.symbol,\n                    accountIndex: account.index,\n                    accountType: account.accountType,\n                });\n            }\n        } else {\n            addNotification({\n                type: 'error',\n                error: 'Cannot send transaction, missing data',\n            });\n        }\n    };\n\n    return {\n        callInProgress,\n        confirmTrade,\n        sendTransaction,\n        selectedQuote,\n        suiteReceiveAccounts,\n        verifyAddress,\n        device,\n        timer,\n        exchangeInfo,\n        exchangeStep,\n        setExchangeStep,\n        saveTrade,\n        quotesRequest,\n        addressVerified,\n        fixedQuotes: innerFixedQuotes,\n        floatQuotes: innerFloatQuotes,\n        selectQuote,\n        account,\n        REFETCH_INTERVAL_IN_SECONDS,\n        receiveSymbol,\n        receiveAccount,\n        setReceiveAccount,\n    };\n};\n\nexport const CoinmarketExchangeOffersContext = createContext<ContextValues | null>(null);\nCoinmarketExchangeOffersContext.displayName = 'CoinmarketExchangeOffersContext';\n\nexport const useCoinmarketExchangeOffersContext = () => {\n    const context = useContext(CoinmarketExchangeOffersContext);\n    if (context === null) throw Error('CoinmarketExchangeOffersContext used without Context');\n    return context;\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button, variables, Icon, useTheme } from '@trezor/components';\nimport { QuestionTooltip, Translation } from '@suite-components';\nimport { ExchangeTrade } from 'invity-api';\nimport CoinmarketExchangeProviderInfo from '@wallet-components/CoinmarketExchangeProviderInfo';\nimport { formatCryptoAmount } from '@wallet-utils/coinmarket/coinmarketUtils';\nimport { isQuoteError } from '@wallet-utils/coinmarket/exchangeUtils';\nimport { useCoinmarketExchangeOffersContext } from '@wallet-hooks/useCoinmarketExchangeOffers';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    border-radius: 6px;\n    flex: 1;\n    width: 100%;\n    min-height: 150px;\n    background: ${props => props.theme.BG_WHITE};\n`;\n\nconst TagRow = styled.div`\n    display: flex;\n    min-height: 30px;\n`;\n\nconst Tag = styled.div`\n    margin-top: 10px;\n    height: 35px;\n    margin-left: -20px;\n    border: 1px solid tan;\n    text-transform: uppercase;\n`;\n\nconst Main = styled.div`\n    display: flex;\n    margin: 0 30px;\n    justify-content: space-between;\n    padding-bottom: 20px;\n    border-bottom: 1px solid ${props => props.theme.STROKE_GREY};\n`;\n\nconst Left = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.H2};\n`;\n\nconst Right = styled.div`\n    display: flex;\n    justify-content: flex-end;\n`;\n\nconst Details = styled.div`\n    display: flex;\n    min-height: 20px;\n    flex-wrap: wrap;\n    padding: 10px 30px;\n`;\n\ninterface ColumnProps {\n    maxWidth?: string;\n}\n\nconst Column = styled.div<ColumnProps>`\n    display: flex;\n    padding: 10px 0;\n    flex: 1;\n    flex-direction: column;\n    justify-content: flex-start;\n    max-width: ${props => (props.maxWidth ? props.maxWidth : '100%')};\n`;\n\nconst Heading = styled.div`\n    display: flex;\n    text-transform: uppercase;\n    align-items: center;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n    padding-bottom: 9px;\n`;\n\nconst StyledButton = styled(Button)`\n    width: 180px;\n`;\n\nconst Value = styled.div`\n    display: flex;\n    align-items: center;\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst ErrorFooter = styled.div`\n    display: flex;\n    margin: 0 30px;\n    padding: 20px 0;\n    border-top: 1px solid ${props => props.theme.STROKE_GREY};\n    color: ${props => props.theme.TYPE_RED};\n`;\n\nconst StyledIcon = styled(Icon)`\n    padding-top: 8px;\n`;\n\nconst IconWrapper = styled.div`\n    padding-right: 3px;\n`;\n\nconst ErrorText = styled.div``;\n\nconst StyledQuestionTooltip = styled(QuestionTooltip)`\n    padding-left: 4px;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\ninterface Props {\n    className?: string;\n    quote: ExchangeTrade;\n}\n\nfunction getQuoteError(quote: ExchangeTrade) {\n    if (quote.min && Number(quote.sendStringAmount) < quote.min) {\n        return (\n            <Translation\n                id=\"TR_EXCHANGE_OFFER_ERROR_MINIMUM\"\n                values={{\n                    amount: formatCryptoAmount(Number(quote.sendStringAmount)),\n                    min: formatCryptoAmount(quote.min),\n                    currency: quote.send,\n                }}\n            />\n        );\n    }\n    if (quote.max && quote.max !== 'NONE' && Number(quote.sendStringAmount) > quote.max) {\n        return (\n            <Translation\n                id=\"TR_EXCHANGE_OFFER_ERROR_MAXIMUM\"\n                values={{\n                    amount: formatCryptoAmount(Number(quote.sendStringAmount)),\n                    max: formatCryptoAmount(quote.max),\n                    currency: quote.send,\n                }}\n            />\n        );\n    }\n    return quote.error;\n}\n\nconst Quote = ({ className, quote }: Props) => {\n    const theme = useTheme();\n    const { selectQuote, exchangeInfo, callInProgress } = useCoinmarketExchangeOffersContext();\n    const hasTag = false;\n    const { exchange, receive, receiveStringAmount } = quote;\n    const errorQuote = isQuoteError(quote);\n\n    const provider =\n        exchangeInfo?.providerInfos && exchange ? exchangeInfo?.providerInfos[exchange] : null;\n\n    return (\n        <Wrapper className={className}>\n            <TagRow>{hasTag && <Tag>best offer</Tag>}</TagRow>\n            <Main>\n                {errorQuote && <Left>N/A</Left>}\n                {!errorQuote && (\n                    <Left>{`${formatCryptoAmount(Number(receiveStringAmount))} ${receive}`}</Left>\n                )}\n                <Right>\n                    <StyledButton\n                        isLoading={callInProgress}\n                        isDisabled={errorQuote || callInProgress}\n                        onClick={() => selectQuote(quote)}\n                    >\n                        <Translation id=\"TR_EXCHANGE_GET_THIS_OFFER\" />\n                    </StyledButton>\n                </Right>\n            </Main>\n            <Details>\n                <Column maxWidth=\"250px\">\n                    <Heading>\n                        <Translation id=\"TR_EXCHANGE_PROVIDER\" />\n                    </Heading>\n                    <Value>\n                        <CoinmarketExchangeProviderInfo\n                            exchange={exchange}\n                            providers={exchangeInfo?.providerInfos}\n                        />\n                    </Value>\n                </Column>\n                <Column>\n                    <Heading>\n                        <Translation id=\"TR_EXCHANGE_KYC\" />\n                        <StyledQuestionTooltip tooltip=\"TR_EXCHANGE_KYC_INFO\" />\n                    </Heading>\n                    <Value>{provider?.kycPolicy}</Value>\n                </Column>\n            </Details>\n            {errorQuote && (\n                <ErrorFooter>\n                    <IconWrapper>\n                        <StyledIcon icon=\"CROSS\" size={12} color={theme.TYPE_RED} />\n                    </IconWrapper>\n                    <ErrorText>{getQuoteError(quote)}</ErrorText>\n                </ErrorFooter>\n            )}\n        </Wrapper>\n    );\n};\n\nexport default Quote;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variables } from '@trezor/components';\nimport Quote from './Quote';\nimport { ExchangeTrade } from 'invity-api';\nimport { QuestionTooltip, Translation } from '@suite-components';\nimport { useCoinmarketExchangeOffersContext } from '@wallet-hooks/useCoinmarketExchangeOffers';\n\nconst Wrapper = styled.div``;\nconst Quotes = styled.div``;\n\nconst StyledQuote = styled(Quote)`\n    margin-bottom: 20px;\n`;\n\nconst SummaryRow = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    font-size: ${variables.FONT_SIZE.NORMAL};\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n    padding: 10px 0;\n`;\n\nconst Divider = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    cursor: default;\n    padding: 10px 0;\n`;\n\nconst DividerLine = styled.div`\n    height: 1px;\n    flex: 1;\n    background: ${props => props.theme.STROKE_GREY};\n`;\n\nconst Left = styled.div`\n    display: flex;\n`;\n\nconst Right = styled.div`\n    display: flex;\n    justify-self: flex-end;\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst StyledQuestionTooltip = styled(QuestionTooltip)`\n    padding-left: 4px;\n    padding-top: 1px;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nconst RatesRow = styled.div`\n    margin: 10px 0;\n    display: flex;\n    align-items: center;\n`;\n\ninterface Props {\n    quotes?: ExchangeTrade[];\n    isFixed?: boolean;\n}\n\nconst List = ({ quotes, isFixed }: Props) => {\n    const { quotesRequest } = useCoinmarketExchangeOffersContext();\n    if (!quotesRequest || !quotes) return null;\n\n    return (\n        <Wrapper>\n            <Divider>\n                <DividerLine />\n            </Divider>\n            <SummaryRow>\n                <Left>\n                    {isFixed ? (\n                        <RatesRow>\n                            <Translation id=\"TR_EXCHANGE_FIXED_OFFERS\" />\n                            <StyledQuestionTooltip tooltip=\"TR_EXCHANGE_FIXED_OFFERS_INFO\" />\n                        </RatesRow>\n                    ) : (\n                        <RatesRow>\n                            <Translation id=\"TR_EXCHANGE_FLOAT_OFFERS\" />\n                            <StyledQuestionTooltip tooltip=\"TR_EXCHANGE_FLOAT_OFFERS_INFO\" />\n                        </RatesRow>\n                    )}\n                </Left>\n                <Right>\n                    <Translation id=\"TR_EXCHANGE_FEES_INCLUDED\" />\n                    <StyledQuestionTooltip tooltip=\"TR_EXCHANGE_FEES_INCLUDED_INFO\" />\n                </Right>\n            </SummaryRow>\n            <Quotes>\n                {quotes.map(quote => (\n                    <StyledQuote key={`${quote.exchange}`} quote={quote} />\n                ))}\n            </Quotes>\n        </Wrapper>\n    );\n};\n\nexport default List;\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { getUnusedAddressFromAccount } from '@wallet-utils/coinmarket/coinmarketUtils';\nimport { FiatValue, Translation, HiddenPlaceholder, AccountLabeling } from '@suite-components';\nimport { variables, CoinLogo, Select, Icon, useTheme } from '@trezor/components';\nimport { useCoinmarketExchangeOffersContext } from '@wallet-hooks/useCoinmarketExchangeOffers';\nimport { Account } from '@wallet-types';\nimport * as modalActions from '@suite-actions/modalActions';\nimport { useDispatch } from 'react-redux';\nimport { Dispatch } from '@suite-types';\nimport useTimeoutFn from 'react-use/lib/useTimeoutFn';\nimport { UseFormMethods } from 'react-hook-form';\n\nconst LogoWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    padding: 0 0 0 3px;\n`;\n\nconst AccountWrapper = styled.div`\n    display: flex;\n    padding: 0 0 0 15px;\n    flex-direction: column;\n`;\n\nconst UpperCase = styled.div`\n    text-transform: uppercase;\n    padding: 0 3px;\n`;\n\nconst FiatWrapper = styled.div`\n    padding: 0 0 0 3px;\n`;\n\nconst Amount = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.TINY};\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst AccountName = styled.div`\n    display: flex;\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst Option = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst AccountType = styled.span`\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    padding-left: 5px;\n`;\n\ntype AccountSelectOption = {\n    type: 'SUITE' | 'ADD_SUITE' | 'NON_SUITE';\n    account?: Account;\n};\n\ntype FormState = {\n    address?: string;\n    extraField?: string;\n};\n\ntype Props = Pick<UseFormMethods<FormState>, 'setValue'> & {\n    selectedAccountOption?: AccountSelectOption;\n    setSelectedAccountOption: (o: AccountSelectOption) => void;\n};\n\nconst ReceiveOptions = (props: Props) => {\n    const theme = useTheme();\n    const {\n        device,\n        suiteReceiveAccounts,\n        receiveSymbol,\n        setReceiveAccount,\n    } = useCoinmarketExchangeOffersContext();\n    const [menuIsOpen, setMenuIsOpen] = useState<boolean | undefined>(undefined);\n    const dispatch = useDispatch<Dispatch>();\n\n    const { selectedAccountOption, setSelectedAccountOption, setValue } = props;\n\n    const selectAccountOptions: AccountSelectOption[] = [];\n\n    if (suiteReceiveAccounts) {\n        suiteReceiveAccounts.forEach(account => {\n            selectAccountOptions.push({ type: 'SUITE', account });\n        });\n        selectAccountOptions.push({ type: 'ADD_SUITE' });\n    }\n    selectAccountOptions.push({ type: 'NON_SUITE' });\n\n    const selectAccountOption = (option: AccountSelectOption) => {\n        setSelectedAccountOption(option);\n        setReceiveAccount(option.account);\n        if (option.account) {\n            const { address } = getUnusedAddressFromAccount(option.account);\n            setValue('address', address, { shouldValidate: true });\n        }\n    };\n\n    const onChangeAccount = (account: AccountSelectOption) => {\n        if (account.type === 'ADD_SUITE') {\n            if (device) {\n                setMenuIsOpen(true);\n                dispatch(\n                    modalActions.openModal({\n                        type: 'add-account',\n                        device: device!,\n                        symbol: receiveSymbol as Account['symbol'],\n                        noRedirect: true,\n                    }),\n                );\n            }\n        } else {\n            selectAccountOption(account);\n            setMenuIsOpen(undefined);\n        }\n    };\n\n    // preselect the account after everything is loaded\n    useTimeoutFn(() => {\n        if (selectAccountOptions.length > 0 && selectAccountOptions[0].type !== 'ADD_SUITE') {\n            selectAccountOption(selectAccountOptions[0]);\n        }\n    }, 100);\n\n    return (\n        <Select\n            onChange={(selected: any) => {\n                onChangeAccount(selected);\n            }}\n            noTopLabel\n            value={selectedAccountOption}\n            isClearable={false}\n            options={selectAccountOptions}\n            minWidth=\"70px\"\n            formatOptionLabel={(option: AccountSelectOption) => {\n                switch (option.type) {\n                    case 'SUITE': {\n                        if (!option.account) return null;\n                        const { symbol, formattedBalance } = option.account;\n                        return (\n                            <Option>\n                                <LogoWrapper>\n                                    <CoinLogo size={25} symbol={symbol} />\n                                </LogoWrapper>\n                                <AccountWrapper>\n                                    <AccountName>\n                                        <AccountLabeling account={option.account} />\n                                        <AccountType>\n                                            {option.account.accountType !== 'normal'\n                                                ? option.account.accountType\n                                                : ''}\n                                        </AccountType>\n                                    </AccountName>\n                                    <Amount>\n                                        <HiddenPlaceholder>{formattedBalance}</HiddenPlaceholder>{' '}\n                                        <UpperCase>{symbol}</UpperCase> •\n                                        <FiatWrapper>\n                                            <FiatValue amount={formattedBalance} symbol={symbol} />\n                                        </FiatWrapper>\n                                    </Amount>\n                                </AccountWrapper>\n                            </Option>\n                        );\n                    }\n                    case 'ADD_SUITE':\n                        return (\n                            <Option>\n                                <LogoWrapper>\n                                    <Icon icon=\"PLUS\" size={25} color={theme.TYPE_DARK_GREY} />\n                                </LogoWrapper>\n                                <AccountWrapper>\n                                    <Translation\n                                        id=\"TR_EXCHANGE_CREATE_SUITE_ACCOUNT\"\n                                        values={{\n                                            symbol: receiveSymbol?.toUpperCase(),\n                                        }}\n                                    />\n                                </AccountWrapper>\n                            </Option>\n                        );\n                    case 'NON_SUITE':\n                        return (\n                            <Option>\n                                <LogoWrapper>\n                                    <Icon icon=\"NON_SUITE\" size={25} color={theme.TYPE_DARK_GREY} />\n                                </LogoWrapper>\n                                <AccountWrapper>\n                                    <Translation\n                                        id=\"TR_EXCHANGE_USE_NON_SUITE_ACCOUNT\"\n                                        values={{\n                                            symbol: receiveSymbol?.toUpperCase(),\n                                        }}\n                                    />\n                                </AccountWrapper>\n                            </Option>\n                        );\n                    default:\n                        return null;\n                }\n            }}\n            isDropdownVisible={selectAccountOptions.length === 1}\n            isDisabled={selectAccountOptions.length === 1}\n            placeholder={\n                <Translation\n                    id=\"TR_EXCHANGE_SELECT_RECEIVE_ACCOUNT\"\n                    values={{ symbol: receiveSymbol?.toUpperCase() }}\n                />\n            }\n            menuIsOpen={menuIsOpen}\n        />\n    );\n};\n\nexport default ReceiveOptions;\n","import React, { useCallback, useState } from 'react';\nimport styled from 'styled-components';\nimport ReceiveOptions from './ReceiveOptions';\nimport { QuestionTooltip, Translation } from '@suite-components';\nimport { Input, variables, DeviceImage, Button } from '@trezor/components';\nimport { InputError } from '@wallet-components';\nimport { useCoinmarketExchangeOffersContext } from '@wallet-hooks/useCoinmarketExchangeOffers';\nimport { Account } from '@wallet-types';\nimport { useForm } from 'react-hook-form';\nimport { TypedValidationRules } from '@wallet-types/form';\nimport addressValidator from 'trezor-address-validator';\nimport { isHexValid, isInteger } from '@wallet-utils/validation';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-top: 10px;\n`;\n\nconst Heading = styled.div`\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    padding: 16px 24px 0 24px;\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    font-size: ${variables.FONT_SIZE.SMALL};\n`;\n\nconst CardContent = styled.div`\n    display: flex;\n    flex-direction: column;\n    padding: 0 24px 0 24px;\n`;\n\nconst Label = styled.div`\n    display: flex;\n    align-items: center;\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst StyledQuestionTooltip = styled(QuestionTooltip)`\n    padding-left: 3px;\n`;\n\nconst CustomLabel = styled(Label)`\n    padding: 12px 0;\n`;\n\nconst LabelText = styled.div``;\n\nconst StyledDeviceImage = styled(DeviceImage)`\n    padding: 0 10px 0 0;\n`;\n\nconst ButtonWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-top: 20px;\n    border-top: 1px solid ${props => props.theme.STROKE_GREY};\n    margin: 20px 0;\n`;\n\nconst Confirmed = styled.div`\n    display: flex;\n    height: 60px;\n    font-size: ${variables.FONT_SIZE.BIG};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    background: ${props => props.theme.BG_GREY};\n    align-items: center;\n    justify-content: center;\n`;\n\nconst Row = styled.div`\n    margin: 12px 0;\n`;\n\ntype AccountSelectOption = {\n    type: 'SUITE' | 'ADD_SUITE' | 'NON_SUITE';\n    account?: Account;\n};\n\ntype FormState = {\n    address?: string;\n    extraField?: string;\n};\n\nconst VerifyAddressComponent = () => {\n    const {\n        callInProgress,\n        device,\n        verifyAddress,\n        confirmTrade,\n        selectedQuote,\n        addressVerified,\n        receiveSymbol,\n    } = useCoinmarketExchangeOffersContext();\n    const [selectedAccountOption, setSelectedAccountOption] = useState<AccountSelectOption>();\n    const { register, watch, errors, formState, setValue } = useForm<FormState>({\n        mode: 'onChange',\n    });\n\n    const typedRegister: (rules?: TypedValidationRules) => (ref: any) => void = useCallback(\n        <T,>(rules?: T) => register(rules),\n        [register],\n    );\n\n    const { address, extraField } = watch();\n\n    const extraFieldDescription = selectedQuote?.extraFieldDescription\n        ? {\n              extraFieldName: selectedQuote?.extraFieldDescription?.name,\n              extraFieldDescription: selectedQuote?.extraFieldDescription?.description,\n              toCurrency: selectedQuote?.receive,\n          }\n        : {};\n\n    const formErrors = !formState.isValid;\n\n    return (\n        <Wrapper>\n            <Heading>\n                <Translation\n                    id=\"TR_EXCHANGE_RECEIVING_ADDRESS_INFO\"\n                    values={{ symbol: selectedQuote?.receive }}\n                />\n            </Heading>\n            <CardContent>\n                <Row>\n                    <CustomLabel>\n                        <LabelText>\n                            <Translation id=\"TR_EXCHANGE_RECEIVING_ACCOUNT\" />\n                        </LabelText>\n                        <StyledQuestionTooltip tooltip=\"TR_EXCHANGE_RECEIVE_ACCOUNT_QUESTION_TOOLTIP\" />\n                    </CustomLabel>\n                    <ReceiveOptions\n                        selectedAccountOption={selectedAccountOption}\n                        setSelectedAccountOption={setSelectedAccountOption}\n                        setValue={setValue}\n                    />\n                </Row>\n                <Row>\n                    <Input\n                        label={\n                            <Label>\n                                <Translation id=\"TR_EXCHANGE_RECEIVING_ADDRESS\" />\n                                <StyledQuestionTooltip tooltip=\"TR_EXCHANGE_RECEIVE_ADDRESS_QUESTION_TOOLTIP\" />\n                            </Label>\n                        }\n                        variant=\"small\"\n                        name=\"address\"\n                        innerRef={typedRegister({\n                            required: 'TR_EXCHANGE_RECEIVING_ADDRESS_REQUIRED',\n                            validate: value => {\n                                if (selectedAccountOption?.type === 'NON_SUITE' && receiveSymbol) {\n                                    if (!addressValidator.validate(value, receiveSymbol)) {\n                                        return 'TR_EXCHANGE_RECEIVING_ADDRESS_INVALID';\n                                    }\n                                }\n                            },\n                        })}\n                        readOnly={selectedAccountOption?.type !== 'NON_SUITE'}\n                        state={errors.address ? 'error' : undefined}\n                        bottomText={<InputError error={errors.address} />}\n                    />\n\n                    {addressVerified && addressVerified === address && (\n                        <Confirmed>\n                            {device && (\n                                <StyledDeviceImage\n                                    height={25}\n                                    trezorModel={device.features?.major_version === 1 ? 1 : 2}\n                                />\n                            )}\n                            <Translation id=\"TR_EXCHANGE_CONFIRMED_ON_TREZOR\" />\n                        </Confirmed>\n                    )}\n                </Row>\n                {selectedQuote?.extraFieldDescription && (\n                    <Row>\n                        <Input\n                            variant=\"small\"\n                            label={\n                                <Label>\n                                    <Translation\n                                        id=\"TR_EXCHANGE_EXTRA_FIELD\"\n                                        values={extraFieldDescription}\n                                    />\n                                    <StyledQuestionTooltip\n                                        tooltip={\n                                            <Translation\n                                                id=\"TR_EXCHANGE_EXTRA_FIELD_QUESTION_TOOLTIP\"\n                                                values={extraFieldDescription}\n                                            />\n                                        }\n                                    />\n                                </Label>\n                            }\n                            name=\"extraField\"\n                            innerRef={typedRegister({\n                                required: selectedQuote?.extraFieldDescription?.required ? (\n                                    <Translation\n                                        id=\"TR_EXCHANGE_EXTRA_FIELD_REQUIRED\"\n                                        values={extraFieldDescription}\n                                    />\n                                ) : undefined,\n                                validate: value => {\n                                    let valid = true;\n                                    if (value) {\n                                        if (selectedQuote?.extraFieldDescription?.type === 'hex') {\n                                            valid = isHexValid(value);\n                                        } else if (\n                                            selectedQuote?.extraFieldDescription?.type === 'number'\n                                        ) {\n                                            valid = isInteger(value);\n                                        }\n                                    }\n                                    if (!valid) {\n                                        return (\n                                            <Translation\n                                                id=\"TR_EXCHANGE_EXTRA_FIELD_INVALID\"\n                                                values={extraFieldDescription}\n                                            />\n                                        );\n                                    }\n                                },\n                            })}\n                            state={errors.extraField ? 'error' : undefined}\n                            bottomText={<InputError error={errors.extraField} />}\n                        />\n                    </Row>\n                )}\n            </CardContent>\n            {selectedAccountOption && (\n                <ButtonWrapper>\n                    {(!addressVerified || addressVerified !== address) &&\n                        selectedAccountOption.account && (\n                            <Button\n                                isLoading={callInProgress}\n                                isDisabled={callInProgress}\n                                onClick={() => {\n                                    if (selectedAccountOption.account) {\n                                        verifyAddress(selectedAccountOption.account, true);\n                                    }\n                                }}\n                            >\n                                <Translation id=\"TR_EXCHANGE_CONFIRM_ON_TREZOR\" />\n                            </Button>\n                        )}\n                    {((addressVerified && addressVerified === address) ||\n                        selectedAccountOption?.type === 'NON_SUITE') && (\n                        <Button\n                            isLoading={callInProgress}\n                            onClick={() => {\n                                if (address) {\n                                    confirmTrade(address, extraField);\n                                }\n                            }}\n                            isDisabled={formErrors || callInProgress}\n                        >\n                            <Translation id=\"TR_EXCHANGE_GO_TO_PAYMENT\" />\n                        </Button>\n                    )}\n                </ButtonWrapper>\n            )}\n        </Wrapper>\n    );\n};\n\nexport default VerifyAddressComponent;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Translation, AccountLabeling } from '@suite-components';\nimport { Button, variables } from '@trezor/components';\nimport { useCoinmarketExchangeOffersContext } from '@wallet-hooks/useCoinmarketExchangeOffers';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    margin-top: 10px;\n`;\n\nconst LabelText = styled.div`\n    font-size: ${variables.FONT_SIZE.TINY};\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nconst Value = styled.div`\n    padding-top: 6px;\n    font-size: ${variables.FONT_SIZE.SMALL};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst ButtonWrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding-top: 20px;\n    border-top: 1px solid ${props => props.theme.STROKE_GREY};\n    margin: 20px 0;\n`;\n\nconst Row = styled.div`\n    margin: 24px;\n`;\n\nconst Address = styled.div``;\n\nconst SendTransactionComponent = () => {\n    const {\n        account,\n        callInProgress,\n        selectedQuote,\n        exchangeInfo,\n        sendTransaction,\n    } = useCoinmarketExchangeOffersContext();\n    if (!selectedQuote) return null;\n    const { exchange, sendAddress } = selectedQuote;\n    if (!exchange) return null;\n    const providerName =\n        exchangeInfo?.providerInfos[exchange]?.companyName || selectedQuote.exchange;\n    return (\n        <Wrapper>\n            <Row>\n                <LabelText>\n                    <Translation id=\"TR_EXCHANGE_SEND_FROM\" />\n                </LabelText>\n                <Value>\n                    <AccountLabeling account={account} />\n                </Value>\n            </Row>\n            <Row>\n                <LabelText>\n                    <Translation id=\"TR_EXCHANGE_SEND_TO\" values={{ providerName }} />\n                </LabelText>\n                <Value>\n                    <Address>{sendAddress}</Address>\n                </Value>\n            </Row>\n\n            <ButtonWrapper>\n                <Button isLoading={callInProgress} onClick={sendTransaction}>\n                    <Translation id=\"TR_EXCHANGE_CONFIRM_ON_TREZOR_SEND\" />\n                </Button>\n            </ButtonWrapper>\n        </Wrapper>\n    );\n};\n\nexport default SendTransactionComponent;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Card, Icon, variables, colors } from '@trezor/components';\nimport { useCoinmarketExchangeOffersContext } from '@wallet-hooks/useCoinmarketExchangeOffers';\nimport CoinmarketExchangeOfferInfo from '@wallet-components/CoinmarketExchangeOfferInfo';\nimport VerifyAddress from './components/VerifyAddress';\nimport SendTransaction from './components/SendTransaction';\nimport { Translation } from '@suite-components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    margin-top: 20px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        flex-direction: column;\n    }\n`;\n\nconst StyledCard = styled(Card)`\n    flex: 1;\n    padding: 0;\n`;\n\nconst Header = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    padding: 10px 25px;\n    border-bottom: 1px solid ${props => props.theme.STROKE_GREY};\n`;\n\ninterface ActiveProps {\n    active: boolean;\n}\n\nconst Step = styled.div<ActiveProps>`\n    font-weight: ${props =>\n        props.active ? variables.FONT_WEIGHT.DEMI_BOLD : variables.FONT_WEIGHT.MEDIUM};\n    color: ${props =>\n        props.active ? props => props.theme.TYPE_GREEN : props.theme.TYPE_LIGHT_GREY};\n    display: flex;\n    font-size: ${variables.FONT_SIZE.SMALL};\n    flex: 1;\n    justify-content: center;\n`;\n\nconst Left = styled.div`\n    display: flex;\n    flex: 1;\n`;\n\nconst Right = styled.div`\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n`;\n\nconst Middle = styled.div`\n    display: flex;\n    min-width: 65px;\n    height: 48px;\n    align-items: center;\n    justify-content: center;\n    color: ${props => props.theme.STROKE_GREY};\n`;\n\nconst SelectedOffer = () => {\n    const {\n        account,\n        selectedQuote,\n        exchangeInfo,\n        exchangeStep,\n        receiveAccount,\n    } = useCoinmarketExchangeOffersContext();\n    if (!selectedQuote) return null;\n\n    return (\n        <Wrapper>\n            <StyledCard>\n                <Header>\n                    <Left>\n                        <Step active={exchangeStep === 'RECEIVING_ADDRESS'}>\n                            <Translation id=\"TR_EXCHANGE_VERIFY_ADDRESS_STEP\" />\n                        </Step>\n                    </Left>\n                    <Middle>\n                        <Icon icon=\"ARROW_RIGHT\" color={colors.TYPE_LIGHT_GREY} />\n                    </Middle>\n                    <Right>\n                        <Step active={exchangeStep === 'SEND_TRANSACTION'}>\n                            <Translation id=\"TR_EXCHANGE_CONFIRM_SEND_STEP\" />\n                        </Step>\n                    </Right>\n                </Header>\n                {exchangeStep === 'RECEIVING_ADDRESS' && <VerifyAddress />}\n                {exchangeStep === 'SEND_TRANSACTION' && <SendTransaction />}\n            </StyledCard>\n            <CoinmarketExchangeOfferInfo\n                selectedQuote={selectedQuote}\n                account={account}\n                exchangeInfo={exchangeInfo}\n                receiveAccount={receiveAccount}\n            />\n        </Wrapper>\n    );\n};\n\nexport default SelectedOffer;\n","import React, { useMemo, useContext } from 'react';\nimport styled from 'styled-components';\nimport invityAPI from '@suite-services/invityAPI';\nimport { LayoutContext, Translation } from '@suite-components';\nimport {\n    CoinmarketExchangeTopPanel,\n    CoinmarketFooter,\n    CoinmarketRefreshTime,\n} from '@wallet-components';\nimport { variables, Icon, CoinLogo } from '@trezor/components';\nimport { useCoinmarketExchangeOffersContext } from '@wallet-hooks/useCoinmarketExchangeOffers';\n\nimport List from './List';\nimport SelectedOffer from './SelectedOffer';\n\nconst Wrapper = styled.div`\n    padding: 0 32px 32px 32px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        padding: 16px;\n    }\n`;\n\nconst NoQuotes = styled.div`\n    display: flex;\n    justify-content: center;\n    flex-direction: column;\n    min-height: 550px;\n    align-items: center;\n    flex: 1;\n`;\n\nconst Header = styled.div`\n    margin: 18px 0 24px 0;\n`;\n\nconst SummaryRow = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    font-size: ${variables.FONT_SIZE.H2};\n`;\n\nconst Text = styled.div`\n    display: flex;\n    padding-top: 3px;\n    align-items: center;\n`;\n\nconst StyledIcon = styled(Icon)`\n    margin: 0 17px;\n`;\n\nconst Left = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Right = styled.div`\n    display: flex;\n    justify-self: flex-end;\n    align-items: center;\n    font-size: ${variables.FONT_SIZE.SMALL};\n`;\n\nconst StyledCoinLogo = styled(CoinLogo)`\n    padding: 0 10px 0 0;\n`;\n\nconst InvityCoinLogo = styled.img`\n    height: 18px;\n    padding: 0 10px 0 0;\n`;\n\nconst TextAmount = styled(Text)`\n    padding-right: 10px;\n`;\n\nconst Offers = () => {\n    const {\n        fixedQuotes,\n        floatQuotes,\n        quotesRequest,\n        selectedQuote,\n        timer,\n        REFETCH_INTERVAL_IN_SECONDS,\n        account,\n    } = useCoinmarketExchangeOffersContext();\n    const { setLayout } = useContext(LayoutContext);\n\n    useMemo(() => {\n        if (setLayout) setLayout('Trezor Suite | Trade', undefined, <CoinmarketExchangeTopPanel />);\n    }, [setLayout]);\n\n    if (!quotesRequest) return null;\n    const quotesCount = fixedQuotes?.length + floatQuotes?.length;\n    return (\n        <Wrapper>\n            {!selectedQuote && (\n                <>\n                    {!quotesCount && (\n                        <NoQuotes>\n                            <Translation id=\"TR_EXCHANGE_NO_OFFERS\" />\n                        </NoQuotes>\n                    )}\n                    {quotesCount > 0 && (\n                        <>\n                            <Header>\n                                <SummaryRow>\n                                    <Left>\n                                        <StyledCoinLogo size={21} symbol={account.symbol} />\n                                        <TextAmount>{quotesRequest.sendStringAmount}</TextAmount>\n                                        <Text>{quotesRequest.send}</Text>\n                                        <StyledIcon icon=\"ARROW_RIGHT_LONG\" />\n                                        <InvityCoinLogo\n                                            src={`${invityAPI.server}/images/coins/suite/${quotesRequest.receive}.svg`}\n                                        />\n                                        <Text>{quotesRequest.receive}</Text>\n                                    </Left>\n                                    {!timer.isStopped && (\n                                        <Right>\n                                            <CoinmarketRefreshTime\n                                                isLoading={timer.isLoading}\n                                                refetchInterval={REFETCH_INTERVAL_IN_SECONDS}\n                                                seconds={timer.timeSpend.seconds}\n                                                label={\n                                                    <Translation id=\"TR_EXCHANGE_OFFERS_REFRESH\" />\n                                                }\n                                            />\n                                        </Right>\n                                    )}\n                                </SummaryRow>\n                            </Header>\n                            {fixedQuotes?.length > 0 && <List quotes={fixedQuotes} isFixed />}\n                            {floatQuotes?.length > 0 && <List quotes={floatQuotes} />}\n                        </>\n                    )}\n                </>\n            )}\n            {selectedQuote && <SelectedOffer />}\n            <CoinmarketFooter />\n        </Wrapper>\n    );\n};\n\nexport default Offers;\n","import React from 'react';\nimport { WalletLayout } from '@wallet-components';\nimport { useSelector } from '@suite-hooks';\nimport styled from 'styled-components';\nimport { Props } from '@wallet-types/coinmarketExchangeOffers';\nimport {\n    CoinmarketExchangeOffersContext,\n    useOffers,\n} from '@wallet-hooks/useCoinmarketExchangeOffers';\nimport Offers from './Offers';\n\nconst Wrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n`;\n\nconst OffersIndexLoaded = (props: Props) => {\n    const { selectedAccount } = props;\n    const coinmarketOffersValues = useOffers({ ...props, selectedAccount });\n\n    return (\n        <CoinmarketExchangeOffersContext.Provider value={coinmarketOffersValues}>\n            <Wrapper>\n                <Offers />\n            </Wrapper>\n        </CoinmarketExchangeOffersContext.Provider>\n    );\n};\n\nconst OffersIndex = () => {\n    const props = useSelector(state => ({\n        selectedAccount: state.wallet.selectedAccount,\n        device: state.suite.device,\n        fixedQuotes: state.wallet.coinmarket.exchange.fixedQuotes,\n        floatQuotes: state.wallet.coinmarket.exchange.floatQuotes,\n        quotesRequest: state.wallet.coinmarket.exchange.quotesRequest,\n        addressVerified: state.wallet.coinmarket.exchange.addressVerified,\n        exchangeInfo: state.wallet.coinmarket.exchange.exchangeInfo,\n    }));\n\n    const { selectedAccount } = props;\n    if (selectedAccount.status !== 'loaded') {\n        return <WalletLayout title=\"TR_NAV_EXCHANGE\" account={selectedAccount} />;\n    }\n    return <OffersIndexLoaded {...props} selectedAccount={selectedAccount} />;\n};\n\nexport default OffersIndex;\n","import Offers from '@wallet-views/coinmarket/exchange/offers';\n\nexport default Offers;\n"],"sourceRoot":""}