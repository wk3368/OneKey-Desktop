{"version":3,"sources":["webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?0307","webpack://_N_E/../suite/src/views/wallet/send/components/Outputs/components/OpReturn/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Options/components/EthereumOptions/components/Data/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Header/components/Clear/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Header/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Outputs/components/Address/components/Convert/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Outputs/components/Address/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Outputs/components/Amount/components/TokenSelect/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Outputs/components/Amount/components/Fiat/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Outputs/components/Amount/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Outputs/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Options/components/BitcoinOptions/components/Locktime/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Options/components/BitcoinOptions/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Options/components/EthereumOptions/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Options/components/RippleOptions/components/DestinationTag/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Options/components/RippleOptions/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Options/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Fees/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/TotalSent/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/ReviewButton/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/components/Raw/index.tsx","webpack://_N_E/../suite/src/views/wallet/send/index.tsx","webpack://_N_E/./pages/accounts/send/index.tsx"],"names":["window","__NEXT_P","push","Wrapper","styled","div","Label","Text","Space","OpReturn","outputId","register","outputs","getDefaultValue","setValue","errors","composeTransaction","removeOpReturn","useSendFormContext","inputAsciiName","inputHexName","asciiValue","dataAscii","hexValue","dataHex","outputError","undefined","asciiError","hexError","state","getInputState","monospace","name","data-test","defaultValue","maxLength","MAX_LENGTH","OP_RETURN","innerRef","required","onChange","event","Buffer","from","target","value","toString","shouldValidate","bottomText","error","label","size","icon","id","validate","isHexValid","length","labelRight","onClick","Data","close","setAmount","amount","ethereumDataAscii","ethereumDataHex","ETH_DATA","tooltip","In","props","theme","TYPE_LIGHT_GREY","Clear","resetContext","isDirty","variant","Translation","HeaderLeft","variables","FONT_SIZE","TINY","FONT_WEIGHT","DEMI_BOLD","HeaderRight","Header","account","networkType","addOpReturn","loadTransaction","sendRaw","useActions","sendFormActions","opreturnOutput","find","o","type","options","key","callback","isDisabled","isHidden","alignMenu","items","StyledButton","Button","Convert","isNested","values","convert","Left","Remove","StyledIcon","Icon","Address","output","outputsCount","useTheme","removeOutput","openQrModal","scanQrRequest","descriptor","symbol","inputName","addressError","address","addressValue","recipientId","labelAddon","async","result","color","useCursorPointer","knownOnly","ADDRESS","isAddressValid","addressDeprecatedUrl","isAddressDeprecated","message","url","isBech32AddressUppercase","toLowerCase","TokenSelect","clearErrors","control","getValues","toggleOption","watch","tokenInputName","amountInputName","tokenValue","token","isSetMaxActive","dataEnabled","includes","toUpperCase","tokens","forEach","tokenName","buildTokenOptions","tokenWatch","useEffect","amountValue","render","isSearchable","hideTextCursor","isClearable","minWidth","isClean","selected","buildCurrencyOptions","FIAT","currencies","currency","Fiat","network","fiatRates","localCurrencyOption","currencyInputName","fiat","fiatValue","currencyValue","findToken","decimals","amountError","errorToDisplay","current","fromFiatCurrency","rates","amountBig","BigNumber","isNaN","lt","isDecimalsValid","innerAddon","rate","getFiatRate","fiatValueBigNumber","multipliedBy","toFixed","SCREEN_SIZE","LG","StyledInput","Input","TokenBalance","NEUE_FONT_SIZE","TokenBalanceValue","span","StyledTransferIcon","TransferIconWrapper","Right","Amount","feeInfo","setMax","calculateFiat","isSetMaxVisible","Object","keys","formattedAvailableBalance","balance","formatNetworkAmount","availableBalance","reserve","misc","tokenBalance","labelAddonIsVisible","AMOUNT","eq","dust","dustLimit","lte","gt","isInteger","fiatCurrency","OutputWrapper","index","css","BG_GREY","Row","isColumn","Outputs","disableAnim","renderedOutputs","setRenderedOutputs","useState","lastOutputRef","useRef","onAddAnimationComplete","scrollIntoView","behavior","customAnim","ANIMATION","EXPAND","variants","visible","height","transitionEnd","overflow","animation","initial","map","onAnimationComplete","ref","RbfMessage","Center","Title","MEDIUM","NORMAL","TYPE_DARK_GREY","Description","SMALL","Locktime","rbfEnabled","broadcastEnabled","inputValue","BTC_LOCKTIME","isFeatureEnabled","features","checked","AddRecipientButton","BitcoinOptions","addOutput","resetDefaultValue","locktimeEnabled","isOn","EthereumOptions","DestinationTag","XRP_DESTINATION_TAG","U_INT_32","RippleOptions","destinationEnabled","Content","Line","STROKE_GREY","Options","StyledCard","Card","SendFees","changeFeeLevel","composedLevels","Fees","showLabel","SecondaryLabel","TotalSentCoin","TotalSentFiat","TotalSent","selectedFee","transactionInfo","isTokenTransfer","tokenInfo","disableHiddenPlaceholder","formatAmount","totalSpent","fee","ButtonReview","ReviewButton","device","isLocked","useDevice","online","isLoading","signTransaction","composedTx","available","IconWrapper","ButtonWrapper","ButtonSend","Raw","useForm","mode","defaultValues","rawTx","pushRawTransaction","inputState","SendLoaded","children","sendContextValues","useSendForm","title","selectedAccount","Provider","customHeader","Send","useSelector","wallet","localCurrency","settings","fees","suite","send","status"],"mappings":"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","file":"static/chunks/pages/accounts/send-6ace3fa6a2fb5cff466a.js","sourcesContent":["\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/accounts/send\",\n        function () {\n          return require(\"private-next-pages/accounts/send/index.tsx\");\n        }\n      ]);\n    ","import React from 'react';\nimport styled from 'styled-components';\nimport { useSendFormContext } from '@wallet-hooks';\nimport { Translation } from '@suite-components';\nimport { InputError } from '@wallet-components';\nimport { Textarea, Icon } from '@trezor/components';\nimport { getInputState } from '@wallet-utils/sendFormUtils';\nimport { isHexValid } from '@wallet-utils/validation';\nimport { MAX_LENGTH } from '@suite-constants/inputs';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: row;\n    justify-items: space-between;\n    align-items: center;\n`;\n\nconst Label = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Text = styled.div`\n    padding: 0 4px;\n`;\n\nconst Space = styled.div`\n    display: flex;\n    justify-content: center;\n    min-width: 65px;\n`;\n\nconst OpReturn = ({ outputId }: { outputId: number }) => {\n    const {\n        register,\n        outputs,\n        getDefaultValue,\n        setValue,\n        errors,\n        composeTransaction,\n        removeOpReturn,\n    } = useSendFormContext();\n\n    const inputAsciiName = `outputs[${outputId}].dataAscii`;\n    const inputHexName = `outputs[${outputId}].dataHex`;\n\n    const asciiValue = getDefaultValue(inputAsciiName, outputs[outputId].dataAscii || '');\n    const hexValue = getDefaultValue(inputHexName, outputs[outputId].dataHex || '');\n\n    const outputError = errors.outputs ? errors.outputs[outputId] : undefined;\n    const asciiError = outputError ? outputError.dataAscii : undefined;\n    const hexError = outputError ? outputError.dataHex : undefined;\n\n    return (\n        <Wrapper>\n            <Textarea\n                state={getInputState(asciiError, asciiValue)}\n                monospace\n                name={inputAsciiName}\n                data-test={inputAsciiName}\n                defaultValue={asciiValue}\n                maxLength={MAX_LENGTH.OP_RETURN}\n                innerRef={register({\n                    required: 'DATA_NOT_SET',\n                })}\n                onChange={event => {\n                    setValue(\n                        inputHexName,\n                        Buffer.from(event.target.value, 'ascii').toString('hex'),\n                        { shouldValidate: true },\n                    );\n                    composeTransaction(inputAsciiName);\n                }}\n                bottomText={<InputError error={asciiError} />}\n                label={\n                    <Label>\n                        <Icon size={16} icon=\"ASTERISK\" />\n                        <Text>\n                            <Translation id=\"OP_RETURN\" />\n                        </Text>\n                    </Label>\n                }\n            />\n            <Space> = </Space>\n            <Textarea\n                state={getInputState(hexError, hexValue)}\n                monospace\n                name={inputHexName}\n                data-test={inputHexName}\n                defaultValue={hexValue}\n                maxLength={MAX_LENGTH.OP_RETURN}\n                innerRef={register({\n                    required: 'DATA_NOT_SET',\n                    validate: (value: string) => {\n                        if (!isHexValid(value)) return 'DATA_NOT_VALID_HEX';\n                        if (value.length > 80 * 2) return 'DATA_HEX_TOO_BIG';\n                    },\n                })}\n                onChange={event => {\n                    setValue(\n                        inputAsciiName,\n                        !hexError ? Buffer.from(event.target.value, 'hex').toString('ascii') : '',\n                    );\n                    composeTransaction(inputHexName);\n                }}\n                bottomText={<InputError error={hexError} />}\n                labelRight={\n                    <Icon size={20} icon=\"CROSS\" onClick={() => removeOpReturn(outputId)} />\n                }\n            />\n        </Wrapper>\n    );\n};\n\nexport default OpReturn;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Textarea, Icon } from '@trezor/components';\nimport { QuestionTooltip } from '@suite-components';\nimport { InputError } from '@wallet-components';\nimport { useSendFormContext } from '@wallet-hooks';\nimport { getInputState } from '@wallet-utils/sendFormUtils';\nimport { isHexValid } from '@wallet-utils/validation';\nimport { MAX_LENGTH } from '@suite-constants/inputs';\n\nconst Wrapper = styled.div`\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nconst Space = styled.div`\n    display: flex;\n    justify-content: center;\n    min-width: 65px;\n`;\n\ninterface Props {\n    close: () => void;\n}\n\nconst Data = ({ close }: Props) => {\n    const {\n        register,\n        outputs,\n        errors,\n        getDefaultValue,\n        setValue,\n        setAmount,\n        composeTransaction,\n    } = useSendFormContext();\n\n    const inputAsciiName = 'ethereumDataAscii';\n    const inputHexName = 'ethereumDataHex';\n\n    const asciiValue = getDefaultValue(inputAsciiName);\n    const hexValue = getDefaultValue(inputHexName);\n    const amount = getDefaultValue('outputs[0].amount', outputs[0].amount);\n    const asciiError = errors.ethereumDataAscii;\n    const hexError = errors.ethereumDataHex;\n\n    return (\n        <Wrapper>\n            <Textarea\n                state={getInputState(asciiError, asciiValue)}\n                monospace\n                name={inputAsciiName}\n                data-test={inputAsciiName}\n                defaultValue={asciiValue}\n                maxLength={MAX_LENGTH.ETH_DATA}\n                innerRef={register({\n                    required: 'DATA_NOT_SET',\n                })}\n                onChange={event => {\n                    setValue(\n                        inputHexName,\n                        Buffer.from(event.target.value, 'ascii').toString('hex'),\n                        { shouldValidate: true },\n                    );\n                    if (!amount) {\n                        setAmount(0, '0');\n                    }\n                    if ((event.target.value === '' || asciiError) && amount === '0') {\n                        setAmount(0, '');\n                    }\n                    composeTransaction(inputAsciiName);\n                }}\n                bottomText={<InputError error={asciiError} />}\n                label={<QuestionTooltip label=\"DATA_ETH\" tooltip=\"DATA_ETH_TOOLTIP\" />}\n            />\n            <Space> = </Space>\n            <Textarea\n                state={getInputState(hexError, hexValue)}\n                monospace\n                name={inputHexName}\n                data-test={inputHexName}\n                defaultValue={hexValue}\n                maxLength={MAX_LENGTH.ETH_DATA}\n                innerRef={register({\n                    required: 'DATA_NOT_SET',\n                    validate: (value: string) => {\n                        if (!isHexValid(value, '0x')) return 'DATA_NOT_VALID_HEX';\n                        if (value.length > 8192 * 2) return 'DATA_HEX_TOO_BIG'; // 8192 bytes limit for protobuf single message encoding in FW\n                    },\n                })}\n                onChange={event => {\n                    setValue(\n                        inputAsciiName,\n                        !hexError ? Buffer.from(event.target.value, 'hex').toString('ascii') : '',\n                    );\n                    if (!amount) {\n                        setValue('outputs[0].amount', '0');\n                    }\n                    if ((event.target.value === '' || hexError) && amount === '0') {\n                        setValue('outputs[0].amount', '');\n                    }\n                    composeTransaction(inputHexName);\n                }}\n                bottomText={<InputError error={hexError} />}\n                labelRight={\n                    <Icon\n                        size={20}\n                        icon=\"CROSS\"\n                        data-test=\"send/close-ethereum-data\"\n                        onClick={() => {\n                            if (amount === '0') {\n                                setValue('outputs[0].amount', '');\n                            }\n                            close();\n                        }}\n                    />\n                }\n            />\n        </Wrapper>\n    );\n};\n\nexport default Data;\n","import React from 'react';\nimport { Translation } from '@suite-components/Translation';\nimport styled from 'styled-components';\nimport { Button } from '@trezor/components';\nimport { useSendFormContext } from '@wallet-hooks';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n`;\n\nconst In = styled.div`\n    cursor: pointer;\n    display: flex;\n    align-items: center;\n    padding-right: 10px;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nconst Clear = () => {\n    const { resetContext, isDirty } = useSendFormContext();\n\n    if (!isDirty) return null;\n    return (\n        <Wrapper>\n            <In>\n                <Button variant=\"tertiary\" onClick={resetContext} data-test=\"clear-form\">\n                    <Translation id=\"TR_CLEAR_ALL\" />\n                </Button>\n            </In>\n        </Wrapper>\n    );\n};\n\nexport default Clear;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variables, Dropdown } from '@trezor/components';\nimport { Translation } from '@suite-components';\nimport { useActions } from '@suite-hooks';\nimport { useSendFormContext } from '@wallet-hooks';\nimport * as sendFormActions from '@wallet-actions/sendFormActions';\nimport Clear from './components/Clear';\n\nconst Wrapper = styled.div`\n    display: flex;\n    margin-bottom: 20px;\n`;\n\nconst HeaderLeft = styled.div`\n    display: flex;\n    flex: 1;\n    align-items: center;\n    font-size: ${variables.FONT_SIZE.TINY};\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n    text-transform: uppercase;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nconst HeaderRight = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n    flex: 1;\n`;\n\nconst Header = () => {\n    const {\n        outputs,\n        account: { networkType },\n        addOpReturn,\n        loadTransaction,\n    } = useSendFormContext();\n\n    const { sendRaw } = useActions({\n        sendRaw: sendFormActions.sendRaw,\n    });\n\n    const opreturnOutput = (outputs || []).find(o => o.type === 'opreturn');\n    const options = [\n        {\n            key: 'opreturn',\n            'data-test': '@send/header-dropdown/opreturn',\n            callback: addOpReturn,\n            label: <Translation id=\"OP_RETURN_ADD\" />,\n            isDisabled: !!opreturnOutput,\n            isHidden: networkType !== 'bitcoin',\n        },\n        {\n            key: 'import',\n            callback: () => {\n                loadTransaction();\n                return true;\n            },\n            label: <Translation id=\"IMPORT_CSV\" />,\n            isHidden: networkType !== 'bitcoin',\n        },\n        {\n            key: 'raw',\n            callback: () => {\n                sendRaw(true);\n                return true;\n            },\n            label: <Translation id=\"SEND_RAW\" />,\n        },\n    ];\n\n    return (\n        <Wrapper>\n            <HeaderLeft />\n            <HeaderRight>\n                <Clear />\n                <Dropdown\n                    alignMenu=\"right\"\n                    data-test=\"@send/header-dropdown\"\n                    items={[\n                        {\n                            key: 'header',\n                            options,\n                        },\n                    ]}\n                />\n            </HeaderRight>\n        </Wrapper>\n    );\n};\n\nexport default Header;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport { Translation } from '@suite-components';\nimport { Button } from '@trezor/components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst StyledButton = styled(Button)`\n    margin-right: 8px;\n    padding: 0;\n    background: none;\n`;\n\nconst Convert = ({ onClick }: any) => {\n    return (\n        <Wrapper>\n            <Translation\n                id=\"RECIPIENT_FORMAT_UPPERCASE\"\n                isNested\n                values={{\n                    convert: (\n                        <StyledButton variant=\"tertiary\" onClick={onClick}>\n                            <Translation id=\"RECIPIENT_FORMAT_UPPERCASE_CONVERT\" />\n                        </StyledButton>\n                    ),\n                }}\n            />\n        </Wrapper>\n    );\n};\n\nexport default Convert;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Input, useTheme, variables, Icon, Button } from '@trezor/components';\nimport { AddressLabeling, Translation, ReadMoreLink } from '@suite-components';\nimport { InputError } from '@wallet-components';\nimport { scanQrRequest } from '@wallet-actions/sendFormActions';\nimport { useActions } from '@suite-hooks';\nimport { useSendFormContext } from '@wallet-hooks';\nimport {\n    isAddressValid,\n    isAddressDeprecated,\n    isBech32AddressUppercase,\n} from '@wallet-utils/validation';\nimport { getInputState } from '@wallet-utils/sendFormUtils';\nimport { MAX_LENGTH } from '@suite-constants/inputs';\nimport ConvertAddress from './components/Convert';\nimport { Output } from '@wallet-types/sendForm';\n\nconst Label = styled.div`\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n`;\n\nconst Left = styled.div`\n    display: flex;\n`;\n\nconst Text = styled.div`\n    margin-right: 3px;\n`;\n\nconst Remove = styled.div`\n    display: flex;\n    cursor: pointer;\n    font-size: ${variables.FONT_SIZE.TINY};\n`;\n\nconst StyledIcon = styled(Icon)`\n    display: flex;\n`;\n\ninterface Props {\n    outputId: number;\n    outputsCount: number;\n    output: Partial<Output>;\n}\n\nconst Address = ({ output, outputId, outputsCount }: Props) => {\n    const theme = useTheme();\n    const {\n        account,\n        removeOutput,\n        composeTransaction,\n        register,\n        getDefaultValue,\n        errors,\n        setValue,\n    } = useSendFormContext();\n    const { openQrModal } = useActions({ openQrModal: scanQrRequest });\n\n    const { descriptor, networkType, symbol } = account;\n    const inputName = `outputs[${outputId}].address`;\n    const outputError = errors.outputs ? errors.outputs[outputId] : undefined;\n    const addressError = outputError ? outputError.address : undefined;\n    const addressValue = getDefaultValue(inputName, output.address || '');\n    const recipientId = outputId + 1;\n\n    return (\n        <Input\n            state={getInputState(addressError, addressValue)}\n            monospace\n            // innerAddon={\n            //     <AddLabel onClick={() => setValue(`outputs[${outputId}].labelInput`, 'enabled')} />\n            // }\n            label={\n                <Label>\n                    <Left>\n                        <Text>\n                            {outputsCount > 1 && `${recipientId}. `}\n                            <Translation id=\"RECIPIENT_ADDRESS\" />\n                        </Text>\n                    </Left>\n                </Label>\n            }\n            labelAddon={\n                <Button\n                    variant=\"tertiary\"\n                    icon=\"QR\"\n                    onClick={async () => {\n                        const result = await openQrModal();\n                        if (result) {\n                            setValue(inputName, result.address, { shouldValidate: true });\n                            if (result.amount) {\n                                setValue(`outputs[${outputId}].amount`, result.amount, {\n                                    shouldValidate: true,\n                                });\n                                // if amount is set compose by amount\n                                composeTransaction(`outputs[${outputId}].amount`);\n                            } else {\n                                // otherwise compose by address\n                                composeTransaction(inputName);\n                            }\n                        }\n                    }}\n                >\n                    <Translation id=\"RECIPIENT_SCAN\" />\n                </Button>\n            }\n            labelRight={\n                outputsCount > 1 ? (\n                    <Remove\n                        data-test={`outputs[${outputId}].remove`}\n                        onClick={() => {\n                            removeOutput(outputId);\n                            // compose by first Output\n                            composeTransaction();\n                        }}\n                    >\n                        <StyledIcon\n                            size={20}\n                            color={theme.TYPE_LIGHT_GREY}\n                            icon=\"CROSS\"\n                            useCursorPointer\n                        />\n                    </Remove>\n                ) : undefined\n            }\n            onChange={() => {\n                composeTransaction(`outputs[${outputId}].amount`);\n            }}\n            bottomText={\n                addressError ? (\n                    <InputError error={addressError} />\n                ) : (\n                    <AddressLabeling address={addressValue} knownOnly />\n                )\n            }\n            name={inputName}\n            data-test={inputName}\n            defaultValue={addressValue}\n            maxLength={MAX_LENGTH.ADDRESS}\n            innerRef={register({\n                required: 'RECIPIENT_IS_NOT_SET',\n                validate: value => {\n                    if (!isAddressValid(value, symbol)) {\n                        const addressDeprecatedUrl = isAddressDeprecated(value, symbol);\n                        if (addressDeprecatedUrl) {\n                            return (\n                                <ReadMoreLink\n                                    message=\"RECIPIENT_FORMAT_DEPRECATED\"\n                                    url={addressDeprecatedUrl}\n                                />\n                            );\n                        }\n                        return 'RECIPIENT_IS_NOT_VALID';\n                    }\n                    // bech32 addresses are valid as uppercase but are not accepted by OneKey\n                    if (networkType === 'bitcoin' && isBech32AddressUppercase(value)) {\n                        return (\n                            <ConvertAddress\n                                onClick={() => {\n                                    setValue(inputName, value.toLowerCase(), {\n                                        shouldValidate: true,\n                                    });\n                                }}\n                            />\n                        );\n                    }\n                    if (networkType === 'ripple' && value === descriptor) {\n                        return 'RECIPIENT_CANNOT_SEND_TO_MYSELF';\n                    }\n                },\n            })}\n        />\n    );\n};\n\nexport default Address;\n","import React, { useEffect } from 'react';\nimport { Controller } from 'react-hook-form';\nimport { Select } from '@trezor/components';\nimport { useSendFormContext } from '@wallet-hooks';\nimport { Account } from '@wallet-types';\nimport { Output } from '@wallet-types/sendForm';\n\ninterface Option {\n    label: string;\n    value: string | null;\n}\n\nexport const buildTokenOptions = (account: Account) => {\n    const result: Option[] = [\n        {\n            value: null,\n            label: account.symbol.toUpperCase(),\n        },\n    ];\n\n    if (account.tokens) {\n        account.tokens.forEach(token => {\n            const tokenName = token.symbol || 'N/A';\n            result.push({\n                value: token.address,\n                label: tokenName.toUpperCase(),\n            });\n        });\n    }\n\n    return result;\n};\n\ninterface Props {\n    output: Partial<Output>;\n    outputId: number;\n}\nconst TokenSelect = ({ output, outputId }: Props) => {\n    const {\n        account,\n        clearErrors,\n        control,\n        setAmount,\n        getValues,\n        getDefaultValue,\n        toggleOption,\n        composeTransaction,\n        watch,\n    } = useSendFormContext();\n\n    const tokenInputName = `outputs[${outputId}].token`;\n    const amountInputName = `outputs[${outputId}].amount`;\n    const tokenValue = getDefaultValue(tokenInputName, output.token);\n    const isSetMaxActive = getDefaultValue('setMaxOutputId') === outputId;\n    const dataEnabled = getDefaultValue('options', []).includes('ethereumData');\n    const options = buildTokenOptions(account);\n\n    // Amount needs to be re-validated again AFTER token change propagation (decimal places, available balance)\n    // watch token change and use \"useSendFormFields.setAmount\" util for validation (if amount is set)\n    // if Amount is not valid 'react-hook-form' will set an error to it, and composeTransaction will be prevented\n    // N0TE: do this conditionally only for ETH and when set-max is not enabled\n    const tokenWatch = watch(tokenInputName, null);\n    useEffect(() => {\n        if (account.networkType === 'ethereum' && !isSetMaxActive) {\n            const amountValue = getValues(`outputs[${outputId}].amount`) as string;\n            if (amountValue) setAmount(outputId, amountValue);\n        }\n    }, [outputId, tokenWatch, setAmount, getValues, account.networkType, isSetMaxActive]);\n\n    return (\n        <Controller\n            control={control}\n            name={tokenInputName}\n            data-test={tokenInputName}\n            defaultValue={tokenValue}\n            render={({ onChange }) => {\n                return (\n                    <Select\n                        options={options}\n                        isSearchable\n                        isDisabled={options.length === 1} // disable when account has no tokens to choose from\n                        hideTextCursor\n                        value={options.find(o => o.value === tokenValue)}\n                        isClearable={false}\n                        minWidth=\"45px\"\n                        isClean\n                        onChange={(selected: Option) => {\n                            // change selected value\n                            onChange(selected.value);\n                            // clear errors in Amount input\n                            clearErrors(amountInputName);\n                            // remove Amount if isSetMaxActive or ETH data options are enabled\n                            if (isSetMaxActive || dataEnabled) setAmount(outputId, '');\n                            // remove ETH data option\n                            if (dataEnabled) toggleOption('ethereumData');\n                            // compose (could be prevented because of Amount error from re-validation above)\n                            composeTransaction(amountInputName);\n                        }}\n                    />\n                );\n            }}\n        />\n    );\n};\n\nexport default TokenSelect;\n","import React from 'react';\nimport BigNumber from 'bignumber.js';\nimport styled from 'styled-components';\nimport { Controller } from 'react-hook-form';\n\nimport { Input, Select } from '@trezor/components';\nimport { InputError } from '@wallet-components';\nimport { Translation } from '@suite-components';\nimport { useSendFormContext } from '@wallet-hooks';\nimport { FIAT } from '@suite-config';\nimport { fromFiatCurrency } from '@wallet-utils/fiatConverterUtils';\nimport { getInputState, getFiatRate, findToken } from '@wallet-utils/sendFormUtils';\nimport { isDecimalsValid } from '@wallet-utils/validation';\nimport { CurrencyOption, Output } from '@wallet-types/sendForm';\nimport { MAX_LENGTH } from '@suite-constants/inputs';\n\nconst Wrapper = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: row;\n    justify-content: flex-start;\n`;\n\nexport const buildCurrencyOptions = () => {\n    const result: CurrencyOption[] = [];\n    FIAT.currencies.forEach(currency =>\n        result.push({ value: currency, label: currency.toUpperCase() }),\n    );\n    return result;\n};\n\ninterface Props {\n    output: Partial<Output>;\n    outputId: number;\n}\n\nconst Fiat = ({ output, outputId }: Props) => {\n    const {\n        account,\n        network,\n        fiatRates,\n        register,\n        errors,\n        clearErrors,\n        getDefaultValue,\n        control,\n        setValue,\n        localCurrencyOption,\n        composeTransaction,\n    } = useSendFormContext();\n\n    const inputName = `outputs[${outputId}].fiat`;\n    const currencyInputName = `outputs[${outputId}].currency`;\n    const amountInputName = `outputs[${outputId}].amount`;\n    const tokenInputName = `outputs[${outputId}].token`;\n    const isSetMaxActive = getDefaultValue('setMaxOutputId') === outputId;\n\n    const outputError = errors.outputs ? errors.outputs[outputId] : undefined;\n    const error = outputError ? outputError.fiat : undefined;\n    const fiatValue = getDefaultValue(inputName, output.fiat || '');\n    const tokenValue = getDefaultValue(tokenInputName, output.token);\n    const currencyValue =\n        getDefaultValue(currencyInputName, output.currency) || localCurrencyOption;\n    const token = findToken(account.tokens, tokenValue);\n    const decimals = token ? token.decimals : network.decimals;\n\n    // relation case:\n    // Amount input has an error and Fiat has not (but it should)\n    // usually this happens after Fiat > Amount recalculation (from here, onChange event)\n    // or as a result on composeTransaction process\n    const amountError = outputError ? outputError.amount : undefined;\n    const errorToDisplay = !error && fiatValue && amountError ? amountError : error;\n\n    return (\n        <Wrapper>\n            <Input\n                state={getInputState(errorToDisplay, fiatValue)}\n                monospace\n                onChange={event => {\n                    if (isSetMaxActive) {\n                        setValue('setMaxOutputId', undefined);\n                    }\n                    if (error) {\n                        // reset Amount field in case of invalid Fiat value\n                        if (getDefaultValue(amountInputName, '').length > 0) {\n                            setValue(amountInputName, '');\n                            clearErrors(amountInputName);\n                        }\n                        composeTransaction(amountInputName);\n                        return;\n                    }\n                    // calculate new Amount, Fiat input times currency rate\n                    // NOTE: get fresh values (currencyValue may be outdated)\n                    const { value } = getDefaultValue(currencyInputName, localCurrencyOption);\n                    const amount =\n                        fiatRates && fiatRates.current && value\n                            ? fromFiatCurrency(\n                                  event.target.value,\n                                  value,\n                                  fiatRates.current.rates,\n                                  decimals,\n                              )\n                            : null;\n                    if (amount) {\n                        // set Amount value and validate if\n                        setValue(amountInputName, amount, {\n                            shouldValidate: true,\n                        });\n                    }\n                    composeTransaction(amountInputName);\n                }}\n                name={inputName}\n                data-test={inputName}\n                defaultValue={fiatValue}\n                maxLength={MAX_LENGTH.FIAT}\n                innerRef={register({\n                    required: 'AMOUNT_IS_NOT_SET',\n                    validate: (value: string) => {\n                        const amountBig = new BigNumber(value);\n                        if (amountBig.isNaN()) {\n                            return 'AMOUNT_IS_NOT_NUMBER';\n                        }\n                        if (amountBig.lt(0)) {\n                            return 'AMOUNT_IS_TOO_LOW';\n                        }\n                        if (!isDecimalsValid(value, 2)) {\n                            return (\n                                <Translation\n                                    key=\"AMOUNT_IS_NOT_IN_RANGE_DECIMALS\"\n                                    id=\"AMOUNT_IS_NOT_IN_RANGE_DECIMALS\"\n                                    values={{ decimals: 2 }}\n                                />\n                            );\n                        }\n                    },\n                })}\n                bottomText={<InputError error={errorToDisplay} />}\n                innerAddon={\n                    <Controller\n                        control={control}\n                        name={currencyInputName}\n                        defaultValue={currencyValue}\n                        render={({ onChange, value }) => {\n                            return (\n                                <Select\n                                    options={buildCurrencyOptions()}\n                                    value={value}\n                                    isClearable={false}\n                                    isSearchable\n                                    hideTextCursor\n                                    minWidth=\"45px\"\n                                    isClean\n                                    data-test={currencyInputName}\n                                    onChange={(selected: CurrencyOption) => {\n                                        // propagate changes to FormState\n                                        onChange(selected);\n                                        // calculate Amount value\n                                        const rate = getFiatRate(fiatRates, selected.value);\n                                        const amountValue = new BigNumber(\n                                            getDefaultValue(amountInputName, ''),\n                                        );\n                                        if (rate && amountValue && !amountValue.isNaN()) {\n                                            const fiatValueBigNumber = amountValue.multipliedBy(\n                                                rate,\n                                            );\n                                            setValue(inputName, fiatValueBigNumber.toFixed(2), {\n                                                shouldValidate: true,\n                                            });\n                                            // call compose to store draft, precomposedTx should be the same\n                                            composeTransaction(amountInputName);\n                                        }\n                                    }}\n                                />\n                            );\n                        }}\n                    />\n                }\n            />\n        </Wrapper>\n    );\n};\n\nexport default Fiat;\n","import React from 'react';\nimport BigNumber from 'bignumber.js';\nimport styled from 'styled-components';\nimport { Input, Icon, Button, variables, useTheme } from '@trezor/components';\nimport { FiatValue, Translation } from '@suite-components';\nimport { InputError } from '@wallet-components';\nimport { formatNetworkAmount } from '@wallet-utils/accountUtils';\nimport { getInputState, findToken } from '@wallet-utils/sendFormUtils';\nimport { isDecimalsValid, isInteger } from '@wallet-utils/validation';\nimport { useSendFormContext } from '@wallet-hooks';\nimport { Output } from '@wallet-types/sendForm';\nimport { MAX_LENGTH } from '@suite-constants/inputs';\n\nimport TokenSelect from './components/TokenSelect';\nimport Fiat from './components/Fiat';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        flex-direction: column;\n    }\n`;\n\nconst Text = styled.div`\n    margin-right: 3px;\n`;\n\nconst StyledInput = styled(Input)`\n    display: flex;\n    flex: 1;\n`;\n\nconst Label = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Left = styled.div`\n    position: relative; /* for TokenBalance positioning */\n    display: flex;\n    flex: 1;\n    min-width: 260px;\n`;\n\nconst TokenBalance = styled.div`\n    padding: 0px 6px;\n    font-size: ${variables.NEUE_FONT_SIZE.TINY};\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nconst TokenBalanceValue = styled.span`\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst StyledTransferIcon = styled(Icon)`\n    @media all and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        transform: rotate(90deg);\n    }\n`;\nconst TransferIconWrapper = styled.div`\n    margin: 50px 20px 0px 20px;\n\n    @media all and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        /* transform: rotate(90deg); */\n        align-self: center;\n        margin: 0px;\n    }\n`;\n\nconst Right = styled.div`\n    display: flex;\n    flex: 1;\n    min-width: 260px;\n    align-items: flex-start;\n`;\n\ninterface Props {\n    output: Partial<Output>;\n    outputId: number;\n}\nconst Amount = ({ output, outputId }: Props) => {\n    const {\n        account,\n        network,\n        feeInfo,\n        localCurrencyOption,\n        register,\n        getDefaultValue,\n        errors,\n        setValue,\n        setMax,\n        calculateFiat,\n        composeTransaction,\n    } = useSendFormContext();\n\n    const theme = useTheme();\n    const inputName = `outputs[${outputId}].amount`;\n    const tokenInputName = `outputs[${outputId}].token`;\n    const isSetMaxActive = getDefaultValue('setMaxOutputId') === outputId;\n    const { symbol } = account;\n    const outputError = errors.outputs ? errors.outputs[outputId] : undefined;\n    const error = outputError ? outputError.amount : undefined;\n    // corner-case: do not display \"setMax\" button if FormState got ANY error (setMax probably cannot be calculated)\n    const isSetMaxVisible = isSetMaxActive || error || Object.keys(errors).length === 0;\n\n    const amountValue = getDefaultValue(inputName, output.amount || '');\n    const tokenValue = getDefaultValue(tokenInputName, output.token);\n    const token = findToken(account.tokens, tokenValue);\n\n    const formattedAvailableBalance = token\n        ? token.balance || '0'\n        : formatNetworkAmount(account.availableBalance, symbol);\n    const reserve =\n        account.networkType === 'ripple'\n            ? formatNetworkAmount(account.misc.reserve, symbol)\n            : undefined;\n    const tokenBalance = token ? (\n        <TokenBalanceValue>{`${token.balance} ${token.symbol!.toUpperCase()}`}</TokenBalanceValue>\n    ) : undefined;\n    const decimals = token ? token.decimals : network.decimals;\n\n    return (\n        <Wrapper>\n            <Left>\n                <StyledInput\n                    state={getInputState(error, amountValue)}\n                    monospace\n                    labelAddonIsVisible={isSetMaxActive}\n                    labelAddon={\n                        isSetMaxVisible ? (\n                            <Button\n                                icon={isSetMaxActive ? 'CHECK' : 'SEND'}\n                                data-test={`outputs[${outputId}].setMax`}\n                                onClick={() => {\n                                    setMax(outputId, isSetMaxActive);\n                                    composeTransaction(inputName);\n                                }}\n                                variant=\"tertiary\"\n                            >\n                                <Translation id=\"AMOUNT_SEND_MAX\" />\n                            </Button>\n                        ) : undefined\n                    }\n                    label={\n                        <Label>\n                            <Text>\n                                <Translation id=\"AMOUNT\" />\n                            </Text>\n                            {tokenBalance && (\n                                <TokenBalance>\n                                    <Translation\n                                        id=\"TOKEN_BALANCE\"\n                                        values={{ balance: tokenBalance }}\n                                    />\n                                </TokenBalance>\n                            )}\n                        </Label>\n                    }\n                    bottomText={<InputError error={error} />}\n                    onChange={event => {\n                        if (isSetMaxActive) {\n                            setValue('setMaxOutputId', undefined);\n                        }\n\n                        // calculate or reset Fiat value\n                        calculateFiat(outputId, !error ? event.target.value : undefined);\n\n                        composeTransaction(inputName);\n                    }}\n                    name={inputName}\n                    data-test={inputName}\n                    defaultValue={amountValue}\n                    maxLength={MAX_LENGTH.AMOUNT}\n                    innerRef={register({\n                        required: 'AMOUNT_IS_NOT_SET',\n                        validate: (value: string) => {\n                            const amountBig = new BigNumber(value);\n\n                            if (amountBig.isNaN()) {\n                                return 'AMOUNT_IS_NOT_NUMBER';\n                            }\n\n                            if (amountBig.lt(0)) {\n                                return 'AMOUNT_IS_TOO_LOW';\n                            }\n\n                            // allow 0 amount ONLY for ethereum transaction with data\n                            if (amountBig.eq(0) && !getDefaultValue('ethereumDataHex')) {\n                                return 'AMOUNT_IS_TOO_LOW';\n                            }\n\n                            // amounts below dust are not allowed\n                            const dust =\n                                feeInfo.dustLimit &&\n                                formatNetworkAmount(feeInfo.dustLimit.toString(), symbol);\n                            if (dust && amountBig.lte(dust)) {\n                                return (\n                                    <Translation\n                                        key=\"AMOUNT_IS_BELOW_DUST\"\n                                        id=\"AMOUNT_IS_BELOW_DUST\"\n                                        values={{ dust: `${dust} ${symbol.toUpperCase()}` }}\n                                    />\n                                );\n                            }\n\n                            if (amountBig.gt(formattedAvailableBalance)) {\n                                if (\n                                    reserve &&\n                                    amountBig.lt(formatNetworkAmount(account.balance, symbol))\n                                ) {\n                                    return (\n                                        <Translation\n                                            key=\"AMOUNT_IS_MORE_THAN_RESERVE\"\n                                            id=\"AMOUNT_IS_MORE_THAN_RESERVE\"\n                                            values={{ reserve }}\n                                        />\n                                    );\n                                }\n                                return 'AMOUNT_IS_NOT_ENOUGH';\n                            }\n\n                            // ERC20 without decimal places\n                            if (!decimals && !isInteger(value)) {\n                                return 'AMOUNT_IS_NOT_INTEGER';\n                            }\n\n                            if (!isDecimalsValid(value, decimals)) {\n                                return (\n                                    <Translation\n                                        key=\"AMOUNT_IS_NOT_IN_RANGE_DECIMALS\"\n                                        id=\"AMOUNT_IS_NOT_IN_RANGE_DECIMALS\"\n                                        values={{ decimals }}\n                                    />\n                                );\n                            }\n                        },\n                    })}\n                    innerAddon={<TokenSelect output={output} outputId={outputId} />}\n                />\n            </Left>\n            {/* TODO: token FIAT rates calculation */}\n            {!token && (\n                <FiatValue amount=\"1\" symbol={symbol} fiatCurrency={localCurrencyOption.value}>\n                    {({ rate }) =>\n                        rate && (\n                            <>\n                                <TransferIconWrapper>\n                                    <StyledTransferIcon\n                                        icon=\"TRANSFER\"\n                                        size={16}\n                                        color={theme.TYPE_LIGHT_GREY}\n                                    />\n                                </TransferIconWrapper>\n                                <Right>\n                                    <Fiat output={output} outputId={outputId} />\n                                </Right>\n                            </>\n                        )\n                    }\n                </FiatValue>\n            )}\n        </Wrapper>\n    );\n};\n\nexport default Amount;\n","import React, { useRef, useEffect, useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { AnimatePresence, motion, MotionProps } from 'framer-motion';\nimport { useSendFormContext } from '@wallet-hooks';\nimport Address from './components/Address';\nimport Amount from './components/Amount';\nimport OpReturn from './components/OpReturn';\nimport { ANIMATION } from '@suite-config';\n\nconst Wrapper = styled.div``;\n\nconst OutputWrapper = styled.div<{ index: number }>`\n    display: flex;\n    flex-direction: column;\n    margin: 32px 42px;\n    margin-bottom: 20px;\n\n    &:last-child {\n        margin-bottom: 0;\n    }\n\n    ${props =>\n        props.index > 0 &&\n        css`\n            margin: 0 42px;\n            padding-top: 32px;\n            border-top: 1px solid ${props => props.theme.BG_GREY};\n        `}\n`;\n\nconst Row = styled.div`\n    display: flex;\n    flex-direction: ${(props: { isColumn?: boolean }) => (props.isColumn ? 'column' : 'row')};\n    padding: 0 0 10px 0;\n\n    &:last-child {\n        padding: 0;\n    }\n`;\n\ninterface Props {\n    disableAnim?: boolean; // used in tests, with animations enabled react-testing-library can't find output fields\n}\n\nconst Outputs = ({ disableAnim }: Props) => {\n    const { outputs } = useSendFormContext();\n    const [renderedOutputs, setRenderedOutputs] = useState(1);\n    const lastOutputRef = useRef<HTMLDivElement | null>(null);\n\n    const onAddAnimationComplete = () => {\n        // scrolls only on adding outputs, doesn't scroll on removing them\n        if (outputs.length > 1 && outputs.length > renderedOutputs) {\n            lastOutputRef?.current?.scrollIntoView({ behavior: 'smooth' });\n        }\n\n        setRenderedOutputs(outputs.length);\n    };\n\n    useEffect(() => {\n        if (outputs.length < renderedOutputs) {\n            // updates rendered outputs count when removing an output\n            // this is necessary because onAddAnimationComplete is not fired when removing 2nd output\n            setRenderedOutputs(outputs.length);\n        }\n    }, [outputs.length, renderedOutputs, setRenderedOutputs]);\n\n    const customAnim: MotionProps = { ...ANIMATION.EXPAND };\n    customAnim.variants!.visible = {\n        height: 'auto',\n        transitionEnd: { overflow: 'unset' }, // overflow needs to be unset after animation (dropdowns inside)\n    };\n    const animation = outputs.length > 1 && !disableAnim ? customAnim : {}; // do not animate if there is only 1 output, prevents animation on clear\n\n    return (\n        <AnimatePresence initial={false}>\n            <Wrapper>\n                {outputs.map((output, index) => (\n                    <motion.div\n                        key={output.id}\n                        {...animation}\n                        onAnimationComplete={onAddAnimationComplete}\n                    >\n                        <OutputWrapper\n                            ref={index === outputs.length - 1 ? lastOutputRef : undefined} // set ref to last output\n                            index={index}\n                        >\n                            {output.type === 'opreturn' ? (\n                                <OpReturn outputId={index} />\n                            ) : (\n                                <>\n                                    <Row>\n                                        <Address\n                                            output={outputs[index]}\n                                            outputId={index}\n                                            outputsCount={outputs.length}\n                                        />\n                                    </Row>\n                                    <Row>\n                                        <Amount output={outputs[index]} outputId={index} />\n                                    </Row>\n                                </>\n                            )}\n                        </OutputWrapper>\n                    </motion.div>\n                ))}\n            </Wrapper>\n        </AnimatePresence>\n    );\n};\n\nexport default Outputs;\n","import React from 'react';\nimport BigNumber from 'bignumber.js';\nimport styled from 'styled-components';\nimport { Translation } from '@suite-components';\nimport { InputError } from '@wallet-components';\nimport { useSendFormContext } from '@wallet-hooks';\nimport { Icon, Input, Switch, variables } from '@trezor/components';\nimport { getInputState } from '@wallet-utils/sendFormUtils';\nimport { isInteger } from '@wallet-utils/validation';\nimport { MAX_LENGTH } from '@suite-constants/inputs';\nimport { isEnabled as isFeatureEnabled } from '@suite-utils/features';\n\nconst Wrapper = styled.div`\n    margin-bottom: 25px;\n`;\n\nconst Label = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Text = styled.div`\n    margin-left: 8px;\n`;\n\nconst RbfMessage = styled.div`\n    display: flex;\n    flex: 1;\n    margin-top: 10px;\n`;\n\nconst Left = styled.div`\n    margin-right: 8px;\n`;\n\nconst Center = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n`;\n\nconst Right = styled.div`\n    display: flex;\n    align-items: center;\n    max-width: 40px;\n`;\n\nconst Title = styled.div`\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    font-size: ${variables.FONT_SIZE.NORMAL};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n`;\n\nconst Description = styled.div`\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    font-size: ${variables.FONT_SIZE.SMALL};\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\ninterface Props {\n    close: () => void;\n}\n\nconst Locktime = ({ close }: Props) => {\n    const {\n        network,\n        register,\n        getDefaultValue,\n        setValue,\n        toggleOption,\n        errors,\n        composeTransaction,\n    } = useSendFormContext();\n\n    const options = getDefaultValue('options', []);\n    const rbfEnabled = options.includes('bitcoinRBF');\n    const broadcastEnabled = options.includes('broadcast');\n    const inputName = 'bitcoinLockTime';\n    const inputValue = getDefaultValue(inputName) || '';\n    const error = errors[inputName];\n\n    return (\n        <Wrapper>\n            <Input\n                state={getInputState(error, inputValue)}\n                monospace\n                name={inputName}\n                data-test={inputName}\n                defaultValue={inputValue}\n                maxLength={MAX_LENGTH.BTC_LOCKTIME}\n                innerRef={register({\n                    required: 'LOCKTIME_IS_NOT_SET',\n                    validate: (value: string) => {\n                        const amountBig = new BigNumber(value);\n                        if (amountBig.isNaN()) {\n                            return 'LOCKTIME_IS_NOT_NUMBER';\n                        }\n                        if (amountBig.lte(0)) {\n                            return 'LOCKTIME_IS_TOO_LOW';\n                        }\n                        if (!isInteger(value)) {\n                            return 'LOCKTIME_IS_NOT_INTEGER';\n                        }\n                        // max unix timestamp * 2 (2147483647 * 2)\n                        if (amountBig.gt(4294967294)) {\n                            return 'LOCKTIME_IS_TOO_BIG';\n                        }\n                    },\n                })}\n                onChange={() => {\n                    if (!error) {\n                        if (rbfEnabled) toggleOption('bitcoinRBF');\n                        if (broadcastEnabled) toggleOption('broadcast');\n                    }\n                    composeTransaction(inputName);\n                }}\n                label={\n                    <Label>\n                        <Icon size={16} icon=\"CALENDAR\" />\n                        <Text>\n                            <Translation id=\"LOCKTIME_SCHEDULE_SEND\" />\n                        </Text>\n                    </Label>\n                }\n                labelRight={<Icon size={20} icon=\"CROSS\" onClick={close} />}\n                bottomText={<InputError error={error} />}\n            />\n            {isFeatureEnabled('RBF') && network.features?.includes('rbf') && (\n                <RbfMessage>\n                    <Left>\n                        <Icon size={16} icon=\"RBF\" />\n                    </Left>\n                    <Center>\n                        <Title>\n                            <Translation id={rbfEnabled ? 'RBF_ON' : 'RBF_OFF'} />\n                        </Title>\n                        <Description>\n                            <Translation id=\"RBF_DESCRIPTION\" />\n                        </Description>\n                    </Center>\n                    <Right>\n                        <Switch\n                            checked={rbfEnabled}\n                            onChange={() => {\n                                if (inputValue.length > 0) {\n                                    setValue(inputName, '');\n                                }\n                                toggleOption('bitcoinRBF');\n                                composeTransaction(inputName);\n                            }}\n                        />\n                    </Right>\n                </RbfMessage>\n            )}\n        </Wrapper>\n    );\n};\n\nexport default Locktime;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Translation } from '@suite-components';\nimport { OnOffSwitcher } from '@wallet-components';\nimport { Button } from '@trezor/components';\nimport { useSendFormContext } from '@wallet-hooks';\nimport { isEnabled as isFeatureEnabled } from '@suite-utils/features';\n\nimport Locktime from './components/Locktime';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n`;\n\nconst Row = styled.div`\n    display: flex;\n    flex-flow: row wrap;\n    flex: 1;\n    justify-content: space-between;\n`;\n\nconst Left = styled.div`\n    display: flex;\n    flex: 1;\n    justify-content: flex-start;\n    flex-wrap: wrap;\n`;\n\nconst AddRecipientButton = styled(Button)`\n    align-self: center;\n`;\n\nconst Right = styled.div`\n    display: flex;\n`;\n\nconst StyledButton = styled(Button)`\n    margin: 4px 8px 4px 0px;\n`;\n\nconst BitcoinOptions = () => {\n    const {\n        network,\n        addOutput,\n        getDefaultValue,\n        toggleOption,\n        composeTransaction,\n        resetDefaultValue,\n    } = useSendFormContext();\n\n    const options = getDefaultValue('options', []);\n    const locktimeEnabled = options.includes('bitcoinLockTime');\n    const rbfEnabled = options.includes('bitcoinRBF');\n    const broadcastEnabled = options.includes('broadcast');\n\n    return (\n        <Wrapper>\n            {locktimeEnabled && (\n                <Locktime\n                    close={() => {\n                        resetDefaultValue('bitcoinLockTime');\n                        // close additional form\n                        if (!rbfEnabled) toggleOption('bitcoinRBF');\n                        if (!broadcastEnabled) toggleOption('broadcast');\n                        toggleOption('bitcoinLockTime');\n                        composeTransaction();\n                    }}\n                />\n            )}\n\n            <Row>\n                <Left>\n                    {!locktimeEnabled && (\n                        <StyledButton\n                            variant=\"tertiary\"\n                            icon=\"CALENDAR\"\n                            onClick={() => {\n                                // open additional form\n                                toggleOption('bitcoinLockTime');\n                                composeTransaction();\n                            }}\n                        >\n                            <Translation id=\"LOCKTIME_ADD\" />\n                        </StyledButton>\n                    )}\n                    {isFeatureEnabled('RBF') &&\n                        network.features?.includes('rbf') &&\n                        !locktimeEnabled && (\n                            <StyledButton\n                                variant=\"tertiary\"\n                                icon=\"RBF\"\n                                onClick={() => {\n                                    toggleOption('bitcoinRBF');\n                                    composeTransaction();\n                                }}\n                            >\n                                <Translation id=\"RBF\" />\n                                <OnOffSwitcher isOn={rbfEnabled} />\n                            </StyledButton>\n                        )}\n                    <StyledButton\n                        variant=\"tertiary\"\n                        icon=\"BROADCAST\"\n                        onClick={() => {\n                            toggleOption('broadcast');\n                            composeTransaction();\n                        }}\n                    >\n                        <Translation id=\"BROADCAST\" />\n                        <OnOffSwitcher isOn={broadcastEnabled} />\n                    </StyledButton>\n                </Left>\n                <Right>\n                    <AddRecipientButton\n                        variant=\"tertiary\"\n                        icon=\"PLUS\"\n                        data-test=\"add-output\"\n                        onClick={addOutput}\n                    >\n                        <Translation id=\"RECIPIENT_ADD\" />\n                    </AddRecipientButton>\n                </Right>\n            </Row>\n        </Wrapper>\n    );\n};\n\nexport default BitcoinOptions;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@trezor/components';\nimport { Translation } from '@suite-components';\nimport { OnOffSwitcher } from '@wallet-components';\nimport { useSendFormContext } from '@wallet-hooks';\nimport Data from './components/Data';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n`;\n\nconst Left = styled.div`\n    display: flex;\n    flex: 1;\n    justify-content: flex-start;\n`;\n\nconst StyledButton = styled(Button)`\n    margin-right: 8px;\n`;\n\nconst EthereumOptions = () => {\n    const {\n        getDefaultValue,\n        toggleOption,\n        composeTransaction,\n        resetDefaultValue,\n    } = useSendFormContext();\n\n    const options = getDefaultValue('options', []);\n    const dataEnabled = options.includes('ethereumData');\n    const tokenValue = getDefaultValue<string, string | undefined>('outputs[0].token', undefined);\n    const broadcastEnabled = options.includes('broadcast');\n\n    return (\n        <Wrapper>\n            {dataEnabled && (\n                <Data\n                    close={() => {\n                        resetDefaultValue('ethereumDataAscii');\n                        resetDefaultValue('ethereumDataHex');\n                        // close additional form\n                        toggleOption('ethereumData');\n                        composeTransaction();\n                    }}\n                />\n            )}\n            <Left>\n                {!dataEnabled && !tokenValue && (\n                    <StyledButton\n                        variant=\"tertiary\"\n                        icon=\"DATA\"\n                        data-test=\"send/open-ethereum-data\"\n                        onClick={() => {\n                            // open additional form\n                            toggleOption('ethereumData');\n                            composeTransaction();\n                        }}\n                    >\n                        <Translation id=\"DATA_ETH_ADD\" />\n                    </StyledButton>\n                )}\n                <StyledButton\n                    variant=\"tertiary\"\n                    icon=\"BROADCAST\"\n                    data-test=\"send/broadcast\"\n                    onClick={() => {\n                        toggleOption('broadcast');\n                        composeTransaction();\n                    }}\n                >\n                    <Translation id=\"BROADCAST\" />\n                    <OnOffSwitcher isOn={broadcastEnabled} />\n                </StyledButton>\n            </Left>\n        </Wrapper>\n    );\n};\n\nexport default EthereumOptions;\n","import React from 'react';\nimport BigNumber from 'bignumber.js';\nimport { Input, Icon } from '@trezor/components';\nimport { QuestionTooltip } from '@suite-components';\nimport { InputError } from '@wallet-components';\nimport { useSendFormContext } from '@wallet-hooks';\nimport { getInputState } from '@wallet-utils/sendFormUtils';\nimport { isInteger } from '@wallet-utils/validation';\nimport { U_INT_32 } from '@wallet-constants/sendForm';\nimport { MAX_LENGTH } from '@suite-constants/inputs';\n\ninterface Props {\n    close: () => void;\n}\n\nconst DestinationTag = ({ close }: Props) => {\n    const { register, getDefaultValue, errors, composeTransaction } = useSendFormContext();\n\n    const inputName = 'rippleDestinationTag';\n    const inputValue = getDefaultValue(inputName) || '';\n    const error = errors[inputName];\n\n    return (\n        <Input\n            state={getInputState(error, inputValue)}\n            monospace\n            name={inputName}\n            data-test={inputName}\n            defaultValue={inputValue}\n            maxLength={MAX_LENGTH.XRP_DESTINATION_TAG}\n            innerRef={register({\n                required: 'DESTINATION_TAG_NOT_SET',\n                validate: (value: string) => {\n                    const amountBig = new BigNumber(value);\n                    if (amountBig.isNaN()) {\n                        return 'DESTINATION_TAG_IS_NOT_NUMBER';\n                    }\n                    if (!isInteger(value) || amountBig.lt(0) || amountBig.gt(U_INT_32)) {\n                        return 'DESTINATION_TAG_IS_NOT_VALID';\n                    }\n                },\n            })}\n            onChange={() => {\n                composeTransaction(inputName);\n            }}\n            label={<QuestionTooltip label=\"DESTINATION_TAG\" tooltip=\"DESTINATION_TAG_EXPLAINED\" />}\n            labelRight={<Icon size={20} icon=\"CROSS\" useCursorPointer onClick={close} />}\n            bottomText={<InputError error={error} />}\n        />\n    );\n};\n\nexport default DestinationTag;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useSendFormContext } from '@wallet-hooks';\nimport { Translation } from '@suite-components';\nimport { OnOffSwitcher } from '@wallet-components';\nimport { Button } from '@trezor/components';\nimport DestinationTag from './components/DestinationTag';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n`;\n\nconst Left = styled.div`\n    display: flex;\n    flex: 1;\n    justify-content: flex-start;\n`;\n\nconst StyledButton = styled(Button)`\n    margin-right: 8px;\n`;\n\nconst RippleOptions = () => {\n    const {\n        getDefaultValue,\n        toggleOption,\n        composeTransaction,\n        resetDefaultValue,\n    } = useSendFormContext();\n\n    const options = getDefaultValue('options', []);\n    const destinationEnabled = options.includes('rippleDestinationTag');\n    const broadcastEnabled = options.includes('broadcast');\n\n    return (\n        <Wrapper>\n            {destinationEnabled && (\n                <DestinationTag\n                    close={() => {\n                        resetDefaultValue('rippleDestinationTag');\n                        // close additional form\n                        toggleOption('rippleDestinationTag');\n                        composeTransaction();\n                    }}\n                />\n            )}\n            <Left>\n                {!destinationEnabled && (\n                    <StyledButton\n                        variant=\"tertiary\"\n                        icon=\"DATA\"\n                        onClick={() => {\n                            // open additional form\n                            toggleOption('rippleDestinationTag');\n                            composeTransaction();\n                        }}\n                    >\n                        <Translation id=\"DESTINATION_TAG\" />\n                    </StyledButton>\n                )}\n\n                <StyledButton\n                    variant=\"tertiary\"\n                    icon=\"BROADCAST\"\n                    onClick={() => {\n                        toggleOption('broadcast');\n                        composeTransaction();\n                    }}\n                >\n                    <Translation id=\"BROADCAST\" />\n                    <OnOffSwitcher isOn={broadcastEnabled} />\n                </StyledButton>\n            </Left>\n        </Wrapper>\n    );\n};\n\nexport default RippleOptions;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useSendFormContext } from '@wallet-hooks';\n\nimport BitcoinOptions from './components/BitcoinOptions';\nimport EthereumOptions from './components/EthereumOptions';\nimport RippleOptions from './components/RippleOptions';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n`;\n\nconst Content = styled.div`\n    display: flex;\n    padding: 32px 42px;\n`;\n\nconst Line = styled.div`\n    width: 100%;\n    height: 1px;\n    border-top: 1px solid ${props => props.theme.STROKE_GREY};\n    margin-top: 10px;\n`;\n\nconst Options = () => {\n    const {\n        account: { networkType },\n    } = useSendFormContext();\n\n    return (\n        <Wrapper>\n            <Line />\n            <Content>\n                {networkType === 'bitcoin' && <BitcoinOptions />}\n                {networkType === 'ethereum' && <EthereumOptions />}\n                {networkType === 'ripple' && <RippleOptions />}\n            </Content>\n        </Wrapper>\n    );\n};\n\nexport default Options;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Card } from '@suite-components';\nimport Fees from '@wallet-components/Fees';\nimport { useSendFormContext } from '@wallet-hooks';\n\nconst StyledCard = styled(Card)`\n    display: flex;\n    margin-bottom: 25px;\n    padding: 32px 42px;\n    box-shadow: 0 1px 20px rgba(0, 0, 0, 0.05);\n`;\n\n// wrapper for shareable Fees component\nconst SendFees = () => {\n    const {\n        errors,\n        register,\n        setValue,\n        getValues,\n        changeFeeLevel,\n        account,\n        feeInfo,\n        composedLevels,\n    } = useSendFormContext();\n\n    return (\n        <StyledCard>\n            <Fees\n                errors={errors}\n                register={register}\n                feeInfo={feeInfo}\n                setValue={setValue}\n                getValues={getValues}\n                account={account}\n                composedLevels={composedLevels}\n                changeFeeLevel={changeFeeLevel}\n                showLabel\n            />\n        </StyledCard>\n    );\n};\n\nexport default SendFees;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variables } from '@trezor/components';\nimport { useSendFormContext } from '@wallet-hooks';\nimport { formatNetworkAmount, formatAmount } from '@wallet-utils/accountUtils';\nimport { Card, Translation, FiatValue, FormattedCryptoAmount } from '@suite-components';\n\nconst StyledCard = styled(Card)`\n    display: flex;\n    flex-direction: row;\n    justify-items: space-between;\n    align-items: center;\n    min-height: 86px;\n    padding: 0 42px;\n    box-shadow: 0 1px 20px rgba(0, 0, 0, 0.05);\n`;\n\nconst Left = styled.div`\n    display: flex;\n    flex: 1;\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst Label = styled.div`\n    padding-right: 10px;\n    text-transform: capitalize;\n    font-size: ${variables.FONT_SIZE.NORMAL};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n`;\n\nconst SecondaryLabel = styled.div`\n    padding-top: 2px;\n    font-size: ${variables.FONT_SIZE.SMALL};\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nconst Right = styled.div`\n    display: flex;\n    flex: 1;\n    justify-content: center;\n    flex-direction: column;\n    align-items: flex-end;\n`;\n\nconst TotalSentCoin = styled.div`\n    display: flex;\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    font-size: ${variables.FONT_SIZE.NORMAL};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    padding-bottom: 6px;\n`;\n\nconst TotalSentFiat = styled.div`\n    display: flex;\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    font-size: ${variables.FONT_SIZE.NORMAL};\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nconst TotalSent = () => {\n    const {\n        account: { symbol, networkType },\n        composedLevels,\n        getValues,\n    } = useSendFormContext();\n\n    const selectedFee = getValues().selectedFee || 'normal';\n    const transactionInfo = composedLevels ? composedLevels[selectedFee] : undefined;\n    const isTokenTransfer = networkType === 'ethereum' && !!getValues('outputs[0].token');\n    const tokenInfo =\n        transactionInfo && transactionInfo.type !== 'error' ? transactionInfo.token : undefined;\n\n    return (\n        <StyledCard>\n            <Left>\n                <Label>\n                    <Translation id=\"TOTAL_SENT\" />\n                </Label>\n                {!isTokenTransfer && (\n                    <SecondaryLabel>\n                        <Translation id=\"INCLUDING_FEE\" />\n                    </SecondaryLabel>\n                )}\n            </Left>\n            {transactionInfo && transactionInfo.type !== 'error' && (\n                <Right>\n                    <TotalSentCoin>\n                        <FormattedCryptoAmount\n                            disableHiddenPlaceholder\n                            value={\n                                tokenInfo\n                                    ? formatAmount(transactionInfo.totalSpent, tokenInfo.decimals)\n                                    : formatNetworkAmount(transactionInfo.totalSpent, symbol)\n                            }\n                            symbol={tokenInfo ? tokenInfo.symbol : symbol}\n                        />\n                    </TotalSentCoin>\n                    <TotalSentFiat>\n                        {tokenInfo ? (\n                            <>\n                                <Translation id=\"FEE\" />\n                                &nbsp;\n                                <FormattedCryptoAmount\n                                    disableHiddenPlaceholder\n                                    value={formatNetworkAmount(transactionInfo.fee, symbol)}\n                                    symbol={symbol}\n                                />\n                            </>\n                        ) : (\n                            <FiatValue\n                                disableHiddenPlaceholder\n                                amount={formatNetworkAmount(transactionInfo.totalSpent, symbol)}\n                                symbol={symbol}\n                            />\n                        )}\n                    </TotalSentFiat>\n                </Right>\n            )}\n        </StyledCard>\n    );\n};\n\nexport default TotalSent;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button } from '@trezor/components';\nimport { useDevice } from '@suite-hooks';\nimport { useSendFormContext } from '@wallet-hooks';\nimport { Translation } from '@suite-components/Translation';\n\nconst Wrapper = styled.div`\n    display: flex;\n    justify-content: center;\n    margin: 25px 0;\n    flex-direction: column;\n`;\n\nconst ButtonReview = styled(Button)`\n    min-width: 200px;\n    margin-bottom: 5px;\n`;\n\nconst Row = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    padding-bottom: 5px;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n\n    &:last-child {\n        padding-bottom: 0;\n    }\n`;\n\nconst ReviewButton = () => {\n    const { device, isLocked } = useDevice();\n    const {\n        online,\n        isLoading,\n        signTransaction,\n        getValues,\n        getDefaultValue,\n        composedLevels,\n    } = useSendFormContext();\n\n    const values = getValues();\n    const broadcastEnabled = getDefaultValue('options', []).includes('broadcast');\n    const composedTx = composedLevels ? composedLevels[values.selectedFee || 'normal'] : undefined;\n    const isDisabled =\n        !composedTx ||\n        composedTx.type !== 'final' ||\n        isLocked() ||\n        (device && !device.available) ||\n        !online;\n\n    return (\n        <Wrapper>\n            <Row>\n                <ButtonReview\n                    data-test=\"@send/review-button\"\n                    isDisabled={isDisabled || isLoading}\n                    onClick={signTransaction}\n                >\n                    {broadcastEnabled ? (\n                        <Translation id=\"REVIEW_AND_SEND_TRANSACTION\" />\n                    ) : (\n                        <Translation id=\"SIGN_TRANSACTION\" />\n                    )}\n                </ButtonReview>\n            </Row>\n        </Wrapper>\n    );\n};\n\nexport default ReviewButton;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useForm } from 'react-hook-form';\nimport { Card, Translation } from '@suite-components';\nimport { InputError } from '@wallet-components';\nimport { Textarea, Button, Icon } from '@trezor/components';\nimport { useActions } from '@suite-hooks';\nimport * as sendFormActions from '@wallet-actions/sendFormActions';\nimport { getInputState } from '@wallet-utils/sendFormUtils';\nimport { isHexValid } from '@wallet-utils/validation';\nimport { Network } from '@wallet-types';\n\nconst Wrapper = styled.div`\n    /* display: flex;\n    padding: 6px 12px; */\n`;\n\nconst StyledCard = styled(Card)`\n    display: flex;\n    flex-direction: row;\n    justify-items: space-between;\n    align-items: center;\n    padding: 32px 42px;\n`;\n\nconst Label = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst IconWrapper = styled.div`\n    display: flex;\n    padding: 8px 12px 8px 12px; /* custom padding to solve jumping content */\n    justify-content: flex-end;\n`;\n\nconst ButtonWrapper = styled.div`\n    display: flex;\n    margin: 25px 0;\n    justify-content: center;\n`;\n\nconst ButtonSend = styled(Button)`\n    min-width: 200px;\n    margin-bottom: 5px;\n`;\n\nconst Raw = ({ network }: { network: Network }) => {\n    const { register, getValues, setValue, errors } = useForm({\n        mode: 'onChange',\n        defaultValues: {\n            rawTx: '',\n        },\n    });\n\n    const { sendRaw, pushRawTransaction } = useActions({\n        sendRaw: sendFormActions.sendRaw,\n        pushRawTransaction: sendFormActions.pushRawTransaction,\n    });\n\n    const inputName = 'rawTx';\n    const inputValue = getValues(inputName) || '';\n    const error = errors[inputName];\n    const inputState = getInputState(error, inputValue);\n\n    return (\n        <Wrapper>\n            <IconWrapper>\n                <Icon size={20} icon=\"CROSS\" onClick={() => sendRaw(false)} />\n            </IconWrapper>\n            <StyledCard>\n                <Textarea\n                    state={inputState}\n                    monospace\n                    name={inputName}\n                    data-test={inputName}\n                    defaultValue={inputValue}\n                    innerRef={register({\n                        required: 'RAW_TX_NOT_SET',\n                        validate: (value: string) => {\n                            if (\n                                !isHexValid(\n                                    value,\n                                    network.networkType === 'ethereum' ? '0x' : undefined,\n                                )\n                            )\n                                return 'DATA_NOT_VALID_HEX';\n                        },\n                    })}\n                    bottomText={<InputError error={error} />}\n                    label={\n                        <Label>\n                            <Translation id=\"SEND_RAW_TRANSACTION\" />\n                        </Label>\n                    }\n                />\n            </StyledCard>\n            <ButtonWrapper>\n                <ButtonSend\n                    isDisabled={inputState !== 'success'}\n                    onClick={async () => {\n                        const result = await pushRawTransaction(inputValue, network.symbol);\n                        if (result) {\n                            setValue(inputName, '');\n                        }\n                    }}\n                >\n                    <Translation id=\"SEND_TRANSACTION\" />\n                </ButtonSend>\n            </ButtonWrapper>\n        </Wrapper>\n    );\n};\n\nexport default Raw;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Card } from '@suite-components';\nimport { WalletLayout } from '@wallet-components';\nimport { useSendForm, SendContext } from '@wallet-hooks/useSendForm';\nimport { useSelector } from '@suite-hooks';\n\nimport Header from './components/Header';\nimport Outputs from './components/Outputs';\nimport Options from './components/Options';\nimport Fees from './components/Fees';\nimport TotalSent from './components/TotalSent';\nimport ReviewButton from './components/ReviewButton';\nimport Raw from './components/Raw';\nimport { UseSendFormProps } from '@wallet-types/sendForm';\n\nconst StyledCard = styled(Card)`\n    display: flex;\n    flex-direction: column;\n    margin-bottom: 25px;\n    padding: 0;\n    box-shadow: 0 1px 20px rgba(0, 0, 0, 0.05);\n`;\n\n// inner component for selectedAccount.status = \"loaded\"\n// separated to call `useSendForm` hook at top level\n// children are only for test purposes, this prop is not available in regular build\nconst SendLoaded: React.FC<UseSendFormProps> = ({ children, ...props }) => {\n    const sendContextValues = useSendForm(props);\n    return (\n        <WalletLayout title=\"TR_NAV_SEND\" account={props.selectedAccount}>\n            <SendContext.Provider value={sendContextValues}>\n                <StyledCard customHeader={<Header />}>\n                    <Outputs disableAnim={!!children} />\n                    <Options />\n                </StyledCard>\n                <Fees />\n                <TotalSent />\n                <ReviewButton />\n                {children}\n            </SendContext.Provider>\n        </WalletLayout>\n    );\n};\n\nconst Send: React.FC = ({ children }) => {\n    const props = useSelector(state => ({\n        selectedAccount: state.wallet.selectedAccount,\n        fiat: state.wallet.fiat,\n        localCurrency: state.wallet.settings.localCurrency,\n        fees: state.wallet.fees,\n        online: state.suite.online,\n        sendRaw: state.wallet.send.sendRaw,\n    }));\n\n    const { selectedAccount } = props;\n\n    if (selectedAccount.status !== 'loaded') {\n        return <WalletLayout title=\"TR_NAV_SEND\" account={selectedAccount} />;\n    }\n\n    if (props.sendRaw) {\n        return (\n            <WalletLayout title=\"TR_NAV_SEND\" account={selectedAccount}>\n                <Raw network={selectedAccount.network} />\n            </WalletLayout>\n        );\n    }\n\n    /* children are only for test purposes, this prop is not available in regular build */\n    return (\n        <SendLoaded {...props} selectedAccount={selectedAccount}>\n            {children}\n        </SendLoaded>\n    );\n};\n\nexport default Send;\n","import Send from '@wallet-views/send';\n\nexport default Send;\n"],"sourceRoot":""}