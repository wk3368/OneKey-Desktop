{"version":3,"sources":["webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?b7c0","webpack://_N_E/../suite/src/views/wallet/receive/components/FreshAddress/index.tsx","webpack://_N_E/../suite/src/views/wallet/receive/components/UsedAddresses/index.tsx","webpack://_N_E/../suite/src/views/wallet/receive/index.tsx","webpack://_N_E/../suite/src/views/wallet/receive/Container.ts","webpack://_N_E/./pages/accounts/receive/index.tsx"],"names":["window","__NEXT_P","push","StyledCard","styled","Card","variables","SCREEN_SIZE","LG","AddressContainer","div","StyledButton","Button","FreshAddressWrapper","StyledFreshAddress","span","props","theme","TYPE_DARK_GREY","FONT_SIZE","H2","AddressLabel","TYPE_LIGHT_GREY","TINY","TooltipLabel","BG_WHITE","symbol","isBitcoin","addressLabel","id","label","tooltip","message","url","FreshAddress","account","addresses","showAddress","disabled","pendingAddresses","locked","networkType","unused","path","address","descriptor","transfers","history","total","unrevealed","filter","a","find","r","p","firstFreshAddress","addressValue","slice","data-test","onClick","isDisabled","GridTable","SMALL","GridItem","STROKE_GREY","css","GridItemAddress","AddressActions","hide","Gray","HeaderItem","Actions","AddressWrapper","Overlay","Item","addr","metadataPayload","index","isHovered","setIsHovered","React","useState","amount","formatNetworkAmount","received","fresh","substring","onMouseEnter","onMouseLeave","payload","defaultVisibleValue","variant","UsedAddresses","limit","setLimit","used","addressLabels","metadata","list","reduce","result","u","concat","reverse","length","actionButtonsVisible","actionShowVisible","actionHideVisible","map","key","type","accountKey","defaultValue","value","undefined","icon","alignIcon","Receive","selectedAccount","receive","device","isLocked","useDevice","isDeviceLocked","transactions","useSelector","state","wallet","status","title","authConfirm","pendingTxs","getAccountTransactions","isPending","forEach","t","targets","target","unshift","showEmptyHeaderPlaceholder","connect","suite","modal","dispatch","bindActionCreators","receiveActions","addMetadata","metadataActions","ReceiveIndex","Account"],"mappings":"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","file":"static/chunks/pages/accounts/receive-96c083226f3c49e498d7.js","sourcesContent":["\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/accounts/receive\",\n        function () {\n          return require(\"private-next-pages/accounts/receive/index.tsx\");\n        }\n      ]);\n    ","import React from 'react';\nimport styled from 'styled-components';\nimport { Button, Card, variables } from '@trezor/components';\nimport { Translation, QuestionTooltip, ReadMoreLink } from '@suite-components';\nimport { ChildProps as Props } from '../../Container';\nimport { AccountAddress } from '@onekeyhq/connect';\n\nconst StyledCard = styled(Card)`\n    width: 100%;\n    flex-direction: row;\n    margin-bottom: 40px;\n    align-items: center;\n    justify-content: space-between;\n    flex-wrap: wrap;\n    padding: 32px 42px;\n\n    @media all and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        button {\n            width: 100%;\n            margin-left: auto;\n            margin-top: 12px;\n        }\n    }\n`;\n\nconst AddressContainer = styled.div`\n    flex: 1;\n`;\n\nconst StyledButton = styled(Button)`\n    min-width: 220px;\n    margin-left: 20px;\n`;\n\nconst FreshAddressWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    position: relative;\n    margin-top: 8px;\n`;\n\nconst StyledFreshAddress = styled.span`\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    font-size: ${variables.FONT_SIZE.H2};\n`;\nconst AddressLabel = styled.span`\n    font-weight: 600;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-size: ${variables.FONT_SIZE.TINY};\n    letter-spacing: 0.2px;\n    text-transform: uppercase;\n    font-variant-numeric: slashed-zero tabular-nums;\n`;\n\nconst Overlay = styled.div`\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n    position: absolute;\n    background-image: linear-gradient(\n        to right,\n        rgba(0, 0, 0, 0) 0%,\n        ${props => props.theme.BG_WHITE} 180px,\n        ${props => props.theme.BG_WHITE} 220px,\n        rgba(0, 0, 0, 0) 100%\n    );\n`;\n\nconst TooltipLabel = ({ symbol, isBitcoin }: { symbol: string; isBitcoin: boolean }) => {\n    const addressLabel = (\n        <AddressLabel>\n            <Translation id={isBitcoin ? 'RECEIVE_ADDRESS_FRESH' : 'RECEIVE_ADDRESS'} />\n        </AddressLabel>\n    );\n\n    if (symbol === 'ltc') {\n        // additional tooltip with LTC addresses explanation\n        return (\n            <QuestionTooltip\n                label={addressLabel}\n                tooltip={<ReadMoreLink message=\"TR_LTC_ADDRESS_INFO\" url=\"LTC_ADDRESS_INFO_URL\" />}\n            />\n        );\n    }\n    if (symbol === 'bch') {\n        // additional tooltip with BCH addresses explanation\n        return (\n            <QuestionTooltip\n                label={addressLabel}\n                tooltip={<ReadMoreLink message=\"TR_BCH_ADDRESS_INFO\" url=\"BCH_ADDRESS_INFO_URL\" />}\n            />\n        );\n    }\n    return addressLabel;\n};\n\nconst FreshAddress = ({\n    account,\n    addresses,\n    showAddress,\n    disabled,\n    pendingAddresses,\n    locked,\n}: Props) => {\n    const isBitcoin = account.networkType === 'bitcoin';\n    const unused = account.addresses\n        ? account.addresses.unused\n        : [\n              {\n                  path: account.path,\n                  address: account.descriptor,\n                  transfers: account.history.total,\n              },\n          ];\n\n    const unrevealed = unused.filter(\n        a =>\n            !addresses.find(r => r.path === a.path) && !pendingAddresses.find(p => p === a.address),\n    );\n    // const addressLabel = isBitcoin ? 'RECEIVE_ADDRESS_FRESH' : 'RECEIVE_ADDRESS';\n    // NOTE: unrevealed[0] can be undefined (limit exceeded)\n    const firstFreshAddress = isBitcoin ? unrevealed[0] : unused[0];\n\n    const getAddressValue = (address?: AccountAddress) => {\n        if (!address) {\n            return <Translation id=\"RECEIVE_ADDRESS_LIMIT_EXCEEDED\" />;\n        }\n\n        return `${address.address.slice(0, 12)} ... ${address.address.slice(-12)}`;\n    };\n\n    const addressValue = getAddressValue(firstFreshAddress);\n\n    return (\n        <StyledCard>\n            <AddressContainer>\n                <TooltipLabel isBitcoin={isBitcoin} symbol={account.symbol} />\n                <FreshAddressWrapper>\n                    {/* <Overlay /> */}\n                    <StyledFreshAddress>{addressValue}</StyledFreshAddress>\n                </FreshAddressWrapper>\n            </AddressContainer>\n            <StyledButton\n                data-test=\"@wallet/receive/reveal-address-button\"\n                onClick={() => showAddress(firstFreshAddress.path, firstFreshAddress.address)}\n                isDisabled={disabled || locked || !firstFreshAddress}\n            >\n                <Translation id=\"RECEIVE_ADDRESS_REVEAL\" />\n            </StyledButton>\n        </StyledCard>\n    );\n};\n\nexport default FreshAddress;\n","import React, { useState } from 'react';\nimport styled, { css } from 'styled-components';\nimport { variables, Button } from '@trezor/components';\nimport { Card, Translation, HiddenPlaceholder, MetadataLabeling } from '@suite-components';\nimport { formatNetworkAmount } from '@wallet-utils/accountUtils';\nimport { ChildProps as Props } from '../../Container';\nimport { AccountAddress } from '@onekeyhq/connect';\nimport { Network } from '@wallet-types';\nimport { MetadataAddPayload } from '@suite-types/metadata';\n\nconst StyledCard = styled(Card)`\n    flex-direction: column;\n    margin-bottom: 40px;\n    /* padding: 25px; */\n    padding: 0px;\n    overflow: hidden;\n`;\n\nconst GridTable = styled.div`\n    display: grid;\n    grid-template-columns: 0.65fr 0.35fr auto;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-size: ${variables.FONT_SIZE.SMALL};\n`;\n\n// min-width: 0; // to resolve an issue with truncate text\nconst GridItem = styled.div<{ revealed?: boolean; onClick?: () => void }>`\n    min-width: 0;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    white-space: nowrap;\n    padding: 16px 0px 12px 0px;\n    border-bottom: 1px solid ${props => props.theme.STROKE_GREY};\n    font-variant-numeric: tabular-nums;\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    font-weight: 500;\n\n    &:nth-child(1n) {\n        padding-left: 25px;\n    }\n    &:nth-child(3n) {\n        padding-right: 25px;\n    }\n    &:nth-last-child(-n + 3) {\n        border: 0;\n    }\n\n    ${props =>\n        props.onClick &&\n        css`\n            cursor: pointer;\n        `};\n`;\n\nconst GridItemAddress = styled(GridItem)`\n    font-variant-numeric: tabular-nums slashed-zero;\n\n    /* these two ensure proper metadata behavior */\n    white-space: nowrap;\n    overflow: hidden;\n`;\n\nconst AddressActions = styled.div<{ hide?: boolean }>`\n    opacity: ${props => (props.hide ? '0' : '1')};\n`;\n\nconst Gray = styled.span`\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n`;\n\nconst HeaderItem = styled(GridItem)`\n    position: sticky;\n    top: 0;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: 500;\n    padding: 12px 0px;\n    background: ${props => props.theme.BG_WHITE};\n`;\n\nconst Actions = styled.div`\n    display: flex;\n    justify-content: center;\n    margin: 16px 0px;\n\n    button + button {\n        margin-left: 16px;\n    }\n`;\n\nconst AddressWrapper = styled.span`\n    text-overflow: ellipsis;\n    overflow: hidden;\n    position: relative;\n`;\n\nconst Overlay = styled.div`\n    top: 0px;\n    right: 0px;\n    bottom: 0px;\n    left: 0px;\n    position: absolute;\n    background-image: linear-gradient(\n        to right,\n        rgba(0, 0, 0, 0) 0%,\n        ${props => props.theme.BG_WHITE} 120px\n    );\n`;\n\nconst DEFAULT_LIMIT = 10;\n\ninterface ItemProps {\n    index: number;\n    addr: AccountAddress;\n    symbol: Network['symbol'];\n    metadataPayload: MetadataAddPayload;\n    onClick: () => void;\n}\n\nconst Item = ({ addr, symbol, onClick, metadataPayload, index }: ItemProps) => {\n    // Currently used addresses are always partially hidden\n    // The only place where full address is shown is confirm-addr modal\n    const [isHovered, setIsHovered] = React.useState(false);\n    const amount = formatNetworkAmount(addr.received || '0', symbol, true);\n    const fresh = addr.transfers < 1;\n    const address = addr.address.substring(0, 20);\n\n    return (\n        <>\n            <GridItemAddress\n                data-test={`@wallet/receive/used-address/${index}`}\n                onMouseEnter={() => setIsHovered(true)}\n                onMouseLeave={() => setIsHovered(false)}\n            >\n                <MetadataLabeling\n                    payload={{\n                        ...metadataPayload,\n                    }}\n                    // if metadata is present, confirm on device option will become available in dropdown\n                    defaultVisibleValue={\n                        <AddressWrapper>\n                            <Overlay />\n                            {address}\n                        </AddressWrapper>\n                    }\n                />\n            </GridItemAddress>\n            <GridItem\n                onMouseEnter={() => setIsHovered(true)}\n                onMouseLeave={() => setIsHovered(false)}\n            >\n                {!fresh && <HiddenPlaceholder>{amount}</HiddenPlaceholder>}\n                {fresh && (\n                    <Gray>\n                        <Translation id=\"RECEIVE_TABLE_NOT_USED\" />\n                    </Gray>\n                )}\n            </GridItem>\n            <GridItem\n                onMouseEnter={() => setIsHovered(true)}\n                onMouseLeave={() => setIsHovered(false)}\n            >\n                <AddressActions hide={!isHovered}>\n                    <Button\n                        data-test={`@metadata/confirm-on-device-button/${index}`}\n                        variant=\"tertiary\"\n                        onClick={onClick}\n                    >\n                        <Translation id=\"TR_REVEAL_ADDRESS\" />\n                    </Button>\n                </AddressActions>\n            </GridItem>\n        </>\n    );\n};\n\nconst UsedAddresses = ({ account, addresses, pendingAddresses, showAddress, locked }: Props) => {\n    const [limit, setLimit] = useState(DEFAULT_LIMIT);\n\n    if (account.networkType !== 'bitcoin' || !account.addresses) return null;\n    const { used, unused } = account.addresses;\n    const { addressLabels } = account.metadata;\n    // find revealed addresses in `unused` list\n    const revealed = unused.reduce((result, addr) => {\n        const r = addresses.find(u => u.path === addr.path);\n        const p = pendingAddresses.find(u => u === addr.address);\n        const f = r || p;\n        return f ? result.concat(addr) : result;\n    }, [] as typeof unused);\n    // TODO: add skipped addresses?\n    // add revealed addresses to `used` list\n    const list = revealed.concat(used.slice().reverse());\n    if (list.length < 1) return null;\n\n    const actionButtonsVisible = list.length > DEFAULT_LIMIT;\n    const actionShowVisible = limit < list.length;\n    const actionHideVisible = limit > DEFAULT_LIMIT;\n\n    return (\n        <StyledCard>\n            <GridTable>\n                <HeaderItem>\n                    <Translation id=\"RECEIVE_TABLE_ADDRESS\" />\n                </HeaderItem>\n                <HeaderItem>\n                    <Translation id=\"RECEIVE_TABLE_RECEIVED\" />\n                </HeaderItem>\n                <HeaderItem />\n                {list.slice(0, limit).map((addr, index) => (\n                    <Item\n                        index={index}\n                        key={addr.path}\n                        addr={addr}\n                        symbol={account.symbol}\n                        metadataPayload={{\n                            type: 'addressLabel',\n                            accountKey: account.key,\n                            defaultValue: addr.address,\n                            value: addressLabels[addr.address],\n                        }}\n                        onClick={() => (!locked ? showAddress(addr.path, addr.address) : undefined)}\n                    />\n                ))}\n            </GridTable>\n            {actionButtonsVisible && (\n                <Actions>\n                    {actionShowVisible && (\n                        <Button\n                            variant=\"tertiary\"\n                            icon=\"ARROW_DOWN\"\n                            alignIcon=\"right\"\n                            onClick={() => setLimit(limit + 20)}\n                        >\n                            <Translation id=\"TR_SHOW_MORE\" />\n                        </Button>\n                    )}\n                    {actionHideVisible && (\n                        <Button\n                            variant=\"tertiary\"\n                            icon=\"ARROW_UP\"\n                            onClick={() => setLimit(DEFAULT_LIMIT)}\n                        >\n                            <Translation id=\"TR_SHOW_LESS\" />\n                        </Button>\n                    )}\n                </Actions>\n            )}\n        </StyledCard>\n    );\n};\n\nexport default UsedAddresses;\n","import React from 'react';\nimport { WalletLayout } from '@wallet-components';\nimport { useDevice } from '@suite-hooks';\nimport FreshAddress from './components/FreshAddress';\nimport UsedAddresses from './components/UsedAddresses';\nimport { useSelector } from '@suite/hooks/suite';\nimport { isPending } from '@wallet-utils/transactionUtils';\nimport { getAccountTransactions } from '@wallet-utils/accountUtils';\nimport { Props } from './Container';\n\nconst Receive = ({ selectedAccount, receive, device, showAddress }: Props) => {\n    const { isLocked } = useDevice();\n    const isDeviceLocked = isLocked(true);\n    const transactions = useSelector(state => state.wallet.transactions.transactions);\n\n    if (!device || selectedAccount.status !== 'loaded') {\n        return <WalletLayout title=\"TR_NAV_RECEIVE\" account={selectedAccount} />;\n    }\n\n    const { account } = selectedAccount;\n    const disabled = !!device.authConfirm;\n\n    const pendingTxs = getAccountTransactions(transactions, account).filter(isPending);\n    const pendingAddresses: string[] = [];\n    pendingTxs.forEach(t =>\n        t.targets.forEach(target => target.addresses?.forEach(a => pendingAddresses.unshift(a))),\n    );\n\n    return (\n        <WalletLayout title=\"TR_NAV_RECEIVE\" account={selectedAccount} showEmptyHeaderPlaceholder>\n            <FreshAddress\n                account={account}\n                addresses={receive}\n                showAddress={showAddress}\n                disabled={disabled}\n                locked={isDeviceLocked}\n                pendingAddresses={pendingAddresses}\n            />\n            <UsedAddresses\n                account={account}\n                addresses={receive}\n                showAddress={showAddress}\n                disabled={disabled}\n                locked={isDeviceLocked}\n                pendingAddresses={pendingAddresses}\n            />\n        </WalletLayout>\n    );\n};\n\nexport default Receive;\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n// import * as modalActions from '@suite-actions/modalActions';\nimport * as receiveActions from '@wallet-actions/receiveActions';\nimport * as metadataActions from '@suite-actions/metadataActions';\n\nimport { AppState, Dispatch } from '@suite-types';\nimport ReceiveIndex from './index';\n\nconst mapStateToProps = (state: AppState) => ({\n    selectedAccount: state.wallet.selectedAccount,\n    device: state.suite.device,\n    receive: state.wallet.receive,\n    modal: state.modal,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n    bindActionCreators(\n        {\n            showAddress: receiveActions.showAddress,\n            addMetadata: metadataActions.addMetadata,\n        },\n        dispatch,\n    );\n\nexport type StateProps = ReturnType<typeof mapStateToProps>;\nexport type DispatchProps = ReturnType<typeof mapDispatchToProps>;\nexport type Props = StateProps & DispatchProps;\n\nexport interface ChildProps {\n    account: NonNullable<Props['selectedAccount']['account']>;\n    addresses: Props['receive'];\n    showAddress: Props['showAddress'];\n    disabled: boolean;\n    locked: boolean;\n    pendingAddresses: string[];\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ReceiveIndex);\n","import Account from '@wallet-views/receive/Container';\n\nexport default Account;\n"],"sourceRoot":""}