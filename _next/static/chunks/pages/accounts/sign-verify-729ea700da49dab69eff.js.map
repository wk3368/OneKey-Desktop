{"version":3,"sources":["webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?3f1c","webpack://_N_E/../suite/src/utils/wallet/ethUtils.ts","webpack://_N_E/../suite/src/actions/wallet/signVerifyActions.ts","webpack://_N_E/../suite/src/views/wallet/sign-verify/index.tsx","webpack://_N_E/../suite/src/views/wallet/sign-verify/Container.ts","webpack://_N_E/./pages/accounts/sign-verify/index.tsx"],"names":["window","__NEXT_P","push","validateAddress","address","hasUpperCase","RegExp","length","EthereumjsUtil","match","sign","path","message","hex","async","dispatch","getState","selectedDevice","suite","device","response","TrezorConnect","ethereumSignMessage","instance","state","useEmptyPassphrase","success","type","SIGN_VERIFY","SIGN_SUCCESS","signSignature","payload","signature","notificationActions","error","verify","ERROR","inputName","ethereumVerifyMessage","inputChange","value","INPUT_CHANGE","TOUCH","clearSign","CLEAR_SIGN","clearVerify","CLEAR_VERIFY","Wrapper","styled","div","props","theme","BG_WHITE","variables","SCREEN_SIZE","MD","Row","RowButtons","StyledButton","Button","Column","Sign","Verify","SignVerify","Component","event","this","signVerifyActions","target","name","getError","signVerify","errors","find","e","render","intl","selectedAccount","signMessage","verifyAddress","verifyMessage","verifySignature","verifyAddressError","title","account","Title","Translation","id","label","formatMessage","messages","TR_ADDRESS","readOnly","TR_MESSAGE","onChange","handleInputChange","rows","maxRows","maxLength","TR_SIGNATURE","onClick","variant","isDisabled","undefined","bottomText","connect","wallet","bindActionCreators"],"mappings":"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","file":"static/chunks/pages/accounts/sign-verify-729ea700da49dab69eff.js","sourcesContent":["\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/accounts/sign-verify\",\n        function () {\n          return require(\"private-next-pages/accounts/sign-verify/index.tsx\");\n        }\n      ]);\n    ","import * as EthereumjsUtil from 'ethereumjs-util';\nimport BigNumber from 'bignumber.js';\n\nexport const decimalToHex = (dec: number): string => new BigNumber(dec).toString(16);\n\nexport const padLeftEven = (hex: string): string => (hex.length % 2 !== 0 ? `0${hex}` : hex);\n\nexport const sanitizeHex = ($hex: string): string => {\n    const hex = $hex.toLowerCase().substring(0, 2) === '0x' ? $hex.substring(2) : $hex;\n    if (hex === '') return '';\n    return `0x${padLeftEven(hex)}`;\n};\n\nexport const hexToDecimal = (hex: number): string => {\n    const sanitized: string = sanitizeHex(hex.toString());\n    return !sanitized ? 'null' : new BigNumber(sanitized).toString();\n};\n\nexport const strip = (str: string): string => {\n    if (str.indexOf('0x') === 0) {\n        return padLeftEven(str.substring(2, str.length));\n    }\n    return padLeftEven(str);\n};\n\nexport const validateAddress = (address: string): string | null => {\n    const hasUpperCase = new RegExp('^(.*[A-Z].*)$');\n    if (address.length < 1) {\n        return 'Address is not set';\n    }\n    if (!EthereumjsUtil.isValidAddress(address)) {\n        return 'Address is not valid';\n    }\n    if (address.match(hasUpperCase) && !EthereumjsUtil.isValidChecksumAddress(address)) {\n        return 'Address is not a valid checksum';\n    }\n    return null;\n};\n\nexport const isHex = (str: string): boolean => {\n    const regExp = /^(0x|0X)?[0-9A-Fa-f]+$/g;\n    return regExp.test(str);\n};\n","import TrezorConnect from '@onekeyhq/connect';\nimport { validateAddress } from '@wallet-utils/ethUtils';\nimport * as notificationActions from '@suite-actions/notificationActions';\nimport { SIGN_VERIFY } from './constants';\nimport { Dispatch, GetState } from '@suite-types';\n\nexport type inputNameType =\n    | 'signAddress'\n    | 'signMessage'\n    | 'signSignature'\n    | 'verifyAddress'\n    | 'verifyMessage'\n    | 'verifySignature';\n\nexport type SignVerifyAction =\n    | { type: typeof SIGN_VERIFY.SIGN_SUCCESS; signSignature: string }\n    | { type: typeof SIGN_VERIFY.CLEAR_SIGN }\n    | { type: typeof SIGN_VERIFY.CLEAR_VERIFY }\n    | { type: typeof SIGN_VERIFY.INPUT_CHANGE; inputName: inputNameType; value: string }\n    | { type: typeof SIGN_VERIFY.TOUCH; inputName: inputNameType }\n    | { type: typeof SIGN_VERIFY.ERROR; inputName: inputNameType; message?: string };\n\nexport const sign = (path: [number], message: string, hex = false) => async (\n    dispatch: Dispatch,\n    getState: GetState,\n) => {\n    const selectedDevice = getState().suite.device;\n    if (!selectedDevice) return;\n\n    const response = await TrezorConnect.ethereumSignMessage({\n        device: {\n            path: selectedDevice.path,\n            instance: selectedDevice.instance,\n            state: selectedDevice.state,\n        },\n        path,\n        hex,\n        message,\n        useEmptyPassphrase: selectedDevice.useEmptyPassphrase,\n    });\n\n    if (response && response.success) {\n        dispatch({\n            type: SIGN_VERIFY.SIGN_SUCCESS,\n            signSignature: response.payload.signature,\n        });\n    } else {\n        dispatch(\n            notificationActions.addToast({\n                type: 'sign-message-error',\n                error: response.payload.error,\n            }),\n        );\n    }\n};\n\nexport const verify = (address: string, message: string, signature: string, hex = false) => async (\n    dispatch: Dispatch,\n    getState: GetState,\n) => {\n    const selectedDevice = getState().suite.device;\n    if (!selectedDevice) return;\n    const error = validateAddress(address);\n\n    if (error) {\n        dispatch({\n            type: SIGN_VERIFY.ERROR,\n            inputName: 'verifyAddress',\n            message: error,\n        });\n    }\n\n    if (!error) {\n        const response = await TrezorConnect.ethereumVerifyMessage({\n            device: {\n                path: selectedDevice.path,\n                instance: selectedDevice.instance,\n                state: selectedDevice.state,\n            },\n            address,\n            message,\n            signature,\n            hex,\n            useEmptyPassphrase: selectedDevice.useEmptyPassphrase,\n        });\n\n        if (response && response.success) {\n            dispatch(\n                notificationActions.addToast({\n                    type: 'verify-message-success',\n                }),\n            );\n        } else {\n            dispatch(\n                notificationActions.addToast({\n                    type: 'verify-message-error',\n                    error: response.payload.error,\n                }),\n            );\n        }\n    }\n};\n\nexport const inputChange = (inputName: inputNameType, value: string) => (dispatch: Dispatch) => {\n    dispatch({\n        type: SIGN_VERIFY.INPUT_CHANGE,\n        inputName,\n        value,\n    });\n    dispatch({\n        type: SIGN_VERIFY.TOUCH,\n        inputName,\n    });\n\n    if (inputName === 'verifyAddress') {\n        const error = validateAddress(value);\n        if (error) {\n            dispatch({\n                type: SIGN_VERIFY.ERROR,\n                inputName,\n                message: error,\n            });\n        }\n    }\n};\n\nexport const clearSign = (): SignVerifyAction => ({\n    type: SIGN_VERIFY.CLEAR_SIGN,\n});\n\nexport const clearVerify = (): SignVerifyAction => ({\n    type: SIGN_VERIFY.CLEAR_VERIFY,\n});\n","import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport { Input, Button, Textarea, variables } from '@trezor/components';\nimport Title from '@wallet-components/Title';\nimport { WalletLayout } from '@wallet-components';\nimport * as signVerifyActions from '@wallet-actions/signVerifyActions';\nimport { WrappedComponentProps } from 'react-intl';\nimport { Translation } from '@suite-components/Translation';\nimport messages from '@suite/support/messages';\nimport { StateProps, DispatchProps } from './Container';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: row;\n    background: ${props => props.theme.BG_WHITE};\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.MD}) {\n        flex-wrap: wrap;\n    }\n`;\n\nconst Row = styled.div`\n    padding-bottom: 28px;\n`;\n\nconst RowButtons = styled(Row)`\n    display: flex;\n    align-items: center;\n    justify-content: flex-end;\n`;\n\nconst StyledButton = styled(Button)`\n    width: 110px;\n    margin-left: 10px;\n\n    &:first-child {\n        margin-left: 0;\n    }\n`;\n\nconst Column = styled.div`\n    display: flex;\n    flex: 1 1 auto;\n    flex-direction: column;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.MD}) {\n        flex: 1 1 100%;\n    }\n`;\n\nconst Sign = styled(Column)``;\n\nconst Verify = styled(Column)`\n    padding-left: 20px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.MD}) {\n        padding-left: 0px;\n    }\n`;\n\ninterface Props extends WrappedComponentProps {\n    selectedAccount: StateProps['selectedAccount'];\n    signVerify: StateProps['signVerify'];\n    signVerifyActions: DispatchProps['signVerifyActions'];\n}\n\ninterface FormEvent {\n    target: {\n        name: string;\n        value: string;\n    };\n}\n\ntype InputNameType = Parameters<typeof signVerifyActions.inputChange>;\n\nclass SignVerify extends Component<Props> {\n    getError(inputName: string) {\n        if (!this.props.signVerify) return null;\n        return this.props.signVerify.errors.find(e => e.inputName === inputName);\n    }\n\n    handleInputChange = (event: FormEvent) => {\n        this.props.signVerifyActions.inputChange(\n            event.target.name as InputNameType[0],\n            event.target.value,\n        );\n    };\n\n    render() {\n        const {\n            intl,\n            selectedAccount,\n            signVerifyActions,\n            signVerify: {\n                signMessage,\n                signSignature,\n                verifyAddress,\n                verifyMessage,\n                verifySignature,\n                errors,\n            },\n        } = this.props;\n\n        const verifyAddressError = this.getError('verifyAddress');\n        return (\n            <WalletLayout title=\"TR_NAV_SIGN_VERIFY\" account={selectedAccount}>\n                <Wrapper>\n                    <Sign>\n                        <Title>\n                            <Translation id=\"TR_SIGN_MESSAGE\" />\n                        </Title>\n                        <Row>\n                            <Input\n                                label={intl.formatMessage(messages.TR_ADDRESS)}\n                                name=\"signAddress\"\n                                value=\"\"\n                                // value={account.descriptor}\n                                type=\"text\"\n                                readOnly\n                            />\n                        </Row>\n                        <Row>\n                            <Textarea\n                                label={intl.formatMessage(messages.TR_MESSAGE)}\n                                name=\"signMessage\"\n                                value={signMessage}\n                                onChange={this.handleInputChange}\n                                rows={4}\n                                maxRows={4}\n                                maxLength={255}\n                            />\n                        </Row>\n                        <Row>\n                            <Textarea\n                                label={intl.formatMessage(messages.TR_SIGNATURE)}\n                                name=\"signSignature\"\n                                value={signSignature}\n                                rows={4}\n                                maxRows={4}\n                                maxLength={255}\n                                readOnly\n                            />\n                        </Row>\n                        <RowButtons>\n                            <StyledButton\n                                onClick={this.props.signVerifyActions.clearSign}\n                                variant=\"secondary\"\n                            >\n                                <Translation id=\"TR_CLEAR\" />\n                            </StyledButton>\n                            <StyledButton\n                                // isDisabled={!device.connected}\n                                isDisabled={false}\n                                // TODO:\n                                // onClick={() =>\n                                //      signVerifyActions.sign(account.accountPath, signMessage)\n                                // }\n                            >\n                                <Translation id=\"TR_SIGN\" />\n                            </StyledButton>\n                        </RowButtons>\n                    </Sign>\n                    <Verify>\n                        <Title>\n                            <Translation id=\"TR_VERIFY_MESSAGE\" />\n                        </Title>\n                        <Row>\n                            <Input\n                                label={intl.formatMessage(messages.TR_ADDRESS)}\n                                name=\"verifyAddress\"\n                                value={verifyAddress}\n                                onChange={this.handleInputChange}\n                                type=\"text\"\n                                state={verifyAddressError ? 'error' : undefined}\n                                bottomText={verifyAddressError ? verifyAddressError.message : null}\n                            />\n                        </Row>\n                        <Row>\n                            <Textarea\n                                label={intl.formatMessage(messages.TR_MESSAGE)}\n                                name=\"verifyMessage\"\n                                value={verifyMessage}\n                                onChange={this.handleInputChange}\n                                rows={4}\n                                maxRows={4}\n                                maxLength={255}\n                            />\n                        </Row>\n                        <Row>\n                            <Textarea\n                                label={intl.formatMessage(messages.TR_SIGNATURE)}\n                                name=\"verifySignature\"\n                                value={verifySignature}\n                                onChange={this.handleInputChange}\n                                rows={4}\n                                maxRows={4}\n                                maxLength={255}\n                            />\n                        </Row>\n                        <RowButtons>\n                            <StyledButton onClick={signVerifyActions.clearVerify}>\n                                <Translation id=\"TR_CLEAR\" />\n                            </StyledButton>\n                            <StyledButton\n                                // isDisabled={!!verifyAddressError || !device.connected}\n                                isDisabled\n                                onClick={() => {\n                                    if (errors.length <= 0) {\n                                        signVerifyActions.verify(\n                                            verifyAddress,\n                                            verifyMessage,\n                                            verifySignature,\n                                        );\n                                    }\n                                }}\n                            >\n                                <Translation id=\"TR_VERIFY\" />\n                            </StyledButton>\n                        </RowButtons>\n                    </Verify>\n                </Wrapper>\n            </WalletLayout>\n        );\n    }\n}\n\nexport default SignVerify;\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\n\nimport * as signVerifyActions from '@wallet-actions/signVerifyActions';\nimport { AppState, Dispatch } from '@suite-types';\nimport SignVerify from './index';\n\nconst mapStateToProps = (state: AppState) => ({\n    selectedAccount: state.wallet.selectedAccount,\n    signVerify: state.wallet.signVerify,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    signVerifyActions: bindActionCreators(signVerifyActions, dispatch),\n});\n\nexport type StateProps = ReturnType<typeof mapStateToProps>;\nexport type DispatchProps = ReturnType<typeof mapDispatchToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignVerify);\n","import signVerify from '@wallet-views/sign-verify/Container';\n\nexport default signVerify;\n"],"sourceRoot":""}