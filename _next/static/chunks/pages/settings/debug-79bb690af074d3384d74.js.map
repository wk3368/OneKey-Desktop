{"version":3,"sources":["webpack://_N_E/../suite/src/components/settings/SettingsMenu/index.tsx","webpack://_N_E/../suite/src/components/settings/SettingsLayout/index.tsx","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?5c44","webpack://_N_E/../suite-desktop/src-electron/libs/constants.ts","webpack://_N_E/../suite/src/services/github.ts","webpack://_N_E/../suite/src/views/settings/debug/index.tsx","webpack://_N_E/../suite/src/views/settings/debug/Container.ts","webpack://_N_E/./pages/settings/debug/index.tsx"],"names":["StyledLink","styled","ExternalLink","SettingsMenu","setDebugMode","openModal","goto","useActions","modalActions","routerActions","suiteActions","clickCounter","setClickCounter","useState","showDebugMenu","useSelector","state","suite","settings","debug","maxWidth","title","aria-hidden","onClick","prev","id","navigation","items","icon","route","dropdown","alignMenu","data-test","key","options","label","size","href","SUPPORT_URL","callback","noPadding","type","isHidden","Wrapper","div","SettingsLayout","props","setLayout","React","useContext","LayoutContext","useEffect","children","window","__NEXT_P","push","RELEASE_URL","openGithubIssue","device","url","URL","body","isDesktop","getUserAgent","navigator","platform","getScreenWidth","getScreenHeight","features","getVersion","getFwVersion","isBitcoinOnly","getDeviceInfo","searchParams","set","open","toString","getReleaseUrl","version","StyledActionColumn","ActionColumn","DebugSettings","setTheme","invityAPIUrl","theme","invityApiServerOptions","invityAPI","productionAPIServer","value","stagingAPIServer","localhostAPIServer","selectedInvityApiServer","find","s","useDevice","description","checked","translationMode","onChange","bridgeDevMode","item","setInvityAPIServer","undefined","Object","entries","THEME","dark","map","kv","colorName","defaultColorHex","e","color","target","colors","connect","dispatch","bindActionCreators","Page"],"mappings":"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","file":"static/chunks/pages/settings/debug-79bb690af074d3384d74.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Dropdown } from '@trezor/components';\nimport { Translation, ExternalLink, AppNavigationPanel, AppNavigation } from '@suite-components';\nimport { useActions, useSelector } from '@suite-hooks';\nimport * as modalActions from '@suite-actions/modalActions';\nimport * as suiteActions from '@suite-actions/suiteActions';\nimport * as routerActions from '@suite-actions/routerActions';\nimport { SUPPORT_URL } from '@suite-constants/urls';\n\nconst StyledLink = styled(ExternalLink)`\n    padding: 10px 16px;\n    width: 100%;\n`;\n\nconst SettingsMenu = () => {\n    const { setDebugMode, openModal, goto } = useActions({\n        openModal: modalActions.openModal,\n        goto: routerActions.goto,\n        setDebugMode: suiteActions.setDebugMode,\n    });\n\n    // show debug menu item after 5 clicks on \"Settings\" heading\n    const [clickCounter, setClickCounter] = useState(0);\n    const showDebugMenu = useSelector(state => state.suite.settings.debug.showDebugMenu);\n\n    return (\n        <AppNavigationPanel\n            maxWidth=\"default\"\n            title={\n                <span\n                    aria-hidden=\"true\"\n                    onClick={() => {\n                        setClickCounter(prev => prev + 1);\n                        if (clickCounter === 4) {\n                            setClickCounter(0);\n                            setDebugMode({ showDebugMenu: !showDebugMenu });\n                        }\n                    }}\n                >\n                    <Translation id=\"TR_SETTINGS\" />\n                </span>\n            }\n            navigation={\n                <AppNavigation\n                    items={[\n                        {\n                            title: <Translation id=\"TR_GENERAL\" />,\n                            'data-test': '@settings/menu/general',\n                            icon: 'SETTINGS',\n                            route: 'settings-index',\n                        },\n                        {\n                            title: <Translation id=\"TR_DEVICE\" />,\n                            'data-test': '@settings/menu/device',\n                            icon: 'TREZOR',\n                            route: 'settings-device',\n                        },\n                        {\n                            title: <Translation id=\"TR_COINS\" />,\n                            'data-test': '@settings/menu/wallet',\n                            icon: 'COINS',\n                            route: 'settings-coins',\n                        },\n                    ]}\n                />\n            }\n            dropdown={\n                <Dropdown\n                    alignMenu=\"right\"\n                    data-test=\"@settings/menu/dropdown\"\n                    items={[\n                        {\n                            key: 'group1',\n                            options: [\n                                {\n                                    key: 'support',\n                                    label: (\n                                        <StyledLink size=\"small\" href={SUPPORT_URL}>\n                                            <Translation id=\"TR_SUPPORT\" />\n                                        </StyledLink>\n                                    ),\n                                    'data-test': '@settings/menu/support',\n                                    callback: () => {},\n                                    noPadding: true,\n                                },\n                                {\n                                    key: 'log',\n                                    label: <Translation id=\"TR_SHOW_LOG\" />,\n                                    'data-test': '@settings/menu/log',\n                                    callback: () => {\n                                        openModal({ type: 'log' });\n                                    },\n                                },\n                                {\n                                    key: 'debug',\n                                    label: 'Debug Settings',\n                                    'data-test': '@settings/menu/debug',\n                                    isHidden: !showDebugMenu,\n                                    callback: () => {\n                                        goto('settings-debug');\n                                    },\n                                },\n                            ],\n                        },\n                    ]}\n                />\n            }\n        />\n    );\n};\n\nexport default SettingsMenu;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { LayoutContext } from '@suite-components';\nimport { SettingsMenu } from '@settings-components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n`;\n\ntype Props = {\n    title?: string;\n    children?: React.ReactNode;\n    ['data-test']?: string;\n};\n\nconst SettingsLayout = (props: Props) => {\n    const { setLayout } = React.useContext(LayoutContext);\n\n    React.useEffect(() => {\n        if (setLayout) setLayout(props.title || 'Settings', null, <SettingsMenu />);\n    }, [props.title, setLayout]);\n\n    return <Wrapper data-test={props['data-test']}>{props.children}</Wrapper>;\n};\n\nexport default SettingsLayout;\n","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/settings/debug\",\n        function () {\n          return require(\"private-next-pages/settings/debug/index.tsx\");\n        }\n      ]);\n    ","export const PROTOCOL = 'file';\n\n// TODO: check cdn url\nexport const SS_PREFIX = 'https://onekey-asset.com/onekey/desktop/newly/';\n\n// General modules (both dev & prod)\nexport const MODULES = [\n    // Event Logging\n    'event-logging/process',\n    'event-logging/app',\n    'event-logging/contents',\n    // Standard modules\n    'menu',\n    'shortcuts',\n    'request-filter',\n    'external-links',\n    'window-controls',\n    'http-receiver',\n    'metadata',\n    'bridge',\n    'tor',\n    'analytics',\n];\n\n// Modules only used in prod mode\nexport const MODULES_PROD = ['csp', 'file-protocol', 'auto-updater'];\n\n// Modules only used in dev mode\nexport const MODULES_DEV = ['dev-tools'];\n","import { getFwVersion, isBitcoinOnly, getVersion } from '@suite-utils/device';\nimport { isDesktop, getUserAgent, getScreenWidth, getScreenHeight } from '@suite-utils/env';\nimport { TrezorDevice } from '@suite-types';\nimport { SS_PREFIX } from '@desktop-electron/libs/constants';\n\nconst REPO_INFO = {\n    owner: 'OneKeyHQ',\n    repo: 'OneKey-Desktop',\n};\n\nconst RELEASE_URL = `https://github.com/${REPO_INFO.owner}/${REPO_INFO.repo}`;\n\nexport const getReleaseNotes = async (version?: string) => {\n    if (!version) {\n        return;\n    }\n\n    const url = `${SS_PREFIX}notes.json?noCache=${new Date().getTime()}`;\n    const response = await fetch(url);\n    const release = response.json();\n\n    return release;\n};\n\nconst getDeviceInfo = (device?: TrezorDevice) => {\n    if (!device?.features) {\n        return '';\n    }\n    return `model ${getVersion(device)} ${getFwVersion(device)} ${\n        isBitcoinOnly(device) ? 'Bitcoin only' : 'regular'\n    }`;\n};\n\nconst getSuiteInfo = () => {\n    return `${isDesktop() ? 'desktop' : 'web'} ${process.env.VERSION} (${process.env.COMMITHASH})`;\n};\n\nexport const openGithubIssue = (device?: TrezorDevice) => {\n    const url = new URL(`${RELEASE_URL}/issues/new`);\n\n    const body = `\n**Describe the bug**\nA clear and concise description of what the bug is.\n\n**Steps to reproduce:**\n1. a\n2. b\n3. c\n\n**Info:**\n - Suite version: ${getSuiteInfo()}\n - Browser: ${getUserAgent()}\n - OS: ${navigator.platform}\n - Screen: ${getScreenWidth()}x${getScreenHeight()}\n - Device: ${getDeviceInfo(device)}\n\n**Expected result:**\nA clear and concise description of what you expected to happen.\n\n**Actual result:**\nA clear and concise description of what actually happens.\n\n**Screenshots:**\nInsert here.\n\n**Note(s):**\nAdd any other context about the problem here.\n`;\n\n    url.searchParams.set('body', body);\n\n    window.open(url.toString());\n};\n\nexport const getReleaseUrl = (version: string) => `${RELEASE_URL}/releases/tag/v${version}`;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { Button, Switch, Select, THEME, SuiteThemeColors } from '@trezor/components';\nimport { SettingsLayout } from '@settings-components';\nimport { ActionColumn, Row, Section, TextColumn } from '@suite-components/Settings';\nimport * as suiteActions from '@suite-actions/suiteActions';\nimport { useDevice, useSelector, useActions } from '@suite-hooks';\nimport { openGithubIssue } from '@suite/services/github';\n\nimport { Props } from './Container';\nimport invityAPI from '@suite-services/invityAPI';\n\nconst StyledActionColumn = styled(ActionColumn)`\n    max-width: 300px;\n`;\n\nconst DebugSettings = (props: Props) => {\n    const { setTheme } = useActions({\n        setTheme: suiteActions.setTheme,\n    });\n    const invityAPIUrl = useSelector(state => state.suite.settings.debug.invityAPIUrl);\n    const theme = useSelector(state => state.suite.settings.theme);\n    const invityApiServerOptions = [\n        {\n            label: invityAPI.productionAPIServer,\n            value: invityAPI.productionAPIServer,\n        },\n        {\n            label: invityAPI.stagingAPIServer,\n            value: invityAPI.stagingAPIServer,\n        },\n        {\n            label: invityAPI.localhostAPIServer,\n            value: invityAPI.localhostAPIServer,\n        },\n    ];\n    const selectedInvityApiServer =\n        invityApiServerOptions.find(s => s.value === invityAPIUrl) || invityApiServerOptions[0];\n    const { device } = useDevice();\n    return (\n        <SettingsLayout>\n            <Section title=\"Localization\">\n                <Row>\n                    <TextColumn\n                        title=\"Translation mode\"\n                        description=\"Translation mode enables distinctive visual styling for currently used intl messages. Helpful tooltip with an ID of the message will show up when you mouse over the message.\"\n                    />\n                    <ActionColumn>\n                        <Switch\n                            checked={props.debug.translationMode || false}\n                            onChange={() => {\n                                props.setDebugMode({\n                                    translationMode: !props.debug.translationMode,\n                                });\n                            }}\n                        />\n                    </ActionColumn>\n                </Row>\n            </Section>\n            <Section title=\"Debug\">\n                <Row>\n                    <TextColumn\n                        title=\"OneKey Bridge dev mode (desktop)\"\n                        description=\"Starts OneKey Bridge on port 21324\"\n                    />\n                    <ActionColumn>\n                        <Switch\n                            checked={props.debug.bridgeDevMode}\n                            onChange={() => {\n                                props.setDebugMode({\n                                    bridgeDevMode: !props.debug.bridgeDevMode,\n                                });\n                            }}\n                        />\n                    </ActionColumn>\n                </Row>\n                <Row>\n                    <TextColumn\n                        title=\"Open issue on Github\"\n                        description=\"Open issue on Github with pre-filled details. Do not use with sensitive data!\"\n                    />\n                    <ActionColumn>\n                        <Button\n                            onClick={() => {\n                                openGithubIssue(device);\n                            }}\n                        >\n                            Open issue\n                        </Button>\n                    </ActionColumn>\n                </Row>\n            </Section>\n            <Section title=\"Invity\">\n                <Row>\n                    <TextColumn\n                        title=\"API server\"\n                        description=\"Set the server url for buy and exchange features\"\n                    />\n                    <StyledActionColumn>\n                        <Select\n                            onChange={(item: { value: string; label: string }) => {\n                                props.setDebugMode({\n                                    invityAPIUrl: item.value,\n                                });\n                                invityAPI.setInvityAPIServer(item.value);\n                            }}\n                            value={selectedInvityApiServer}\n                            options={invityApiServerOptions}\n                        />\n                    </StyledActionColumn>\n                </Row>\n            </Section>\n\n            <Section title=\"Dark mode palette\">\n                <Row>\n                    <TextColumn title=\"Reset palette\" />\n                    <ActionColumn>\n                        <Button\n                            onClick={() => {\n                                setTheme('dark', undefined);\n                            }}\n                        >\n                            Reset\n                        </Button>\n                    </ActionColumn>\n                </Row>\n                {Object.entries(THEME.dark).map(kv => {\n                    const colorName = kv[0] as keyof SuiteThemeColors;\n                    const defaultColorHex = kv[1];\n                    return (\n                        <Row>\n                            {colorName}\n                            <input\n                                onChange={e => {\n                                    const color = e.target.value;\n                                    setTheme('custom', {\n                                        ...THEME.dark,\n                                        ...theme.colors,\n                                        ...{ [colorName]: color },\n                                    });\n                                }}\n                                type=\"color\"\n                                value={theme.colors?.[colorName] ?? defaultColorHex}\n                            />\n                        </Row>\n                    );\n                })}\n            </Section>\n        </SettingsLayout>\n    );\n};\n\nexport default DebugSettings;\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { AppState, Dispatch } from '@suite-types';\n\nimport DebugSettings from './index';\nimport { setDebugMode } from '@suite-actions/suiteActions';\n\nconst mapStateToProps = (state: AppState) => ({\n    debug: state.suite.settings.debug,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n    bindActionCreators(\n        {\n            setDebugMode,\n        },\n        dispatch,\n    );\n\nexport type Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DebugSettings);\n","import Page from '@settings-views/debug/Container';\n\nexport default Page;\n"],"sourceRoot":""}