{"version":3,"sources":["webpack://_N_E/../suite/src/components/settings/SettingsMenu/index.tsx","webpack://_N_E/../suite/src/components/settings/SettingsLayout/index.tsx","webpack://_N_E/../suite/src/views/settings/device/index.tsx","webpack://_N_E/../suite/src/views/settings/device/Container.ts","webpack://_N_E/./pages/settings/device/index.tsx","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?f8a4"],"names":["StyledLink","styled","ExternalLink","SettingsMenu","setDebugMode","openModal","goto","useActions","modalActions","routerActions","suiteActions","clickCounter","setClickCounter","useState","showDebugMenu","useSelector","state","suite","settings","debug","maxWidth","title","aria-hidden","onClick","prev","id","navigation","items","icon","route","dropdown","alignMenu","data-test","key","options","label","size","href","SUPPORT_URL","callback","noPadding","type","isHidden","Wrapper","div","SettingsLayout","props","setLayout","React","useContext","LayoutContext","useEffect","children","RotationButton","ActionButton","variables","SCREEN_SIZE","MD","HiddenInput","input","Col","Settings","device","applySettings","changePin","changeUnlockPinMethod","unlockPin","passphraseShowSwitch","changeShowPassphraseSwitch","language","setLabel","customHomescreen","setCustomHomescreen","fileInputElement","createRef","isLocked","useDevice","isDeviceLocked","analytics","useAnalytics","features","DISPLAY_ROTATIONS","value","unfinished_backup","description","learnMore","SEED_MANUAL_URL","cancelable","report","isDisabled","needs_backup","FAILED_BACKUP_URL","DRY_RUN_URL","variant","values","version","getFwVersion","isBitcoinOnly","includes","firmware","ble_ver","isNewer","window","$BLE_DATA","split","map","Number","getBleVerAsArray","isNewerOrEqual","checked","pin_protection","onChange","async","remove","payload","hideTextCursor","useKeyPressScroll","noTopLabel","placeholder","UNLOCK_PIN","l","code","zh","option","find","passphrase_protection","result","use_passphrase","success","length","noError","undefined","event","currentTarget","readOnly","major_version","ref","accept","e","files","dataUrl","homescreen","onUploadHomescreen","target","current","click","width","alt","src","element","document","getElementById","HTMLImageElement","hex","onSelectCustomHomescreen","display_rotation","connect","dispatch","bindActionCreators","DeviceSettings","Page","__NEXT_P","push"],"mappings":"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","file":"static/chunks/pages/settings/device-c76f20068265f263c3f2.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Dropdown } from '@trezor/components';\nimport { Translation, ExternalLink, AppNavigationPanel, AppNavigation } from '@suite-components';\nimport { useActions, useSelector } from '@suite-hooks';\nimport * as modalActions from '@suite-actions/modalActions';\nimport * as suiteActions from '@suite-actions/suiteActions';\nimport * as routerActions from '@suite-actions/routerActions';\nimport { SUPPORT_URL } from '@suite-constants/urls';\n\nconst StyledLink = styled(ExternalLink)`\n    padding: 10px 16px;\n    width: 100%;\n`;\n\nconst SettingsMenu = () => {\n    const { setDebugMode, openModal, goto } = useActions({\n        openModal: modalActions.openModal,\n        goto: routerActions.goto,\n        setDebugMode: suiteActions.setDebugMode,\n    });\n\n    // show debug menu item after 5 clicks on \"Settings\" heading\n    const [clickCounter, setClickCounter] = useState(0);\n    const showDebugMenu = useSelector(state => state.suite.settings.debug.showDebugMenu);\n\n    return (\n        <AppNavigationPanel\n            maxWidth=\"default\"\n            title={\n                <span\n                    aria-hidden=\"true\"\n                    onClick={() => {\n                        setClickCounter(prev => prev + 1);\n                        if (clickCounter === 4) {\n                            setClickCounter(0);\n                            setDebugMode({ showDebugMenu: !showDebugMenu });\n                        }\n                    }}\n                >\n                    <Translation id=\"TR_SETTINGS\" />\n                </span>\n            }\n            navigation={\n                <AppNavigation\n                    items={[\n                        {\n                            title: <Translation id=\"TR_GENERAL\" />,\n                            'data-test': '@settings/menu/general',\n                            icon: 'SETTINGS',\n                            route: 'settings-index',\n                        },\n                        {\n                            title: <Translation id=\"TR_DEVICE\" />,\n                            'data-test': '@settings/menu/device',\n                            icon: 'TREZOR',\n                            route: 'settings-device',\n                        },\n                        {\n                            title: <Translation id=\"TR_COINS\" />,\n                            'data-test': '@settings/menu/wallet',\n                            icon: 'COINS',\n                            route: 'settings-coins',\n                        },\n                    ]}\n                />\n            }\n            dropdown={\n                <Dropdown\n                    alignMenu=\"right\"\n                    data-test=\"@settings/menu/dropdown\"\n                    items={[\n                        {\n                            key: 'group1',\n                            options: [\n                                {\n                                    key: 'support',\n                                    label: (\n                                        <StyledLink size=\"small\" href={SUPPORT_URL}>\n                                            <Translation id=\"TR_SUPPORT\" />\n                                        </StyledLink>\n                                    ),\n                                    'data-test': '@settings/menu/support',\n                                    callback: () => {},\n                                    noPadding: true,\n                                },\n                                {\n                                    key: 'log',\n                                    label: <Translation id=\"TR_SHOW_LOG\" />,\n                                    'data-test': '@settings/menu/log',\n                                    callback: () => {\n                                        openModal({ type: 'log' });\n                                    },\n                                },\n                                {\n                                    key: 'debug',\n                                    label: 'Debug Settings',\n                                    'data-test': '@settings/menu/debug',\n                                    isHidden: !showDebugMenu,\n                                    callback: () => {\n                                        goto('settings-debug');\n                                    },\n                                },\n                            ],\n                        },\n                    ]}\n                />\n            }\n        />\n    );\n};\n\nexport default SettingsMenu;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { LayoutContext } from '@suite-components';\nimport { SettingsMenu } from '@settings-components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n`;\n\ntype Props = {\n    title?: string;\n    children?: React.ReactNode;\n    ['data-test']?: string;\n};\n\nconst SettingsLayout = (props: Props) => {\n    const { setLayout } = React.useContext(LayoutContext);\n\n    React.useEffect(() => {\n        if (setLayout) setLayout(props.title || 'Settings', null, <SettingsMenu />);\n    }, [props.title, setLayout]);\n\n    return <Wrapper data-test={props['data-test']}>{props.children}</Wrapper>;\n};\n\nexport default SettingsLayout;\n","/* eslint-disable @typescript-eslint/naming-convention */\nimport React, { createRef, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { SettingsLayout } from '@settings-components';\nimport { Translation } from '@suite-components';\nimport {\n    ActionButton,\n    ActionColumn,\n    ActionInput,\n    SectionItem,\n    Section,\n    TextColumn,\n    ActionSelect,\n} from '@suite-components/Settings';\nimport { DRY_RUN_URL, FAILED_BACKUP_URL, SEED_MANUAL_URL } from '@suite-constants/urls';\nimport { getFwVersion, isBitcoinOnly } from '@suite-utils/device';\nimport * as homescreen from '@suite-utils/homescreen';\nimport { useDevice, useAnalytics } from '@suite-hooks';\nimport { variables, Switch } from '@trezor/components';\nimport { UNLOCK_PIN } from '@suite-config';\nimport { isNewer, isNewerOrEqual } from '@firmware-utils';\n\nimport { Props } from './Container';\nimport { getBleVerAsArray } from '@suite-utils/getBleVerAsArray';\n\nconst RotationButton = styled(ActionButton)`\n    min-width: 81px;\n    margin: 4px;\n    flex-basis: 45%;\n\n    @media screen and (min-width: ${variables.SCREEN_SIZE.MD}) {\n        flex-basis: auto;\n    }\n`;\n\nconst HiddenInput = styled.input`\n    display: none;\n`;\n\nconst Col = styled.div`\n    flex-direction: column;\n`;\n\nconst Settings = ({\n    device,\n    applySettings,\n    changePin,\n    openModal,\n    goto,\n    changeUnlockPinMethod,\n    unlockPin,\n    passphraseShowSwitch,\n    changeShowPassphraseSwitch,\n    language,\n}: Props) => {\n    const [label, setLabel] = useState('');\n    const [customHomescreen, setCustomHomescreen] = useState('');\n    const fileInputElement = createRef<HTMLInputElement>();\n    const { isLocked } = useDevice();\n    const isDeviceLocked = isLocked();\n    const analytics = useAnalytics();\n    const MAX_LABEL_LENGTH = 16;\n\n    useEffect(() => {\n        if (!device) {\n            return;\n        }\n        setLabel(device.label);\n    }, [device]);\n\n    if (!device?.features) {\n        return null;\n    }\n\n    const DISPLAY_ROTATIONS = [\n        { label: <Translation id=\"TR_NORTH\" />, value: 0 },\n        { label: <Translation id=\"TR_EAST\" />, value: 90 },\n        { label: <Translation id=\"TR_SOUTH\" />, value: 180 },\n        { label: <Translation id=\"TR_WEST\" />, value: 270 },\n    ] as const;\n\n    const { features } = device;\n\n    const onUploadHomescreen = async (files: FileList | null) => {\n        if (!files || !files.length) return;\n        const dataUrl = await homescreen.fileToDataUrl(files[0]);\n        setCustomHomescreen(dataUrl);\n    };\n\n    const onSelectCustomHomescreen = async () => {\n        const element = document.getElementById('custom-image');\n        if (element instanceof HTMLImageElement) {\n            const hex = homescreen.elementToHomescreen(element, device.features.major_version);\n            await applySettings({ homescreen: hex });\n            setCustomHomescreen('');\n        }\n    };\n\n    return (\n        <SettingsLayout>\n            <Section title={<Translation id=\"TR_BACKUP\" />}>\n                {!features.unfinished_backup && (\n                    <SectionItem>\n                        <TextColumn\n                            title={<Translation id=\"TR_BACKUP_RECOVERY_SEED\" />}\n                            description={<Translation id=\"TR_BACKUP_SUBHEADING_1\" />}\n                            learnMore={SEED_MANUAL_URL}\n                        />\n                        <ActionColumn>\n                            <ActionButton\n                                data-test=\"@settings/device/create-backup-button\"\n                                onClick={() => {\n                                    goto('backup-index', { cancelable: true });\n                                    analytics.report({\n                                        type: 'settings/device/goto/backup',\n                                    });\n                                }}\n                                isDisabled={\n                                    isDeviceLocked ||\n                                    !features.needs_backup ||\n                                    features.unfinished_backup\n                                }\n                            >\n                                {features.needs_backup && <Translation id=\"TR_CREATE_BACKUP\" />}\n                                {!features.needs_backup && !features.unfinished_backup && (\n                                    <Translation id=\"TR_BACKUP_SUCCESSFUL\" />\n                                )}\n                            </ActionButton>\n                        </ActionColumn>\n                    </SectionItem>\n                )}\n                {features.unfinished_backup && (\n                    <SectionItem data-test=\"@settings/device/failed-backup-row\">\n                        <TextColumn\n                            title={<Translation id=\"TR_BACKUP_RECOVERY_SEED_FAILED_TITLE\" />}\n                            description={<Translation id=\"TR_BACKUP_RECOVERY_SEED_FAILED_DESC\" />}\n                            learnMore={FAILED_BACKUP_URL}\n                        />\n                        <ActionColumn>\n                            <ActionButton isDisabled>\n                                {features.unfinished_backup && (\n                                    <Translation id=\"TR_BACKUP_FAILED\" />\n                                )}\n                            </ActionButton>\n                        </ActionColumn>\n                    </SectionItem>\n                )}\n                {!features.unfinished_backup && (\n                    <SectionItem>\n                        <TextColumn\n                            title={<Translation id=\"TR_CHECK_RECOVERY_SEED\" />}\n                            description={<Translation id=\"TR_CHECK_RECOVERY_SEED_DESCRIPTION\" />}\n                            learnMore={DRY_RUN_URL}\n                        />\n                        <ActionColumn>\n                            <ActionButton\n                                data-test=\"@settings/device/check-seed-button\"\n                                onClick={() => {\n                                    goto('recovery-index', { cancelable: true });\n                                    analytics.report({\n                                        type: 'settings/device/goto/recovery',\n                                    });\n                                }}\n                                isDisabled={\n                                    isDeviceLocked ||\n                                    features.needs_backup ||\n                                    features.unfinished_backup\n                                }\n                                variant=\"secondary\"\n                            >\n                                <Translation id=\"TR_CHECK_SEED\" />\n                            </ActionButton>\n                        </ActionColumn>\n                    </SectionItem>\n                )}\n            </Section>\n            <Section title={<Translation id=\"TR_DEVICE_SECURITY\" />}>\n                <SectionItem>\n                    <TextColumn\n                        title={<Translation id=\"TR_FIRMWARE_VERSION\" />}\n                        description={\n                            <>\n                                <Translation\n                                    id=\"TR_YOUR_CURRENT_FIRMWARE\"\n                                    values={{ version: getFwVersion(device) }}\n                                />\n                                {isBitcoinOnly(device) && ' (bitcoin-only)'}\n                            </>\n                        }\n                    />\n                    <ActionColumn>\n                        <ActionButton\n                            variant=\"secondary\"\n                            onClick={() => {\n                                goto('firmware-index', { cancelable: true });\n                                analytics.report({\n                                    type: 'settings/device/goto/firmware',\n                                });\n                            }}\n                            data-test=\"@settings/device/update-button\"\n                            isDisabled={isDeviceLocked}\n                        >\n                            {device && ['required', 'outdated'].includes(device.firmware) && (\n                                <Translation id=\"TR_UPDATE_AVAILABLE\" />\n                            )}\n                            {device && device.firmware === 'valid' && (\n                                <Translation id=\"TR_UP_TO_DATE\" />\n                            )}\n                        </ActionButton>\n                    </ActionColumn>\n                </SectionItem>\n                <SectionItem>\n                    <TextColumn\n                        title={<Translation id=\"TR_BLE_FIRMWARE_VERSION\" />}\n                        description={\n                            <>\n                                <Translation\n                                    id=\"TR_YOUR_CURRENT_BLE_FIRMWARE\"\n                                    values={{ version: features.ble_ver ?? '-' }}\n                                />\n                            </>\n                        }\n                    />\n                    <ActionColumn>\n                        <ActionButton\n                            variant=\"secondary\"\n                            onClick={() => {\n                                goto('ble-firmware-index', { cancelable: true });\n                                analytics.report({\n                                    type: 'settings/device/goto/firmware',\n                                });\n                            }}\n                            data-test=\"@settings/device/update-button\"\n                            isDisabled={isDeviceLocked}\n                        >\n                            {device &&\n                                isNewer(\n                                    (window.$BLE_DATA?.version.split('.').map(Number) as [\n                                        number,\n                                        number,\n                                        number,\n                                    ]) ?? [1, 0, 0],\n                                    getBleVerAsArray(device?.features?.ble_ver),\n                                ) && <Translation id=\"TR_UPDATE_AVAILABLE\" />}\n                            {device &&\n                                isNewerOrEqual(\n                                    getBleVerAsArray(device?.features?.ble_ver),\n                                    (window.$BLE_DATA?.version.split('.').map(Number) as [\n                                        number,\n                                        number,\n                                        number,\n                                    ]) ?? [1, 0, 0],\n                                ) && <Translation id=\"TR_UP_TO_DATE\" />}\n                        </ActionButton>\n                    </ActionColumn>\n                </SectionItem>\n\n                <SectionItem>\n                    <TextColumn\n                        title={<Translation id=\"TR_DEVICE_SETTINGS_PIN_PROTECTION_TITLE\" />}\n                        description={<Translation id=\"TR_DEVICE_SETTINGS_PIN_PROTECTION_DESC\" />}\n                    />\n                    <ActionColumn>\n                        <Switch\n                            checked={!!features.pin_protection}\n                            onChange={async () => {\n                                await changePin({ remove: features.pin_protection });\n                                changeUnlockPinMethod('');\n                                analytics.report({\n                                    type: 'settings/device/change-pin-protection',\n                                    payload: {\n                                        remove: features.pin_protection,\n                                    },\n                                });\n                            }}\n                            isDisabled={isDeviceLocked}\n                            data-test=\"@settings/device/pin-switch\"\n                        />\n                    </ActionColumn>\n                </SectionItem>\n                {features.pin_protection && (\n                    <SectionItem>\n                        <TextColumn\n                            title={<Translation id=\"TR_DEVICE_SETTINGS_CHANGE_PIN_TITLE\" />}\n                            description={<Translation id=\"TR_DEVICE_SETTINGS_CHANGE_PIN_DESC\" />}\n                        />\n                        <ActionColumn>\n                            <ActionButton\n                                onClick={() => {\n                                    changePin({ remove: false });\n                                    analytics.report({\n                                        type: 'settings/device/change-pin',\n                                    });\n                                }}\n                                isDisabled={isDeviceLocked}\n                                variant=\"secondary\"\n                            >\n                                <Translation id=\"TR_CHANGE_PIN\" />\n                            </ActionButton>\n                        </ActionColumn>\n                    </SectionItem>\n                )}\n                {features.pin_protection && (\n                    <SectionItem>\n                        <TextColumn\n                            title={<Translation id=\"TR_DEVICE_SETTINGS_CHANGE_PIN_METHOD_TITLE\" />}\n                            description={\n                                <Translation id=\"TR_DEVICE_SETTINGS_CHANGE_PIN_METHOD_DESCRIPTION\" />\n                            }\n                        />\n                        <ActionColumn>\n                            <ActionSelect\n                                hideTextCursor\n                                useKeyPressScroll\n                                noTopLabel\n                                placeholder={\n                                    <Translation id=\"TR_DEVICE_SETTINGS_CHANGE_PIN_METHOD_PLACEHOLDER\" />\n                                }\n                                data-test=\"@settings/unlock-pin-method-select\"\n                                options={UNLOCK_PIN.map(l => ({\n                                    value: l.code,\n                                    label: l[language] ?? l.zh,\n                                }))}\n                                onChange={(option: {\n                                    value: typeof UNLOCK_PIN[number]['code'];\n                                    label: typeof UNLOCK_PIN[number]['zh'];\n                                }) => {\n                                    changeUnlockPinMethod(option.value);\n                                }}\n                                value={\n                                    unlockPin\n                                        ? {\n                                              value: unlockPin,\n                                              label: UNLOCK_PIN.find(l => l.code === unlockPin)![\n                                                  language\n                                              ],\n                                          }\n                                        : null\n                                }\n                            />\n                        </ActionColumn>\n                    </SectionItem>\n                )}\n                <SectionItem>\n                    <TextColumn\n                        title={<Translation id=\"TR_DEVICE_SETTINGS_PASSPHRASE_TITLE\" />}\n                        description={\n                            <>\n                                <Translation id=\"TR_DEVICE_SETTINGS_PASSPHRASE_DESC\" />\n                                <Translation id=\"TR_DEVICE_SETTINGS_PASSPHRASE_DESC_MORE\" />\n                            </>\n                        }\n                        // learnMore={PASSPHRASE_URL}\n                    />\n                    <ActionColumn>\n                        <Switch\n                            checked={!!features.passphrase_protection}\n                            onChange={async () => {\n                                const result = await applySettings({\n                                    use_passphrase: !features.passphrase_protection,\n                                });\n                                if (result?.success) {\n                                    changeShowPassphraseSwitch(false);\n                                }\n                                analytics.report({\n                                    type: 'settings/device/change-passphrase-protection',\n                                    payload: {\n                                        use_passphrase: !features.passphrase_protection,\n                                    },\n                                });\n                            }}\n                            data-test=\"@settings/device/passphrase-switch\"\n                            isDisabled={isDeviceLocked}\n                        />\n                    </ActionColumn>\n                </SectionItem>\n                {features.passphrase_protection && (\n                    <SectionItem>\n                        <TextColumn\n                            title={\n                                <Translation id=\"TR_DEVICE_SETTINGS_PASSPHRASE_DEFAULT_SHOW_SWITCH_TITLE\" />\n                            }\n                            description={\n                                <Translation id=\"TR_DEVICE_SETTINGS_PASSPHRASE_DEFAULT_SHOW_SWITCH_DESCRIPTION\" />\n                            }\n                        />\n                        <ActionColumn>\n                            <Switch\n                                checked={!!passphraseShowSwitch}\n                                onChange={() => {\n                                    changeShowPassphraseSwitch(!passphraseShowSwitch);\n                                }}\n                                data-test=\"@settings/device/passphrase-switch\"\n                                isDisabled={isDeviceLocked}\n                            />\n                        </ActionColumn>\n                    </SectionItem>\n                )}\n            </Section>\n            <Section title={<Translation id=\"TR_PERSONALIZATION\" />}>\n                <SectionItem>\n                    <TextColumn\n                        title={<Translation id=\"TR_DEVICE_SETTINGS_DEVICE_LABEL\" />}\n                        description={\n                            <Translation\n                                id=\"TR_MAX_LABEL_LENGTH_IS\"\n                                values={{ length: MAX_LABEL_LENGTH }}\n                            />\n                        }\n                    />\n                    <ActionColumn>\n                        <ActionInput\n                            noTopLabel\n                            noError\n                            value={label}\n                            state={label.length > MAX_LABEL_LENGTH ? 'error' : undefined}\n                            onChange={(event: React.FormEvent<HTMLInputElement>) =>\n                                setLabel(event.currentTarget.value)\n                            }\n                            data-test=\"@settings/device/label-input\"\n                            readOnly={isDeviceLocked}\n                        />\n                        <ActionButton\n                            onClick={() => {\n                                applySettings({ label });\n                                analytics.report({\n                                    type: 'settings/device/change-label',\n                                });\n                            }}\n                            isDisabled={\n                                isDeviceLocked ||\n                                label.length > MAX_LABEL_LENGTH ||\n                                label === device.label\n                            }\n                            data-test=\"@settings/device/label-submit\"\n                        >\n                            <Translation id=\"TR_DEVICE_SETTINGS_DEVICE_EDIT_LABEL\" />\n                        </ActionButton>\n                    </ActionColumn>\n                </SectionItem>\n                <SectionItem>\n                    <TextColumn\n                        title={<Translation id=\"TR_DEVICE_SETTINGS_HOMESCREEN_TITLE\" />}\n                        description={\n                            // display text only for T2, it relates to what kind of image may be uploaded\n                            // but custom upload is enabled only for T2 now.\n                            features.major_version === 2 ? (\n                                <Translation id=\"TR_DEVICE_SETTINGS_HOMESCREEN_IMAGE_SETTINGS\" />\n                            ) : (\n                                ''\n                            )\n                        }\n                    />\n                    <ActionColumn>\n                        <HiddenInput\n                            ref={fileInputElement}\n                            type=\"file\"\n                            accept=\".png, .jpg\"\n                            onChange={e => {\n                                onUploadHomescreen(e.target.files);\n                            }}\n                        />\n                        {/* only available for model T at the moment. It works quite well there */}\n                        {features.major_version === 2 && (\n                            <ActionButton\n                                onClick={() => {\n                                    if (fileInputElement.current) {\n                                        fileInputElement.current.click();\n                                    }\n                                }}\n                                isDisabled={isDeviceLocked}\n                                variant=\"secondary\"\n                            >\n                                <Translation id=\"TR_DEVICE_SETTINGS_HOMESCREEN_UPLOAD_IMAGE\" />\n                            </ActionButton>\n                        )}\n\n                        <ActionButton\n                            onClick={() => {\n                                openModal({\n                                    type: 'device-background-gallery',\n                                    device,\n                                });\n                                analytics.report({\n                                    type: 'settings/device/goto/background',\n                                });\n                            }}\n                            isDisabled={isDeviceLocked}\n                            data-test=\"@settings/device/select-from-gallery\"\n                            variant=\"secondary\"\n                        >\n                            <Translation id=\"TR_DEVICE_SETTINGS_HOMESCREEN_SELECT_FROM_GALLERY\" />\n                        </ActionButton>\n                    </ActionColumn>\n                </SectionItem>\n                {customHomescreen && homescreen.isValid(customHomescreen) && (\n                    <SectionItem>\n                        <Col>\n                            <img\n                                width=\"144px\"\n                                alt=\"custom homescreen\"\n                                id=\"custom-image\"\n                                src={customHomescreen}\n                            />\n                        </Col>\n\n                        <ActionColumn>\n                            <ActionButton onClick={() => onSelectCustomHomescreen()}>\n                                <Translation id=\"TR_CHANGE_HOMESCREEN\" />\n                            </ActionButton>\n                            <ActionButton\n                                variant=\"secondary\"\n                                onClick={() => setCustomHomescreen('')}\n                                isDisabled={isDeviceLocked}\n                            >\n                                <Translation id=\"TR_DROP_IMAGE\" />\n                            </ActionButton>\n                        </ActionColumn>\n                    </SectionItem>\n                )}\n                {customHomescreen && !homescreen.isValid(customHomescreen) && (\n                    <SectionItem>\n                        <Col>\n                            <Translation id=\"TR_INVALID_FILE_SELECTED\" />\n                        </Col>\n                        <ActionColumn>\n                            <ActionButton\n                                variant=\"secondary\"\n                                onClick={() => setCustomHomescreen('')}\n                                isDisabled={isDeviceLocked}\n                            >\n                                <Translation id=\"TR_DROP_IMAGE\" />\n                            </ActionButton>\n                        </ActionColumn>\n                    </SectionItem>\n                )}\n                {features.major_version === 2 && (\n                    <SectionItem>\n                        <TextColumn\n                            title={<Translation id=\"TR_DEVICE_SETTINGS_DISPLAY_ROTATION\" />}\n                        />\n                        <ActionColumn>\n                            {DISPLAY_ROTATIONS.map(variant => (\n                                <RotationButton\n                                    key={variant.value}\n                                    variant=\"secondary\"\n                                    onClick={() => {\n                                        applySettings({\n                                            display_rotation: variant.value,\n                                        });\n                                        analytics.report({\n                                            type: 'settings/device/change-orientation',\n                                            payload: {\n                                                value: variant.value,\n                                            },\n                                        });\n                                    }}\n                                    data-test={`@settings/device/rotation-button/${variant.value}`}\n                                    isDisabled={isDeviceLocked}\n                                >\n                                    {variant.label}\n                                </RotationButton>\n                            ))}\n                        </ActionColumn>\n                    </SectionItem>\n                )}\n            </Section>\n            <Section title={<Translation id=\"TR_ADVANCED\" />}>\n                <SectionItem>\n                    <TextColumn\n                        title={<Translation id=\"TR_DEVICE_SETTINGS_BUTTON_WIPE_DEVICE\" />}\n                        description={<Translation id=\"TR_WIPING_YOUR_DEVICE\" />}\n                    />\n                    <ActionColumn>\n                        <ActionButton\n                            onClick={() => {\n                                openModal({\n                                    type: 'wipe-device',\n                                });\n                                analytics.report({\n                                    type: 'settings/device/goto/wipe',\n                                });\n                            }}\n                            variant=\"danger\"\n                            isDisabled={isDeviceLocked}\n                            data-test=\"@settings/device/open-wipe-modal-button\"\n                        >\n                            <Translation id=\"TR_DEVICE_SETTINGS_BUTTON_WIPE_DEVICE\" />\n                        </ActionButton>\n                    </ActionColumn>\n                </SectionItem>\n            </Section>\n        </SettingsLayout>\n    );\n};\n\nexport default Settings;\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as routerActions from '@suite-actions/routerActions';\nimport * as modalActions from '@suite-actions/modalActions';\nimport {\n    applySettings,\n    changePin,\n    changeUnlockPinMethod,\n    changeShowPassphraseSwitch,\n} from '@settings-actions/deviceSettingsActions';\n\nimport { AppState, Dispatch } from '@suite-types';\n\nimport DeviceSettings from './index';\n\nconst mapStateToProps = (state: AppState) => ({\n    language: state.suite.settings.language,\n    device: state.suite.device,\n    unlockPin: state.suite.settings.unlockPin,\n    passphraseShowSwitch: state.suite.settings.passphraseShowSwitch,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n    bindActionCreators(\n        {\n            applySettings,\n            changePin,\n            goto: routerActions.goto,\n            openModal: modalActions.openModal,\n            changeUnlockPinMethod,\n            changeShowPassphraseSwitch,\n        },\n        dispatch,\n    );\n\nexport type Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(DeviceSettings);\n","import Page from '@settings-views/device/Container';\n\nexport default Page;\n","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/settings/device\",\n        function () {\n          return require(\"private-next-pages/settings/device/index.tsx\");\n        }\n      ]);\n    "],"sourceRoot":""}