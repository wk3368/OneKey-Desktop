{"version":3,"sources":["webpack://_N_E/../suite/src/components/settings/SettingsMenu/index.tsx","webpack://_N_E/../suite/src/components/settings/SettingsLayout/index.tsx","webpack://_N_E/../suite/src/views/settings/coins/components/Coin/index.tsx","webpack://_N_E/../suite/src/views/settings/coins/components/CoinsGroup/index.tsx","webpack://_N_E/../suite/src/views/settings/coins/index.tsx","webpack://_N_E/../suite/src/views/settings/coins/Container.ts","webpack://_N_E/./pages/settings/coins/index.tsx","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?840d"],"names":["StyledLink","styled","ExternalLink","SettingsMenu","setDebugMode","openModal","goto","useActions","modalActions","routerActions","suiteActions","clickCounter","setClickCounter","useState","showDebugMenu","useSelector","state","suite","settings","debug","maxWidth","title","aria-hidden","onClick","prev","id","navigation","items","icon","route","dropdown","alignMenu","data-test","key","options","label","size","href","SUPPORT_URL","callback","noPadding","type","isHidden","Wrapper","div","SettingsLayout","props","setLayout","React","useContext","LayoutContext","useEffect","children","Name","variables","FONT_SIZE","SMALL","theme","TYPE_DARK_GREY","Symbol","TINY","TYPE_LIGHT_GREY","FONT_WEIGHT","DEMI_BOLD","Coin","name","symbol","toUpperCase","Header","StyledP","P","Left","Right","Title","Buttons","AdvancedSettings","MEDIUM","SCREEN_SIZE","SM","UnavailableLabel","SettingsIconWrapper","StyledButton","Button","CoinRow","Row","AdvancedSettingsText","Unavailable","CoinsGroup","description","onActivateAll","onDeactivateAll","onToggleOneFn","filterFn","enabledNetworks","unavailableCapabilities","isLocked","useDevice","isDeviceLocked","useTheme","customHeader","isDisabled","NETWORKS","filter","length","variant","map","network","coin","color","onChange","visible","checked","includes","Settings","wallet","device","features","mainnetNetworksFilterFn","n","accountType","testnet","testnetNetworksFilterFn","unavailableNetworksFilterFn","enabledMainnetNetworks","enabledTestnetNetworks","forEach","find","push","changeCoinVisibility","changeNetworks","connect","dispatch","bindActionCreators","walletSettingsActions","Component","Page","window","__NEXT_P"],"mappings":"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","file":"static/chunks/pages/settings/coins-0f4ff1380b34fc862df1.js","sourcesContent":["import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Dropdown } from '@trezor/components';\nimport { Translation, ExternalLink, AppNavigationPanel, AppNavigation } from '@suite-components';\nimport { useActions, useSelector } from '@suite-hooks';\nimport * as modalActions from '@suite-actions/modalActions';\nimport * as suiteActions from '@suite-actions/suiteActions';\nimport * as routerActions from '@suite-actions/routerActions';\nimport { SUPPORT_URL } from '@suite-constants/urls';\n\nconst StyledLink = styled(ExternalLink)`\n    padding: 10px 16px;\n    width: 100%;\n`;\n\nconst SettingsMenu = () => {\n    const { setDebugMode, openModal, goto } = useActions({\n        openModal: modalActions.openModal,\n        goto: routerActions.goto,\n        setDebugMode: suiteActions.setDebugMode,\n    });\n\n    // show debug menu item after 5 clicks on \"Settings\" heading\n    const [clickCounter, setClickCounter] = useState(0);\n    const showDebugMenu = useSelector(state => state.suite.settings.debug.showDebugMenu);\n\n    return (\n        <AppNavigationPanel\n            maxWidth=\"default\"\n            title={\n                <span\n                    aria-hidden=\"true\"\n                    onClick={() => {\n                        setClickCounter(prev => prev + 1);\n                        if (clickCounter === 4) {\n                            setClickCounter(0);\n                            setDebugMode({ showDebugMenu: !showDebugMenu });\n                        }\n                    }}\n                >\n                    <Translation id=\"TR_SETTINGS\" />\n                </span>\n            }\n            navigation={\n                <AppNavigation\n                    items={[\n                        {\n                            title: <Translation id=\"TR_GENERAL\" />,\n                            'data-test': '@settings/menu/general',\n                            icon: 'SETTINGS',\n                            route: 'settings-index',\n                        },\n                        {\n                            title: <Translation id=\"TR_DEVICE\" />,\n                            'data-test': '@settings/menu/device',\n                            icon: 'TREZOR',\n                            route: 'settings-device',\n                        },\n                        {\n                            title: <Translation id=\"TR_COINS\" />,\n                            'data-test': '@settings/menu/wallet',\n                            icon: 'COINS',\n                            route: 'settings-coins',\n                        },\n                    ]}\n                />\n            }\n            dropdown={\n                <Dropdown\n                    alignMenu=\"right\"\n                    data-test=\"@settings/menu/dropdown\"\n                    items={[\n                        {\n                            key: 'group1',\n                            options: [\n                                {\n                                    key: 'support',\n                                    label: (\n                                        <StyledLink size=\"small\" href={SUPPORT_URL}>\n                                            <Translation id=\"TR_SUPPORT\" />\n                                        </StyledLink>\n                                    ),\n                                    'data-test': '@settings/menu/support',\n                                    callback: () => {},\n                                    noPadding: true,\n                                },\n                                {\n                                    key: 'log',\n                                    label: <Translation id=\"TR_SHOW_LOG\" />,\n                                    'data-test': '@settings/menu/log',\n                                    callback: () => {\n                                        openModal({ type: 'log' });\n                                    },\n                                },\n                                {\n                                    key: 'debug',\n                                    label: 'Debug Settings',\n                                    'data-test': '@settings/menu/debug',\n                                    isHidden: !showDebugMenu,\n                                    callback: () => {\n                                        goto('settings-debug');\n                                    },\n                                },\n                            ],\n                        },\n                    ]}\n                />\n            }\n        />\n    );\n};\n\nexport default SettingsMenu;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { LayoutContext } from '@suite-components';\nimport { SettingsMenu } from '@settings-components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n    flex-direction: column;\n`;\n\ntype Props = {\n    title?: string;\n    children?: React.ReactNode;\n    ['data-test']?: string;\n};\n\nconst SettingsLayout = (props: Props) => {\n    const { setLayout } = React.useContext(LayoutContext);\n\n    React.useEffect(() => {\n        if (setLayout) setLayout(props.title || 'Settings', null, <SettingsMenu />);\n    }, [props.title, setLayout]);\n\n    return <Wrapper data-test={props['data-test']}>{props.children}</Wrapper>;\n};\n\nexport default SettingsLayout;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { variables, CoinLogo } from '@trezor/components';\nimport { Network } from '@wallet-types';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst Name = styled.div`\n    font-size: ${variables.FONT_SIZE.SMALL};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    margin: 0 8px;\n    padding-top: 2px;\n`;\n\nconst Symbol = styled.div`\n    font-size: ${variables.FONT_SIZE.TINY};\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n    padding-top: 2px;\n`;\n\ninterface Props {\n    name: string;\n    symbol: Network['symbol'];\n}\n\nconst Coin = ({ name, symbol }: Props) => (\n    <Wrapper>\n        <CoinLogo size={24} symbol={symbol} />\n        <Name> {name}</Name>\n        <Symbol> {symbol.toUpperCase()}</Symbol>\n    </Wrapper>\n);\n\nexport default Coin;\n","import React from 'react';\nimport styled from 'styled-components';\nimport { P, Switch, Icon, variables, Button, useTheme } from '@trezor/components';\nimport { Translation } from '@suite-components';\nimport { NETWORKS } from '@wallet-config';\nimport { UnavailableCapability } from '@onekeyhq/connect';\nimport { Network } from '@wallet-types';\nimport { Section, ActionColumn, Row } from '@suite-components/Settings';\nimport { useDevice, useActions } from '@suite-hooks';\nimport * as modalActions from '@suite-actions/modalActions';\nimport Coin from '../Coin';\n\nconst Wrapper = styled.div`\n    margin: 4px 0 0 0;\n`;\n\nconst Header = styled.div`\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst StyledP = styled(P)`\n    margin-top: 4px;\n`;\n\nconst Left = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: flex-end;\n`;\n\nconst Right = styled.div`\n    display: flex;\n    justify-content: flex-end;\n    flex-direction: column;\n`;\n\nconst Title = styled.div`\n    font-size: ${variables.FONT_SIZE.TINY};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    text-transform: uppercase;\n    font-weight: ${variables.FONT_WEIGHT.DEMI_BOLD};\n`;\n\nconst Buttons = styled.div`\n    display: flex;\n`;\n\nconst AdvancedSettings = styled.div`\n    display: flex;\n    cursor: pointer;\n    font-size: ${variables.FONT_SIZE.TINY};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    /* todo: not in variables but is in design */\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    margin-right: 12px;\n    visibility: hidden;\n    align-items: center;\n\n    @media all and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        visibility: visible;\n    }\n`;\n\nconst UnavailableLabel = styled.div`\n    font-size: ${variables.FONT_SIZE.TINY};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n    white-space: nowrap;\n`;\n\nconst SettingsIconWrapper = styled.div`\n    margin-right: 0.5ch;\n`;\n\nconst StyledButton = styled(Button)`\n    & + & {\n        margin-left: 16px;\n    }\n`;\n\nconst CoinRow = styled(Row)`\n    &:hover ${AdvancedSettings} {\n        visibility: visible;\n    }\n`;\n\nconst AdvancedSettingsText = styled.div`\n    @media all and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        display: none;\n    }\n`;\n\ninterface Props {\n    label: React.ReactNode;\n    description?: React.ReactNode;\n    onActivateAll: () => void;\n    onDeactivateAll: () => void;\n    onToggleOneFn: (symbol: Network['symbol'], visible: boolean) => void;\n    filterFn: (n: Network) => boolean;\n    enabledNetworks: Network['symbol'][];\n    type: 'mainnet' | 'testnet'; // used in tests\n    unavailableCapabilities: { [key: string]: UnavailableCapability };\n}\n\nconst Unavailable = ({ type }: { type: UnavailableCapability }) => {\n    switch (type) {\n        case 'no-capability':\n            return <Translation id=\"FW_CAPABILITY_NO_CAPABILITY\" />;\n        case 'no-support':\n            return <Translation id=\"FW_CAPABILITY_NO_SUPPORT\" />;\n        case 'update-required':\n            return <Translation id=\"FW_CAPABILITY_UPDATE_REQUIRED\" />;\n        // case '@onekeyhq/connect-outdated':\n        default:\n            return <Translation id=\"FW_CAPABILITY_CONNECT_OUTDATED\" />;\n    }\n};\n\nconst CoinsGroup = ({\n    label,\n    description,\n    onActivateAll,\n    onDeactivateAll,\n    onToggleOneFn,\n    filterFn,\n    enabledNetworks,\n    unavailableCapabilities,\n    ...props\n}: Props) => {\n    const { openModal } = useActions({\n        openModal: modalActions.openModal,\n    });\n    const { isLocked } = useDevice();\n    const isDeviceLocked = isLocked();\n    const theme = useTheme();\n    return (\n        <Wrapper data-test=\"@settings/wallet/coins-group\">\n            <Section\n                customHeader={\n                    <Header>\n                        <Left>\n                            <Title>{label}</Title>\n                            {description && <StyledP size=\"tiny\">{description}</StyledP>}\n                        </Left>\n                        <Right>\n                            <Buttons>\n                                <StyledButton\n                                    isDisabled={\n                                        isDeviceLocked ||\n                                        NETWORKS.filter(filterFn).length === enabledNetworks.length\n                                    }\n                                    variant=\"tertiary\"\n                                    icon=\"CHECK\"\n                                    onClick={() => onActivateAll()}\n                                    data-test={`@settings/wallet/coins-group/${props.type}/activate-all`}\n                                >\n                                    <Translation id=\"TR_ACTIVATE_ALL\" />\n                                </StyledButton>\n                                <StyledButton\n                                    isDisabled={isDeviceLocked || enabledNetworks.length === 0}\n                                    variant=\"tertiary\"\n                                    icon=\"CROSS\"\n                                    onClick={() => onDeactivateAll()}\n                                    data-test={`@settings/wallet/coins-group/${props.type}/deactivate-all`}\n                                >\n                                    <Translation id=\"TR_DEACTIVATE_ALL\" />\n                                </StyledButton>\n                            </Buttons>\n                        </Right>\n                    </Header>\n                }\n            >\n                {NETWORKS.filter(filterFn).map(network => (\n                    <CoinRow key={network.symbol}>\n                        <Coin symbol={network.symbol} name={network.name} />\n                        <ActionColumn>\n                            {!unavailableCapabilities[network.symbol] && (\n                                <>\n                                    <AdvancedSettings\n                                        onClick={() =>\n                                            openModal({\n                                                type: 'advanced-coin-settings',\n                                                coin: network.symbol,\n                                            })\n                                        }\n                                    >\n                                        <SettingsIconWrapper>\n                                            <Icon\n                                                icon=\"SETTINGS\"\n                                                size={16}\n                                                color={theme.TYPE_DARK_GREY}\n                                            />\n                                        </SettingsIconWrapper>\n                                        <AdvancedSettingsText>\n                                            <Translation id=\"TR_ADVANCED_SETTINGS\" />\n                                        </AdvancedSettingsText>\n                                    </AdvancedSettings>\n                                    <Switch\n                                        data-test={`@settings/wallet/network/${network.symbol}`}\n                                        onChange={(visible: boolean) => {\n                                            onToggleOneFn(network.symbol, visible);\n                                        }}\n                                        checked={enabledNetworks.includes(network.symbol)}\n                                        isDisabled={isDeviceLocked}\n                                    />\n                                </>\n                            )}\n                            {unavailableCapabilities[network.symbol] && (\n                                <UnavailableLabel>\n                                    <Unavailable type={unavailableCapabilities[network.symbol]} />\n                                </UnavailableLabel>\n                            )}\n                        </ActionColumn>\n                    </CoinRow>\n                ))}\n            </Section>\n        </Wrapper>\n    );\n};\n\nexport default CoinsGroup;\n","import React from 'react';\nimport { SettingsLayout } from '@settings-components';\nimport { Translation } from '@suite-components';\nimport { NETWORKS } from '@wallet-config';\nimport { Network } from '@wallet-types';\nimport CoinsGroup from './components/CoinsGroup';\nimport { Props } from './Container';\n\nconst Settings = (props: Props) => {\n    const { enabledNetworks } = props.wallet.settings;\n    const unavailableCapabilities =\n        props.device && props.device.features ? props.device.unavailableCapabilities : {};\n\n    const mainnetNetworksFilterFn = (n: Network) => !n.accountType && !n.testnet;\n\n    const testnetNetworksFilterFn = (n: Network) =>\n        !n.accountType && 'testnet' in n && n.testnet === true;\n\n    const unavailableNetworksFilterFn = (symbol: Network['symbol']) =>\n        !unavailableCapabilities[symbol];\n\n    const enabledMainnetNetworks: Network['symbol'][] = [];\n    const enabledTestnetNetworks: Network['symbol'][] = [];\n\n    enabledNetworks.forEach(symbol => {\n        const network = NETWORKS.find(n => n.symbol === symbol);\n        if (!network) return;\n        if (network.testnet) {\n            enabledTestnetNetworks.push(network.symbol);\n        } else {\n            enabledMainnetNetworks.push(network.symbol);\n        }\n    });\n\n    return (\n        <SettingsLayout>\n            <CoinsGroup\n                label={<Translation id=\"TR_COINS\" />}\n                description={<Translation id=\"TR_COINS_SETTINGS_ALSO_DEFINES\" />}\n                enabledNetworks={enabledMainnetNetworks}\n                filterFn={mainnetNetworksFilterFn}\n                onToggleOneFn={props.changeCoinVisibility}\n                onActivateAll={() =>\n                    props.changeNetworks([\n                        ...enabledTestnetNetworks.filter(unavailableNetworksFilterFn),\n                        ...NETWORKS.filter(mainnetNetworksFilterFn)\n                            .map(n => n.symbol)\n                            .filter(unavailableNetworksFilterFn),\n                    ])\n                }\n                onDeactivateAll={() => props.changeNetworks(enabledTestnetNetworks)}\n                type=\"mainnet\"\n                unavailableCapabilities={unavailableCapabilities}\n            />\n\n            <CoinsGroup\n                label={<Translation id=\"TR_TESTNET_COINS\" />}\n                description={<Translation id=\"TR_TESTNET_COINS_EXPLAINED\" />}\n                enabledNetworks={enabledTestnetNetworks}\n                filterFn={testnetNetworksFilterFn}\n                onToggleOneFn={props.changeCoinVisibility}\n                onActivateAll={() =>\n                    props.changeNetworks([\n                        ...enabledMainnetNetworks.filter(unavailableNetworksFilterFn),\n                        ...NETWORKS.filter(testnetNetworksFilterFn)\n                            .map(n => n.symbol)\n                            .filter(unavailableNetworksFilterFn),\n                    ])\n                }\n                onDeactivateAll={() => props.changeNetworks(enabledMainnetNetworks)}\n                type=\"testnet\"\n                unavailableCapabilities={unavailableCapabilities}\n            />\n        </SettingsLayout>\n    );\n};\n\nexport default Settings;\n","import { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as walletSettingsActions from '@settings-actions/walletSettingsActions';\nimport { AppState, Dispatch } from '@suite-types';\nimport Component from './index';\n\nconst mapStateToProps = (state: AppState) => ({\n    device: state.suite.device,\n    wallet: state.wallet,\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) =>\n    bindActionCreators(\n        {\n            changeCoinVisibility: walletSettingsActions.changeCoinVisibility,\n            changeNetworks: walletSettingsActions.changeNetworks,\n        },\n        dispatch,\n    );\n\nexport type Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Component);\n","import Page from '@settings-views/coins/Container';\n\nexport default Page;\n","\n      (window.__NEXT_P = window.__NEXT_P || []).push([\n        \"/settings/coins\",\n        function () {\n          return require(\"private-next-pages/settings/coins/index.tsx\");\n        }\n      ]);\n    "],"sourceRoot":""}