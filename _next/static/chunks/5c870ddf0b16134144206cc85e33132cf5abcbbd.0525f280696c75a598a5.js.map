{"version":3,"sources":["webpack://_N_E/../suite/src/hooks/wallet/useCoinmarketBuyForm.ts","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/components/BuyForm/Inputs/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/components/BuyForm/Footer/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/components/BuyForm/index.tsx","webpack://_N_E/../suite/src/views/wallet/coinmarket/buy/index.tsx"],"names":["BuyFormContext","createContext","displayName","useCoinmarketBuyFormContext","context","useContext","Error","Wrapper","styled","div","variables","SCREEN_SIZE","LG","Left","Right","Middle","StyledIcon","Icon","Inputs","register","errors","trigger","watch","account","network","control","setValue","clearErrors","formState","amountLimits","buyInfo","setAmountLimits","defaultCurrency","accountHasCachedRequest","quotesRequest","symbol","uppercaseSymbol","toUpperCase","fiatInput","cryptoInput","activeInput","setActiveInput","useState","useEffect","noTopLabel","defaultValue","fiatStringAmount","innerRef","validate","value","isSubmitting","id","amountBig","Bignumber","isNaN","lte","isDecimalsValid","values","decimals","amount","Number","minFiat","minimum","currency","maxFiat","maximum","onFocus","onChange","state","undefined","name","maxLength","MAX_LENGTH","AMOUNT","bottomText","error","innerAddon","fiatCurrency","label","render","options","FIAT","currencies","filter","c","supportedFiatCurrencies","has","map","buildOption","isSearchable","isClearable","minWidth","isClean","hideTextCursor","selected","icon","size","cryptoStringAmount","minCrypto","maxCrypto","receiveCurrency","getCryptoOptions","networkType","isDropdownVisible","isDisabled","props","theme","STROKE_GREY","SM","OptionLabel","FlagWrapper","LabelText","FONT_SIZE","SMALL","FONT_WEIGHT","MEDIUM","TYPE_DARK_GREY","Label","TYPE_LIGHT_GREY","StyledButton","Button","StyledSelect","Select","Footer","defaultCountry","hasValues","formIsValid","Object","keys","length","country","regional","countriesMap","get","isHovered","countriesOptions","formatOptionLabel","option","labelParts","getCountryLabelParts","text","maxSearchLength","isLoading","type","Form","form","Loading","BIG","NoProviders","BuyForm","onSubmit","handleSubmit","noProviders","CoinmarketBuyLoaded","selectedAccount","coinmarketBuyContextValues","cachedAccountInfo","useInvityAPI","methods","useForm","mode","saveQuoteRequest","saveQuotes","saveCachedAccountInfo","saveTrade","goto","useActions","coinmarketBuyActions","routerActions","unknownCountry","defaultCurrencyInfo","suggestedFiatCurrency","index","accountType","typedRegister","useCallback","rules","providers","supportedCryptoCurrencies","async","formValues","getValues","request","wantCrypto","currencySelect","cryptoSelect","countrySelect","allQuotes","invityAPI","getBuyQuotes","quotes","alternativeQuotes","processQuotes","limits","getAmountLimits","accountIndex","useCoinmarketBuyForm","Provider","connect","wallet","coinmarket","buy","status","title"],"mappings":"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","file":"static/chunks/5c870ddf0b16134144206cc85e33132cf5abcbbd.0525f280696c75a598a5.js","sourcesContent":["import { createContext, useContext, useCallback, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { useInvityAPI } from '@wallet-hooks/useCoinmarket';\nimport * as coinmarketBuyActions from '@wallet-actions/coinmarketBuyActions';\nimport { useActions } from '@suite-hooks';\nimport { buildOption } from '@wallet-utils/coinmarket/coinmarketUtils';\nimport regional from '@wallet-constants/coinmarket/regional';\nimport { BuyTradeQuoteRequest } from 'invity-api';\nimport invityAPI from '@suite-services/invityAPI';\nimport * as routerActions from '@suite-actions/routerActions';\nimport { getAmountLimits, processQuotes } from '@wallet-utils/coinmarket/buyUtils';\nimport {\n    FormState,\n    Props,\n    AmountLimits,\n    BuyFormContextValues,\n} from '@wallet-types/coinmarketBuyForm';\n\nexport const BuyFormContext = createContext<BuyFormContextValues | null>(null);\nBuyFormContext.displayName = 'CoinmarketBuyContext';\n\nexport const useCoinmarketBuyForm = (props: Props): BuyFormContextValues => {\n    const { selectedAccount, cachedAccountInfo, quotesRequest } = props;\n    const { buyInfo } = useInvityAPI();\n    const { account, network } = selectedAccount;\n    const [amountLimits, setAmountLimits] = useState<AmountLimits | undefined>(undefined);\n    const methods = useForm<FormState>({ mode: 'onChange' });\n\n    const { saveQuoteRequest, saveQuotes, saveCachedAccountInfo, saveTrade, goto } = useActions({\n        saveQuoteRequest: coinmarketBuyActions.saveQuoteRequest,\n        saveQuotes: coinmarketBuyActions.saveQuotes,\n        saveCachedAccountInfo: coinmarketBuyActions.saveCachedAccountInfo,\n        saveTrade: coinmarketBuyActions.saveTrade,\n        goto: routerActions.goto,\n    });\n\n    const { register } = methods;\n\n    const onSubmit = async () => {\n        const formValues = methods.getValues();\n        const fiatStringAmount = formValues.fiatInput;\n        const cryptoStringAmount = formValues.cryptoInput;\n        const wantCrypto = !fiatStringAmount;\n        const request: BuyTradeQuoteRequest = {\n            wantCrypto,\n            fiatCurrency: formValues.currencySelect.value.toUpperCase(),\n            receiveCurrency: formValues.cryptoSelect.value,\n            country: formValues.countrySelect.value,\n            fiatStringAmount,\n            cryptoStringAmount,\n        };\n        await saveQuoteRequest(request);\n        await saveCachedAccountInfo(account.symbol, account.index, account.accountType);\n        const allQuotes = await invityAPI.getBuyQuotes(request);\n        const [quotes, alternativeQuotes] = processQuotes(allQuotes);\n        const limits = getAmountLimits(request, quotes);\n\n        if (limits) {\n            setAmountLimits(limits);\n        } else {\n            await saveQuotes(quotes, alternativeQuotes);\n            goto('wallet-coinmarket-buy-offers', {\n                symbol: account.symbol,\n                accountIndex: account.index,\n                accountType: account.accountType,\n            });\n        }\n    };\n\n    const country = buyInfo?.buyInfo?.country || regional.unknownCountry;\n    const defaultCountry = {\n        label: regional.countriesMap.get(country),\n        value: country,\n    };\n    const defaultCurrencyInfo = buyInfo?.buyInfo?.suggestedFiatCurrency;\n    const defaultCurrency = defaultCurrencyInfo\n        ? buildOption(defaultCurrencyInfo)\n        : { label: 'USD', value: 'usd' };\n\n    const accountHasCachedRequest =\n        account.symbol === cachedAccountInfo.symbol &&\n        account.index === cachedAccountInfo.index &&\n        account.accountType === cachedAccountInfo.accountType;\n\n    const typedRegister = useCallback(<T>(rules?: T) => register(rules), [register]);\n    const isLoading = !buyInfo || !buyInfo?.buyInfo;\n    const noProviders =\n        !isLoading &&\n        (buyInfo?.buyInfo?.providers.length === 0 ||\n            !buyInfo?.supportedCryptoCurrencies.has(account.symbol));\n\n    return {\n        ...methods,\n        account,\n        onSubmit,\n        defaultCountry,\n        defaultCurrency,\n        register: typedRegister,\n        buyInfo,\n        accountHasCachedRequest,\n        cachedAccountInfo,\n        saveQuoteRequest,\n        saveQuotes,\n        quotesRequest,\n        saveCachedAccountInfo,\n        saveTrade,\n        amountLimits,\n        setAmountLimits,\n        isLoading,\n        noProviders,\n        network,\n    };\n};\n\nexport const useCoinmarketBuyFormContext = () => {\n    const context = useContext(BuyFormContext);\n    if (context === null) throw Error('BuyFormContext used without Context');\n    return context;\n};\n","import { FIAT } from '@suite-config';\nimport { Translation } from '@suite-components';\nimport { getCryptoOptions } from '@wallet-utils/coinmarket/buyUtils';\nimport { Select, Icon, Input, variables } from '@trezor/components';\nimport { buildOption } from '@wallet-utils/coinmarket/coinmarketUtils';\nimport React, { useEffect, useState } from 'react';\nimport Bignumber from 'bignumber.js';\nimport { Controller } from 'react-hook-form';\nimport { useCoinmarketBuyFormContext } from '@wallet-hooks/useCoinmarketBuyForm';\nimport styled from 'styled-components';\nimport { isDecimalsValid } from '@wallet-utils/validation';\nimport { InputError } from '@wallet-components';\nimport { MAX_LENGTH } from '@suite-constants/inputs';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex: 1;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        flex-direction: column;\n    }\n`;\n\nconst Left = styled.div`\n    display: flex;\n    flex: 1;\n`;\n\nconst Right = styled.div`\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n`;\n\nconst Middle = styled.div`\n    display: flex;\n    min-width: 65px;\n    height: 48px;\n    align-items: center;\n    justify-content: center;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        padding-bottom: 27px;\n    }\n`;\n\nconst StyledIcon = styled(Icon)`\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        transform: rotate(90deg);\n    }\n`;\n\nconst Inputs = () => {\n    const {\n        register,\n        errors,\n        trigger,\n        watch,\n        account,\n        network,\n        control,\n        setValue,\n        clearErrors,\n        formState,\n        amountLimits,\n        buyInfo,\n        setAmountLimits,\n        defaultCurrency,\n        accountHasCachedRequest,\n        quotesRequest,\n    } = useCoinmarketBuyFormContext();\n    const { symbol } = account;\n    const uppercaseSymbol = symbol.toUpperCase();\n    const fiatInput = 'fiatInput';\n    const cryptoInput = 'cryptoInput';\n    const currencySelect = 'currencySelect';\n    const cryptoSelect = 'cryptoSelect';\n    const [activeInput, setActiveInput] = useState<'fiatInput' | 'cryptoInput'>(fiatInput);\n    // if cryptoInput has a valid value, set it as the activeInput\n    if (watch('cryptoInput') && !errors[cryptoInput] && activeInput === fiatInput) {\n        setActiveInput(cryptoInput);\n    }\n\n    useEffect(() => {\n        trigger([activeInput]);\n    }, [activeInput, amountLimits, trigger]);\n\n    return (\n        <Wrapper>\n            <Left>\n                <Input\n                    noTopLabel\n                    defaultValue={\n                        accountHasCachedRequest && quotesRequest\n                            ? quotesRequest.fiatStringAmount\n                            : ''\n                    }\n                    innerRef={register({\n                        validate: (value: string) => {\n                            if (activeInput === fiatInput) {\n                                if (!value) {\n                                    if (formState.isSubmitting) {\n                                        return <Translation id=\"TR_BUY_VALIDATION_ERROR_EMPTY\" />;\n                                    }\n                                    return;\n                                }\n\n                                const amountBig = new Bignumber(value);\n                                if (amountBig.isNaN()) {\n                                    return <Translation id=\"AMOUNT_IS_NOT_NUMBER\" />;\n                                }\n\n                                if (amountBig.lte(0)) {\n                                    return <Translation id=\"AMOUNT_IS_TOO_LOW\" />;\n                                }\n\n                                if (!isDecimalsValid(value, 2)) {\n                                    return (\n                                        <Translation\n                                            id=\"AMOUNT_IS_NOT_IN_RANGE_DECIMALS\"\n                                            values={{ decimals: 2 }}\n                                        />\n                                    );\n                                }\n\n                                if (amountLimits) {\n                                    const amount = Number(value);\n                                    if (amountLimits.minFiat && amount < amountLimits.minFiat) {\n                                        return (\n                                            <Translation\n                                                id=\"TR_BUY_VALIDATION_ERROR_MINIMUM_FIAT\"\n                                                values={{\n                                                    minimum: amountLimits.minFiat,\n                                                    currency: amountLimits.currency,\n                                                }}\n                                            />\n                                        );\n                                    }\n                                    if (amountLimits.maxFiat && amount > amountLimits.maxFiat) {\n                                        return (\n                                            <Translation\n                                                id=\"TR_BUY_VALIDATION_ERROR_MAXIMUM_FIAT\"\n                                                values={{\n                                                    maximum: amountLimits.maxFiat,\n                                                    currency: amountLimits.currency,\n                                                }}\n                                            />\n                                        );\n                                    }\n                                }\n                            }\n                        },\n                    })}\n                    onFocus={() => {\n                        setActiveInput(fiatInput);\n                    }}\n                    onChange={() => {\n                        setActiveInput(fiatInput);\n                        setValue(cryptoInput, '');\n                        clearErrors(cryptoInput);\n                    }}\n                    state={errors[fiatInput] ? 'error' : undefined}\n                    name={fiatInput}\n                    maxLength={MAX_LENGTH.AMOUNT}\n                    bottomText={<InputError error={errors[fiatInput]} />}\n                    innerAddon={\n                        <Controller\n                            control={control}\n                            name={currencySelect}\n                            defaultValue={\n                                accountHasCachedRequest && quotesRequest?.fiatCurrency\n                                    ? {\n                                          label: quotesRequest.fiatCurrency.toUpperCase(),\n                                          value: quotesRequest.fiatCurrency.toUpperCase(),\n                                      }\n                                    : defaultCurrency\n                            }\n                            render={({ onChange, value }) => {\n                                return (\n                                    <Select\n                                        options={FIAT.currencies\n                                            .filter(c => buyInfo?.supportedFiatCurrencies.has(c))\n                                            .map((currency: string) => buildOption(currency))}\n                                        isSearchable\n                                        value={value}\n                                        isClearable={false}\n                                        minWidth=\"45px\"\n                                        isClean\n                                        hideTextCursor\n                                        onChange={(selected: any) => {\n                                            onChange(selected);\n                                            setAmountLimits(undefined);\n                                        }}\n                                    />\n                                );\n                            }}\n                        />\n                    }\n                />\n            </Left>\n            <Middle>\n                <StyledIcon icon=\"TRANSFER\" size={16} />\n            </Middle>\n            <Right>\n                <Input\n                    onFocus={() => {\n                        setActiveInput(cryptoInput);\n                    }}\n                    onChange={() => {\n                        setValue(fiatInput, '');\n                        clearErrors(fiatInput);\n                    }}\n                    defaultValue={\n                        accountHasCachedRequest && quotesRequest\n                            ? quotesRequest.cryptoStringAmount\n                            : ''\n                    }\n                    state={errors[cryptoInput] ? 'error' : undefined}\n                    name={cryptoInput}\n                    noTopLabel\n                    maxLength={MAX_LENGTH.AMOUNT}\n                    innerRef={register({\n                        validate: (value: string) => {\n                            if (activeInput === cryptoInput) {\n                                if (!value) {\n                                    if (formState.isSubmitting) {\n                                        return <Translation id=\"TR_BUY_VALIDATION_ERROR_EMPTY\" />;\n                                    }\n\n                                    return;\n                                }\n\n                                const amountBig = new Bignumber(value);\n\n                                if (amountBig.isNaN()) {\n                                    return <Translation id=\"AMOUNT_IS_NOT_NUMBER\" />;\n                                }\n\n                                if (amountBig.lte(0)) {\n                                    return <Translation id=\"AMOUNT_IS_TOO_LOW\" />;\n                                }\n\n                                if (!isDecimalsValid(value, network.decimals)) {\n                                    return (\n                                        <Translation\n                                            id=\"AMOUNT_IS_NOT_IN_RANGE_DECIMALS\"\n                                            values={{ decimals: network.decimals }}\n                                        />\n                                    );\n                                }\n\n                                if (amountLimits) {\n                                    const amount = Number(value);\n                                    if (amountLimits.minCrypto && amount < amountLimits.minCrypto) {\n                                        return (\n                                            <Translation\n                                                id=\"TR_BUY_VALIDATION_ERROR_MINIMUM_CRYPTO\"\n                                                values={{\n                                                    minimum: amountLimits.minCrypto,\n                                                    currency: amountLimits.currency,\n                                                }}\n                                            />\n                                        );\n                                    }\n                                    if (amountLimits.maxCrypto && amount > amountLimits.maxCrypto) {\n                                        return (\n                                            <Translation\n                                                id=\"TR_BUY_VALIDATION_ERROR_MAXIMUM_CRYPTO\"\n                                                values={{\n                                                    maximum: amountLimits.maxCrypto,\n                                                    currency: amountLimits.currency,\n                                                }}\n                                            />\n                                        );\n                                    }\n                                }\n                            }\n                        },\n                    })}\n                    bottomText={<InputError error={errors[cryptoInput]} />}\n                    innerAddon={\n                        <Controller\n                            control={control}\n                            name={cryptoSelect}\n                            defaultValue={\n                                accountHasCachedRequest && quotesRequest?.receiveCurrency\n                                    ? {\n                                          label: quotesRequest.receiveCurrency.toUpperCase(),\n                                          value: quotesRequest.receiveCurrency.toUpperCase(),\n                                      }\n                                    : {\n                                          value: uppercaseSymbol,\n                                          label: uppercaseSymbol,\n                                      }\n                            }\n                            render={({ onChange, value }) => {\n                                return (\n                                    <Select\n                                        onChange={(selected: any) => {\n                                            onChange(selected);\n                                        }}\n                                        value={value}\n                                        isClearable={false}\n                                        options={getCryptoOptions(\n                                            account.symbol,\n                                            account.networkType,\n                                        )}\n                                        isClean\n                                        hideTextCursor\n                                        isDropdownVisible={account.networkType === 'ethereum'}\n                                        isDisabled={account.networkType !== 'ethereum'}\n                                        minWidth=\"70px\"\n                                    />\n                                );\n                            }}\n                        />\n                    }\n                />\n            </Right>\n        </Wrapper>\n    );\n};\n\nexport default Inputs;\n","import React from 'react';\nimport { Button, Select, variables, Flag } from '@trezor/components';\nimport regional from '@wallet-constants/coinmarket/regional';\nimport { useCoinmarketBuyFormContext } from '@wallet-hooks/useCoinmarketBuyForm';\nimport { getCountryLabelParts } from '@wallet-utils/coinmarket/buyUtils';\nimport { CountryOption } from '@wallet-types/coinmarketBuyForm';\nimport { Translation } from '@suite-components';\nimport { Controller } from 'react-hook-form';\nimport styled from 'styled-components';\n\nconst Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    padding-top: 30px;\n    border-top: 1px solid ${props => props.theme.STROKE_GREY};\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        flex-direction: column;\n    }\n`;\n\nconst OptionLabel = styled.div`\n    display: flex;\n    align-items: center;\n`;\n\nconst FlagWrapper = styled.div`\n    padding-right: 10px;\n`;\n\nconst LabelText = styled.div`\n    font-size: ${variables.FONT_SIZE.SMALL};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n    color: ${props => props.theme.TYPE_DARK_GREY};\n`;\n\nconst Left = styled.div`\n    display: flex;\n    flex: 1;\n`;\n\nconst Right = styled.div`\n    display: flex;\n    flex: 1;\n    justify-content: flex-end;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        justify-content: flex-start;\n    }\n`;\n\nconst Label = styled.div`\n    display: flex;\n    align-items: center;\n    white-space: nowrap;\n    padding-top: 1px;\n    color: ${props => props.theme.TYPE_LIGHT_GREY};\n    font-weight: ${variables.FONT_WEIGHT.MEDIUM};\n`;\n\nconst StyledButton = styled(Button)`\n    display: flex;\n    min-width: 200px;\n    margin-left: 20px;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.SM}) {\n        margin-top: 20px;\n        margin-left: 0;\n        width: 100%;\n    }\n`;\n\nconst StyledSelect = styled(Select)`\n    width: max-content;\n`;\n\nconst Footer = () => {\n    const {\n        errors,\n        control,\n        formState,\n        watch,\n        setAmountLimits,\n        defaultCountry,\n        accountHasCachedRequest,\n        quotesRequest,\n    } = useCoinmarketBuyFormContext();\n    const countrySelect = 'countrySelect';\n    const hasValues =\n        (watch('fiatInput') || watch('cryptoInput')) && !!watch('currencySelect').value;\n    // used instead of formState.isValid, which is sometimes returning false even if there are no errors\n    const formIsValid = Object.keys(errors).length === 0;\n\n    return (\n        <Wrapper>\n            <Left>\n                <Label>\n                    <Translation id=\"TR_BUY_OFFERS_FOR\" />\n                </Label>\n                <Controller\n                    control={control}\n                    defaultValue={\n                        accountHasCachedRequest && quotesRequest?.country\n                            ? {\n                                  label: regional.countriesMap.get(quotesRequest.country),\n                                  value: quotesRequest.country,\n                              }\n                            : defaultCountry\n                    }\n                    name={countrySelect}\n                    render={({ onChange, value }) => {\n                        return (\n                            <StyledSelect\n                                noTopLabel\n                                isDropdownVisible\n                                isHovered\n                                options={regional.countriesOptions}\n                                isSearchable\n                                value={value}\n                                formatOptionLabel={(option: CountryOption) => {\n                                    const labelParts = getCountryLabelParts(option.label);\n                                    if (!labelParts) return null;\n\n                                    return (\n                                        <OptionLabel>\n                                            <FlagWrapper>\n                                                <Flag country={option.value} />\n                                            </FlagWrapper>\n                                            <LabelText>{labelParts.text}</LabelText>\n                                        </OptionLabel>\n                                    );\n                                }}\n                                isClearable={false}\n                                minWidth=\"160px\"\n                                isClean\n                                hideTextCursor\n                                onChange={(selected: any) => {\n                                    onChange(selected);\n                                    setAmountLimits(undefined);\n                                }}\n                                maxSearchLength={12}\n                            />\n                        );\n                    }}\n                />\n            </Left>\n            <Right>\n                <StyledButton\n                    isDisabled={!(formIsValid && hasValues) || formState.isSubmitting}\n                    isLoading={formState.isSubmitting}\n                    type=\"submit\"\n                >\n                    <Translation id=\"TR_BUY_SHOW_OFFERS\" />\n                </StyledButton>\n            </Right>\n        </Wrapper>\n    );\n};\n\nexport default Footer;\n","import React from 'react';\nimport { useCoinmarketBuyFormContext } from '@wallet-hooks/useCoinmarketBuyForm';\nimport styled from 'styled-components';\nimport { Translation } from '@suite-components';\nimport { variables } from '@trezor/components';\n\nimport Inputs from './Inputs';\nimport Footer from './Footer';\n\nconst Wrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    flex: 1;\n\n    @media screen and (max-width: ${variables.SCREEN_SIZE.LG}) {\n        padding: 0;\n    }\n`;\n\nconst Form = styled.form``;\n\nconst Loading = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.BIG};\n`;\n\nconst NoProviders = styled.div`\n    display: flex;\n    font-size: ${variables.FONT_SIZE.BIG};\n`;\n\nconst BuyForm = () => {\n    const { onSubmit, handleSubmit, isLoading, noProviders } = useCoinmarketBuyFormContext();\n\n    return (\n        <Wrapper>\n            {isLoading && (\n                <Loading>\n                    <Translation id=\"TR_BUY_LOADING\" />\n                </Loading>\n            )}\n            {!isLoading && noProviders && (\n                <NoProviders>\n                    <Translation id=\"TR_BUY_NO_PROVIDERS\" />\n                </NoProviders>\n            )}\n            {!isLoading && !noProviders && (\n                <Form onSubmit={handleSubmit(onSubmit)}>\n                    <Inputs />\n                    <Footer />\n                </Form>\n            )}\n        </Wrapper>\n    );\n};\n\nexport default BuyForm;\n","import React from 'react';\nimport { AppState } from '@suite-types';\nimport { useCoinmarketBuyForm, BuyFormContext } from '@wallet-hooks/useCoinmarketBuyForm';\nimport { CoinmarketLayout, WalletLayout } from '@wallet-components';\nimport { ComponentProps, Props } from '@wallet-types/coinmarketBuyForm';\nimport { connect } from 'react-redux';\nimport BuyForm from './components/BuyForm';\n\nconst mapStateToProps = (state: AppState): ComponentProps => ({\n    selectedAccount: state.wallet.selectedAccount,\n    quotesRequest: state.wallet.coinmarket.buy.quotesRequest,\n    cachedAccountInfo: state.wallet.coinmarket.buy.cachedAccountInfo,\n});\n\nconst CoinmarketBuyLoaded = (props: Props) => {\n    const { selectedAccount } = props;\n    const coinmarketBuyContextValues = useCoinmarketBuyForm({ ...props, selectedAccount });\n\n    return (\n        <CoinmarketLayout>\n            <BuyFormContext.Provider value={coinmarketBuyContextValues}>\n                <BuyForm />\n            </BuyFormContext.Provider>\n        </CoinmarketLayout>\n    );\n};\n\nconst CoinmarketBuy = (props: ComponentProps) => {\n    const { selectedAccount } = props;\n    if (selectedAccount.status !== 'loaded') {\n        return <WalletLayout title=\"TR_NAV_BUY\" account={selectedAccount} />;\n    }\n    return <CoinmarketBuyLoaded {...props} selectedAccount={selectedAccount} />;\n};\n\nexport default connect(mapStateToProps)(CoinmarketBuy);\n"],"sourceRoot":""}