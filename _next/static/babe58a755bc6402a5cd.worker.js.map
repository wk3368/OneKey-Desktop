{"version":3,"sources":["webpack://_N_E/webpack/bootstrap","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/@babel/runtime/helpers/esm/defineProperty.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/_lib/requiredArgs/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/toDate/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/_lib/toInteger/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/fromUnixTime/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/getTime/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/getUnixTime/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/startOfMonth/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/differenceInCalendarMonths/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/compareAsc/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/differenceInMonths/index.js","webpack://_N_E/../suite/src/utils/wallet/fiatConverterUtils.ts","webpack://_N_E/../suite/src/constants/wallet/account.ts","webpack://_N_E/../suite/src/config/wallet/networks.ts","webpack://_N_E/../suite/src/config/wallet/index.ts","webpack://_N_E/../suite/src/utils/wallet/accountUtils.ts","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/differenceInMilliseconds/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/differenceInSeconds/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/locale/en-US/_lib/match/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/locale/en-US/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/_lib/assign/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/_lib/cloneObject/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/formatDistance/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/eachDayOfInterval/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/eachMonthOfInterval/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/addMonths/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/addQuarters/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/startOfQuarter/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/eachQuarterOfInterval/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/startOfDay/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns-tz/esm/_lib/tzTokenizeDate/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns-tz/esm/_lib/tzParseTimezone/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/addMilliseconds/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns/esm/subMilliseconds/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns-tz/esm/toDate/index.js","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/date-fns-tz/esm/utcToZonedTime/index.js","webpack://_N_E/../suite/src/utils/suite/date.ts","webpack://_N_E/../suite/src/utils/wallet/graphUtils.ts","webpack://_N_E/../suite/src/workers/graph.worker.ts","webpack://_N_E//home/runner/work/OneKey-Desktop/OneKey-Desktop/node_modules/bignumber.js/bignumber.js"],"names":["toFiatCurrency","amount","fiatCurrency","networkRates","decimals","rate","formattedAmount","replace","localAmount","BigNumber","times","isNaN","toFixed","fromFiatCurrency","formattedLocalAmount","div","amountStr","NETWORK_TYPE","BITCOIN","ETHEREUM","RIPPLE","ACCOUNT_TYPE","NORMAL","LEGACY","SEGWIT","DEFAULT_BTC_ACCOUNT_TYPE","networks","name","networkType","accountType","symbol","bip44","hasSignVerify","explorer","tx","account","features","chainId","testnet","parseBIP44Path","path","regEx","tokens","match","length","purpose","coinType","change","addrIndex","getFiatValue","fixedTo","fiatValueBigNumber","multipliedBy","fiatValue","getTitleForNetwork","toLowerCase","getAccountTypeIntl","getBip43Shortcut","bip43","split","getBip43Intl","stripNetworkAmount","formatAmount","bAmount","Error","toString","error","amountToSatoshi","networkAmountToSatoshi","network","NETWORKS","find","n","formatNetworkAmount","withSymbol","toUpperCase","sortByCoin","accounts","sort","a","b","aIndex","findIndex","bIndex","index","findAccountsByDescriptor","descriptor","filter","findAccountsByAddress","address","addresses","used","u","unused","findAccountDevice","devices","d","state","deviceState","getAllAccounts","visible","getSelectedAccount","routerParams","accountIndex","getNetwork","c","getAccountKey","getAccountTransactions","transactions","accountHash","countUniqueCoins","coins","Set","forEach","acc","add","size","enhanceTokens","t","balance","map","getAccountFiatBalance","localCurrency","fiat","fiatRates","f","fiatBalance","formattedBalance","current","rates","getTotalFiatBalance","deviceAccounts","instanceBalance","accountFiatBalance","plus","isTestnet","net","isAccountOutdated","freshInfo","changedTxCount","history","total","unconfirmed","changedRipple","misc","sequence","changedEthereum","nonce","getAccountSpecific","accountInfo","reserve","marker","page","undefined","getFailedAccounts","discovery","failed","key","empty","availableBalance","utxo","metadata","fileName","aesKey","outputLabels","addressLabels","getAccountIdentifier","accountSearchFn","rawSearchString","coinFilter","coinFilterMatch","searchString","trim","matchAddressFn","symbolMatch","startsWith","networkNameMatch","includes","accountTypeMatch","descriptorMatch","addressMatch","matchXRPAlternativeName","metadataMatch","accountLabel","getUtxoFromSignedTransaction","txid","prevTxid","type","replaceUtxo","transaction","inputs","i","prev_hash","prev_index","vout","concat","outputs","output","addr","address_n","serialized","slice","join","endsWith","utxoSpent","unshift","blockHeight","confirmations","getPendingAccount","availableBalanceBig","minus","totalSpent","getRbfPendingAccount","newTxid","feeDiff","formatDuration","seconds","formatDistance","includeSeconds","getLocalTimeZone","Intl","DateTimeFormat","resolvedOptions","timeZone","getDateWithTimeZone","date","unixDate","fromUnixTime","tz","utcToZonedTime","err","console","calcTicks","startDate","endDate","timestamps","differenceInMonths","eachDayOfInterval","start","end","eachMonthOfInterval","calcTicksFromData","data","reduce","min","time","max","startUnix","endUnix","interval","differenceInCalendarMonths","eachQuarterOfInterval","getBlockbookSafeTime","timestamp","getUnixTime","Date","resetTime","ts","resetDay","sanitizedTimestamp","startOfDay","startOfMonth","resetUTCTime","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCDate","sanitizedUnixTimestamp","isAccountAggregatedHistory","sent","calcFiatValueMap","fiatValueMap","Object","keys","fiatSymbol","sumFiatValueMapInPlace","valueMap","obj","entries","keyVal","val","previousValue","sumFiatValueMap","newMap","getMinMaxValueFromData","_type","extractSentValue","extractReceivedValue","extractBalanceValue","maxSent","maxReceived","maxBalance","minSent","minReceived","minBalance","newSentValue","newReceivedValue","newBalanceValue","gt","lt","maxValue","Math","toNumber","minsToCompare","m","minValue","aggregateBalanceHistory","graphData","groupBy","groupedByTimestamp","accountHistory","h","dataPoint","receivedFiat","received","sentFiat","balanceFiat","getFullYear","getMonth","getDate","bin","baseProps","txs","accountProps","aggregatedData","Number","accountGraphDataFilterFn","deviceGraphDataFilterFn","calcMinYDomain","minMaxValues","minDataValue","calcYDomain","scale","lastBalance","maxDataValue","maxValueMultiplier","lastBalanceBn","calcXDomain","ticks","range","lastTick","lastData","xPadding","label","getFormattedLabel","rangeLabel","getFormattedLabelLong","calcFakeGraphDataForTimestamps","currentBalance","balanceData","firstDataPoint","lastDataPoint","firstTimestamp","lastTimestamp","push","closest","sortedData","enhanceBlockchainAccountHistory","enhancedResponse","normalizedReceived","sentToSelf","normalizedSent","formattedReceived","formattedSent","ctx","self","addEventListener","event","result","postMessage"],"mappings":";QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA,IAAI;QACJ;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;;ACxFe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA,C;;;;;;ACbe;AACf;AACA;AACA;AACA,C;;ACJyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,wDAAwD;;AAExD;AACA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,uKAAuK;;AAEvK;AACA;;AAEA;AACA;AACA,C;;ACnDe;AACf;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,C;;ACZwC;AACW;AACM;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,iBAAiB,SAAS;AAC1B,SAAS,MAAM;AACf,C;;AC7BwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,aAAa,MAAM;AACnB;AACA;AACA,C;;AC7B0C;AACe;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,oBAAoB,OAAO;AAC3B,C;;AC3BwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,aAAa,MAAM;AACnB;AACA;AACA;AACA,C;;AC/BwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,YAAY;AACvB,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,iBAAiB,MAAM;AACvB,kBAAkB,MAAM;AACxB;AACA;AACA;AACA,C;;ACnCwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,YAAY;AACvB,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,iBAAiB,MAAM;AACvB,kBAA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FJ;AAGIhC,oBAAgB,EAAEtD,mBAAmB,CAACsF,gBAAD,EAAmB5H,OAAO,CAACL,MAA3B,CAHzC;AAIIkI;AAJJ;AAMH,CAnBM,C;;AChiBiC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,YAAY;AACvB,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,iBAAiB,MAAM;AACvB,kBAAkB,MAAM;AACxB;AACA,C;;AClC4E;AACnB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,YAAY;AACvB,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,aAAa,wBAAwB;AACrC;AACA,C;;ACjCA;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA;AACA,wBAAwB,OAAO;AAC/B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,oBAAoB,OAAO;AAC3B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,oBAAoB,OAAO;AAC3B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,oBAAoB,OAAO;AAC3B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,oBAAoB,OAAO;AAC3B,GAAG;AACH;AACA;AACA,cAAc,OAAO;AACrB,GAAG;AACH;AACA;AACA,mBAAmB,OAAO;AAC1B,GAAG;AACH;AACA;AACA,qBAAqB,OAAO;AAC5B;AACA;AACe;AACf;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH,0DAA0D,OAAO;AACjE;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,C;;ACpFe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,C;;ACPyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,MAAM,QAAQ,MAAM;AAC/B,WAAW,MAAM,QAAQ,MAAM;AAC/B,aAAa,MAAM,IAAI,MAAM;AAC7B,YAAY,MAAM,IAAI,MAAM;AAC5B;AACA;AACA,QAAQ,iBAAiB;AACzB;AACA;AACA,GAAG;AACH,QAAQ,iBAAiB;AACzB;AACA;AACA,GAAG;AACH,YAAY,iBAAiB;AAC7B;AACA;AACA,GAAG;AACH;AACe,8DAAU,E;;ACjCzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe;AACf;AACA,C;;ACVe;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,C;;ACrBqE;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO,eAAe;AACtB;AACA;AACA,GAAG;AACH,WAAW,eAAe;AAC1B;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,SAAS,eAAe;AACxB;AACA;AACA,GAAG;AACH,OAAO,eAAe;AACtB;AACA;AACA,GAAG;AACH,aAAa,eAAe;AAC5B;AACA;AACA;AACA;AACA,GAAG;AACH;AACe,0DAAQ,E;;ACpJR;AACf;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;ACxBe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,mBAAmB,oBAAoB;AACvC;AACA;AACA;AACA;AACA,C;;ACjD6E;AACd;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,mBAAmB;AACpC;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,OAAO,YAAY;AACnB;AACA;AACA;AACA;AACA,GAAG;AACH,WAAW,YAAY;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH,SAAS,YAAY;AACrB;AACA;AACA;AACA;AACA,GAAG;AACH,OAAO,YAAY;AACnB;AACA;AACA;AACA;AACA,GAAG;AACH,aAAa,YAAY;AACzB;AACA;AACA;AACA;AACA,GAAG;AACH;AACe,oDAAK,E;;ACjGwC;AACR;AACQ;AACZ;AACN;AAC1C;AACA,UAAU;AACV;AACA;AACA;AACA;AACA,oCAAoC;AACpC,mCAAmC;AACnC;;AAEA,IAAI,YAAM;AACV;AACA,kBAAkB,cAAc;AAChC,cAAc,eAAU;AACxB,kBAAkB,cAAc;AAChC,YAAY,aAAQ;AACpB,SAAS,UAAK;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACe,sDAAM,E;;AC7BN,SAAS,aAAM;AAC9B;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,C;;ACdwC;AACzB;AACf,SAAS,aAAM,GAAG;AAClB,C;;ACHA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,C;;ACzBgD;AACgB;AACE;AACb;AACb;AACe;AACwC;AACtC;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,WAAW,QAAQ;AACnB,WAAW,OAAO,kEAAkE;AACpF,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB,YAAY,WAAW;AACvB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,WAAW,WAAW;AACtB;AACA;AACA,IAAI;AACJ;AACA;;AAEe,SAAS,6BAAc;AACtC,EAAE,YAAY;AACd;AACA,iCAAiC,KAAa;;AAE9C;AACA;AACA;;AAEA,mBAAmB,UAAU;;AAE7B;AACA;AACA;;AAEA,wBAAwB,WAAW;AACnC;AACA;AACA;AACA;;AAEA;AACA,eAAe,MAAM;AACrB,gBAAgB,MAAM;AACtB,GAAG;AACH,eAAe,MAAM;AACrB,gBAAgB,MAAM;AACtB;;AAEA,gBAAgB,mBAAmB;AACnC,yBAAyB,+BAA+B,cAAc,+BAA+B;AACrG;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL,GAAG;AACH,uEAAuE;AACvE,GAAG;AACH,oEAAoE;AACpE,GAAG;AACH;AACA,wEAAwE;AACxE,GAAG;AACH,8DAA8D;AAC9D,GAAG;AACH;AACA,iEAAiE;AACjE,GAAG;AACH;AACA;AACA;;AAEA,WAAW,kBAAkB,sBAAsB;;AAEnD;AACA;AACA,2EAA2E;AAC3E,GAAG;AACH;AACA,wCAAwC;;AAExC;AACA,0EAA0E;AAC1E,KAAK;AACL,yEAAyE;AACzE,KAAK;AACL;AACA;AACA;AACA,C;;ACpNwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,WAAW,SAAS,yCAAyC;AAC7D,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB,YAAY,WAAW;AACvB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd;AACA,kBAAkB,MAAM;AACxB,gBAAgB,MAAM;AACtB,kCAAkC;;AAElC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,MAAM;AACrB;AACA;AACA;;AAEA;AACA,C;;ACxFwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS,yCAAyC;AAC7D,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd;AACA,kBAAkB,MAAM;AACxB,gBAAgB,MAAM;AACtB,kCAAkC;;AAElC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe,MAAM;AACrB;AACA;;AAEA;AACA,C;;ACvDmD;AACX;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,aAAa,MAAM;AACnB,eAAe,SAAS;;AAExB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;ACpEmD;AACL;AACW;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,eAAe,SAAS;AACxB;AACA,SAAS,SAAS;AAClB,C;;AC/BwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,aAAa,MAAM;AACnB;AACA;AACA;AACA;AACA;AACA,C;;ACjCkD;AACM;AAChB;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS,yCAAyC;AAC7D,aAAa,OAAO;AACpB,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd;AACA,kBAAkB,MAAM;AACxB,gBAAgB,MAAM;AACtB,kCAAkC;;AAElC;AACA;AACA;;AAEA,yBAAyB,cAAc;AACvC,uBAAuB,cAAc;AACrC;AACA;AACA;;AAEA;AACA,kBAAkB,MAAM;AACxB,qBAAqB,WAAW;AAChC;;AAEA;AACA,C;;ACtDwC;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,aAAa,MAAM;AACnB;AACA;AACA,C;;AC9BA;AACA;AACA;AACA;AACe;AACf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB,sBAAsB;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;;ACnFuD;;AAEvD;AACA,IAAI,sCAAsB;;AAE1B;AACA;AACA;AACA,0BAA0B,EAAE;AAC5B,4BAA4B,EAAE,OAAO,EAAE;AACvC;AACA;;AAEA;AACe;AACf;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,+CAA+C,sCAAsB;AACrE;AACA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB,cAAc;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;;AChFmD;AACX;AACiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,kBAAkB,MAAM;AACxB,eAAe,SAAS;AACxB;AACA,C;;AC/BmD;AACO;AACD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,YAAY;AACvB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEe;AACf,EAAE,YAAY;AACd,eAAe,SAAS;AACxB,SAAS,eAAe;AACxB,C;;AC9B4D;AAC4C;AACnD;;AAErD,IAAI,2BAAoB;AACxB,IAAI,6BAAsB;AAC1B;;AAEA,IAAI,eAAQ;AACZ;AACA;AACA;;AAEA;AACA,YAAY,EAAE;AACd;AACA,cAAc,EAAE;AAChB,cAAc,EAAE;AAChB,cAAc,EAAE;AAChB;AACA,cAAc,EAAE;AAChB;AACA,cAAc,EAAE;AAChB,cAAc,EAAE;AAChB,cAAc,EAAE;AAChB;;AAEA;AACA,aAAa,EAAE;AACf,eAAe,EAAE;AACjB,gBAAgB,EAAE,OAAO,EAAE;AAC3B,gBAAgB,EAAE;AAClB,iBAAiB,EAAE,OAAO,EAAE;;AAE5B,YAAY,EAAE;AACd,cAAc,EAAE,OAAO,EAAE;AACzB,gBAAgB,EAAE,OAAO,EAAE,OAAO,EAAE;;AAEpC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,mBAAmB;AAC9B,WAAW,cAAc,oDAAoD;AAC7E,WAAW,MAAM;AACjB,WAAW,OAAO;AAClB,aAAa,KAAK;AAClB,YAAY,UAAU;AACtB,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACe,SAAS,aAAM;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,QAAQ,SAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,eAAe,+BAA+B;AAC9C,eAAe,+BAA+B;AAC9C;AACA;AACA;;AAEA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA,+BAA+B,eAAQ;AACvC;;AAEA,MAAM,eAAQ;AACd;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,QAAQ,eAAQ;AAChB,0CAA0C,eAAQ;AAClD;AACA;AACA;;AAEA;AACA,gBAAgB,eAAQ;AACxB;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA,mBAAmB,eAAQ;AAC3B,qBAAqB,eAAQ;;AAE7B;;AAEA;AACA,UAAU,eAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,eAAQ;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,UAAU,eAAQ;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU,eAAQ;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU,eAAQ;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,UAAU,eAAQ;AAClB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,UAAU,eAAQ;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,UAAU,eAAQ;AAClB;AACA;;AAEA;AACA;AACA;;AAEA,0BAA0B,2BAAoB;AAC9C;;AAEA;AACA,UAAU,eAAQ;AAClB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,2BAAoB,aAAa,6BAAsB;AAC5E;AACA;;AAEA;AACA,UAAU,eAAQ;AAClB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,qBAAqB,2BAAoB;AACzC,gBAAgB,6BAAsB;AACtC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;A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AEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;;AAGA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA,UAAU,wBAAwB;AAClC,YAAY,OAAO;AACnB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,8BAA8B,SAAS;;AAEvC;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA,OAAO;;AAEP,oCAAoC,mDAAmD,GAAG,EAAE;AAC5F;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,uFAAuF,EAAE;AACzF;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA,8BAA8B,SAAS;AACvC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB,0BAA0B;;AAE3C;AACA,4BAA4B,8BAA8B;;AAE1D;AACA;;AAEA,qFAAqF,EAAE;AACvF;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,SAAS;;AAET;AACA;AACA,SAAS;AACT;AACA;;AAEA;;AAEA;AACA;AACA;AACA,mCAAmC;;AAEnC;AACA;;AAEA,iCAAiC,SAAS;AAC1C;AACA;;AAEA;AACA,WAAW;AACX;AACA;;AAEA,gBAAgB,KAAK;AACrB;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;;AAGA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,OAAO;AAClC,2BAA2B,OAAO;AAClC,2BAA2B,gBAAgB;AAC3C,2BAA2B,gBAAgB;AAC3C,2BAA2B,QAAQ;AACnC,2BAA2B,OAAO;AAClC,8BAA8B,OAAO;AACrC,2BAA2B,OAAO;AAClC;AACA,2BAA2B,OAAO;AAClC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC,mCAAmC;AACnC;AACA;AACA;AACA;AACA,yBAAyB,yCAAyC;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,6BAA6B,OAAO;AACpC,gDAAgD,mDAAmD,GAAG,EAAE;AACxG;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,OAAO;AACnC,+CAA+C,mDAAmD,GAAG,EAAE;AACvG;AACA;AACA;AACA;AACA;;AAEA,6BAA6B;AAC7B;AACA;AACA,gDAAgD,mDAAmD,GAAG,EAAE;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,oBAAoB,gBAAgB;AACpC;AACA,uCAAuC,kEAAkE,GAAG,EAAE;AAC9G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;;AAEA,qBAAqB,QAAQ;AAC7B,2DAA2D,EAAE;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,0BAA0B,OAAO;AACjC,6CAA6C,mDAAmD,GAAG,EAAE;AACrG;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,OAAO;AACnC,+CAA+C,mDAAmD,GAAG,EAAE;AACvG;AACA;AACA;AACA;AACA;;AAEA,qBAAqB;AACrB,uDAAuD,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB;AACvB,mDAAmD,EAAE;AACrD;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA,SAAS;;AAET,kDAAkD,EAAE;AACpD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA,8CAA8C,EAAE;AAChD;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,iBAAiB;;AAEjB;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,uBAAuB,cAAc;AACrC;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,GAAG;AAC7F;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2CAA2C;AACjE,sBAAsB;AACtB,wCAAwC;;AAExC;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA,kBAAkB,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,WAAW;;AAEX;AACA;;AAEA,kBAAkB,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,YAAY;;AAE1B;AACA;AACA;AACA,SAAS;;AAET;AACA,uBAAuB,YAAY;;AAEnC;AACA,+BAA+B,SAAS;;AAExC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,YAAY,iBAAiB;AAC7B;AACA;;;AAGA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,cAAc,SAAS;AACvB,iCAAiC,QAAQ;;AAEzC;;AAEA,qBAAqB,gBAAgB;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc,cAAc;;AAE5B;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;;AAET;AACA;;AAEA;AACA;;AAEA;AACA,2BAA2B,qBAAqB;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,UAAU;;AAEvC;AACA,+BAA+B,QAAQ;;AAEvC;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;;AAGL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,2BAA2B,KAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,SAAS;;AAET,2BAA2B,QAAQ;;AAEnC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,cAAc,MAAM;AACpB;AACA;AACA;AACA;;AAEA;AACA,cAAc,uBAAuB;AACrC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,uBAAuB;;AAE1C;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,WAAW;AAC3B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe;;AAEf;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,WAAW;;AAEX;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,gCAAgC,SAAS;;AAEzC;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,gBAAgB,SAAS;AACzB;;AAEA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,yCAAyC,KAAK;AAC9C,WAAW;AACX;AACA;AACA;AACA,oBAAoB,KAAK;AACzB;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA,YAAY,iBAAiB;AAC7B;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,YAAY,SAAS;;AAErB;AACA,oBAAoB,SAAS;;AAE7B;AACA;;AAEA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,+CAA+C,EAAE;AACjD,4CAA4C,EAAE,UAAU,EAAE;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gCAAgC,SAAS;AACzC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;;AAEA;;AAEA;;AAEA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,aAAa;AACb;;AAEA;AACA,yBAAyB,SAAS;;AAElC;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,kBAAkB,EAAE;;AAEpB;AACA;;AAEA;AACA,sCAAsC,SAAS;AAC/C;AACA,2BAA2B,SAAS;;AAEpC;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,6BAA6B,eAAe;AAC5C;;AAEA;AACA;AACA;;AAEA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,MAAM;AAChG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,0BAA0B,aAAa;AACvC;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,wBAAwB;AAClC,YAAY,wBAAwB;AACpC;AACA,oDAAoD,EAAE;AACtD;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA,YAAY,EAAE;;AAEd;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,SAAS;AACT,uBAAuB;AACvB;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,GAAG;AAC7F;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;;AAEA;AACA,mBAAmB,KAAK;AACxB;AACA,OAAO;;AAEP;AACA;;AAEA,uBAAuB,OAAO;;AAE9B;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,uBAAuB,KAAK;AAC5B;;AAEA;AACA,YAAY,OAAO;;AAEnB;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;;AAEA;AACA;;AAEA;AACA,YAAY,YAAY;;AAExB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;;AAEA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,kCAAkC,KAAK;;AAEvC;AACA;;AAEA,mBAAmB,UAAU;AAC7B;AACA;AACA;;AAEA,gCAAgC,OAAO;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,cAAc,KAAK;AACnB;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA,iBAAiB,GAAG;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,eAAe;AAC1B;AACA,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,MAAM;AAChG;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA,cAAc,aAAa;;AAE3B;AACA,sBAAsB,SAAS;AAC/B;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,UAAU,OAAO;AACjB;AACA,oCAAoC,mDAAmD,GAAG,EAAE;AAC5F;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,cAAc,EAAE;AAChB;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;;AAEb,gDAAgD,IAAI,OAAO,IAAI;AAC/D;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,MAAM;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,MAAM;AAChG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,iBAAiB,OAAO;AACxB;AACA,oCAAoC,mDAAmD,GAAG,MAAM;AAChG,mDAAmD,OAAO;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,gBAAgB,SAAS;AACzB;AACA;AACA;;AAEA;AACA;AACA,iDAAiD,WAAW;AAC5D;AACA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wBAAwB;AACrC;AACA,oCAAoC,4BAA4B,IAAI,GAAG;AACvE;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,YAAY,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA,oCAAoC,mDAAmD,GAAG,MAAM;AAChG;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO;AACnB;AACA,gCAAgC,mDAAmD,GAAG,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;AACA;;;AAGA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAU,OAAO;AACjB;AACA;AACA,YAAY,KAAK;AACjB;AACA;;AAEA;AACA,sBAAsB,0BAA0B;;AAEhD;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,eAAe,OAAO;;AAEtB;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,wBAAwB,KAAK;AAC7B;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA,8BAA8B,KAAK;AACnC;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;;;AAGA;;;AAGA;AACA;;AAEA;AACA,MAAM,IAAyC;AAC/C,IAAI,mCAAO,aAAa,kBAAkB,EAAE;AAAA,oGAAC;;AAE7C;AACA,GAAG,MAAM,EAUN;AACH,CAAC","file":"static/babe58a755bc6402a5cd.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tvar threw = true;\n \t\ttry {\n \t\t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n \t\t\tthrew = false;\n \t\t} finally {\n \t\t\tif(threw) delete installedModules[moduleId];\n \t\t}\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"WVyv\");\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","export default function requiredArgs(required, args) {\n  if (args.length < required) {\n    throw new TypeError(required + ' argument' + (required > 1 ? 's' : '') + ' required, but only ' + args.length + ' present');\n  }\n}","import requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @param {Date|Number} argument - the value to convert\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\n\nexport default function toDate(argument) {\n  requiredArgs(1, arguments);\n  var argStr = Object.prototype.toString.call(argument); // Clone the date\n\n  if (argument instanceof Date || typeof argument === 'object' && argStr === '[object Date]') {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime());\n  } else if (typeof argument === 'number' || argStr === '[object Number]') {\n    return new Date(argument);\n  } else {\n    if ((typeof argument === 'string' || argStr === '[object String]') && typeof console !== 'undefined') {\n      // eslint-disable-next-line no-console\n      console.warn(\"Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule\"); // eslint-disable-next-line no-console\n\n      console.warn(new Error().stack);\n    }\n\n    return new Date(NaN);\n  }\n}","export default function toInteger(dirtyNumber) {\n  if (dirtyNumber === null || dirtyNumber === true || dirtyNumber === false) {\n    return NaN;\n  }\n\n  var number = Number(dirtyNumber);\n\n  if (isNaN(number)) {\n    return number;\n  }\n\n  return number < 0 ? Math.ceil(number) : Math.floor(number);\n}","import toDate from '../toDate/index.js';\nimport toInteger from '../_lib/toInteger/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name fromUnixTime\n * @category Timestamp Helpers\n * @summary Create a date from a Unix timestamp.\n *\n * @description\n * Create a date from a Unix timestamp.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Number} unixTime - the given Unix timestamp\n * @returns {Date} the date\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Create the date 29 February 2012 11:45:05:\n * var result = fromUnixTime(1330515905)\n * //=> Wed Feb 29 2012 11:45:05\n */\n\nexport default function fromUnixTime(dirtyUnixTime) {\n  requiredArgs(1, arguments);\n  var unixTime = toInteger(dirtyUnixTime);\n  return toDate(unixTime * 1000);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getTime\n * @category Timestamp Helpers\n * @summary Get the milliseconds timestamp of the given date.\n *\n * @description\n * Get the milliseconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05.123:\n * var result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))\n * //=> 1330515905123\n */\n\nexport default function getTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var timestamp = date.getTime();\n  return timestamp;\n}","import getTime from '../getTime/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name getUnixTime\n * @category Timestamp Helpers\n * @summary Get the seconds timestamp of the given date.\n *\n * @description\n * Get the seconds timestamp of the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the given date\n * @returns {Number} the timestamp\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // Get the timestamp of 29 February 2012 11:45:05 CET:\n * var result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))\n * //=> 1330512305\n */\n\nexport default function getUnixTime(dirtyDate) {\n  requiredArgs(1, arguments);\n  return Math.floor(getTime(dirtyDate) / 1000);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfMonth\n * @category Month Helpers\n * @summary Return the start of a month for the given date.\n *\n * @description\n * Return the start of a month for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a month\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a month for 2 September 2014 11:55:00:\n * var result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Mon Sep 01 2014 00:00:00\n */\n\nexport default function startOfMonth(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setDate(1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of calendar months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\n\nexport default function differenceInCalendarMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var yearDiff = dateLeft.getFullYear() - dateRight.getFullYear();\n  var monthDiff = dateLeft.getMonth() - dateRight.getMonth();\n  return yearDiff * 12 + monthDiff;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the first date to compare\n * @param {Date|Number} dateRight - the second date to compare\n * @returns {Number} the result of the comparison\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * var result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * var result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\n\nexport default function compareAsc(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var diff = dateLeft.getTime() - dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1; // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}","import toDate from '../toDate/index.js';\nimport differenceInCalendarMonths from '../differenceInCalendarMonths/index.js';\nimport compareAsc from '../compareAsc/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of full months\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * var result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\n\nexport default function differenceInMonths(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  var sign = compareAsc(dateLeft, dateRight);\n  var difference = Math.abs(differenceInCalendarMonths(dateLeft, dateRight));\n  dateLeft.setMonth(dateLeft.getMonth() - sign * difference); // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n  // If so, result must be decreased by 1 in absolute value\n\n  var isLastMonthNotFull = compareAsc(dateLeft, dateRight) === -sign;\n  var result = sign * (difference - isLastMonthNotFull); // Prevent negative zero\n\n  return result === 0 ? 0 : result;\n}","import BigNumber from 'bignumber.js';\nimport { CoinFiatRates } from '@wallet-types';\n\ntype FiatRates = NonNullable<CoinFiatRates['current']>['rates'];\n\nexport const toFiatCurrency = (\n    amount: string,\n    fiatCurrency: string,\n    networkRates: FiatRates | undefined,\n    decimals = 2,\n) => {\n    // calculate amount in local currency\n\n    const rate = networkRates?.[fiatCurrency];\n    if (!rate) {\n        return null;\n    }\n\n    let formattedAmount = amount;\n    if (typeof amount === 'string') {\n        formattedAmount = amount.replace(',', '.');\n    }\n\n    const localAmount = new BigNumber(formattedAmount).times(rate);\n    if (localAmount.isNaN()) {\n        return null;\n    }\n\n    return decimals === -1 ? localAmount.toFixed() : localAmount.toFixed(decimals);\n};\n\nexport const fromFiatCurrency = (\n    localAmount: string,\n    fiatCurrency: string,\n    networkRates: FiatRates | undefined,\n    decimals: number,\n) => {\n    const rate = networkRates?.[fiatCurrency];\n    if (!rate) {\n        return null;\n    }\n\n    let formattedLocalAmount = localAmount;\n    if (typeof localAmount === 'string') {\n        formattedLocalAmount = localAmount.replace(',', '.');\n    }\n\n    const amount = new BigNumber(formattedLocalAmount).div(rate);\n    const amountStr = amount.isNaN() ? null : amount.toFixed(decimals);\n    return amountStr;\n};\n","export const NETWORK_TYPE = {\n    BITCOIN: 'bitcoin',\n    ETHEREUM: 'ethereum',\n    RIPPLE: 'ripple',\n};\n\nexport const ACCOUNT_TYPE = {\n    NORMAL: 'normal',\n    LEGACY: 'legacy',\n    SEGWIT: 'segwit',\n};\n\nexport const DEFAULT_BTC_ACCOUNT_TYPE = 'segwit';\n","import { ArrayElement } from '@suite/types/utils';\n\nconst networks = [\n    // Bitcoin\n    {\n        name: 'Bitcoin (segwit)',\n        networkType: 'bitcoin',\n        accountType: 'segwit',\n        symbol: 'btc',\n        bip44: \"m/49'/0'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://btc1.trezor.io/tx/',\n            account: 'https://btc1.trezor.io/xpub/',\n        },\n        features: ['rbf', 'sign-verify'],\n    },\n    {\n        name: 'Bitcoin',\n        networkType: 'bitcoin',\n        symbol: 'btc',\n        bip44: \"m/84'/0'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://btc1.trezor.io/tx/',\n            account: 'https://btc1.trezor.io/xpub/',\n        },\n        features: ['rbf', 'sign-verify'],\n    },\n    {\n        name: 'Bitcoin (legacy)',\n        networkType: 'bitcoin',\n        accountType: 'legacy',\n        symbol: 'btc',\n        bip44: \"m/44'/0'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://btc1.trezor.io/tx/',\n            account: 'https://btc1.trezor.io/xpub/',\n        },\n        features: ['rbf', 'sign-verify'],\n    },\n    // Litecoin\n    {\n        name: 'Litecoin',\n        networkType: 'bitcoin',\n        symbol: 'ltc',\n        bip44: \"m/49'/2'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://ltc1.trezor.io/tx/',\n            account: 'https://ltc1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'Litecoin (legacy)',\n        networkType: 'bitcoin',\n        accountType: 'legacy',\n        symbol: 'ltc',\n        bip44: \"m/44'/2'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://ltc1.trezor.io/tx/',\n            account: 'https://ltc1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    // Ethereum\n    {\n        name: 'Ethereum',\n        networkType: 'ethereum',\n        symbol: 'eth',\n        chainId: 1,\n        bip44: \"m/44'/60'/0'/0/i\",\n        hasSignVerify: true,\n        decimals: 18,\n        explorer: {\n            tx: 'https://eth1.trezor.io/tx/',\n            account: 'https://eth1.trezor.io/address/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'Ethereum Classic',\n        networkType: 'ethereum',\n        symbol: 'etc',\n        chainId: 61,\n        bip44: \"m/44'/61'/0'/0/i\",\n        hasSignVerify: true,\n        decimals: 18,\n        explorer: {\n            tx: 'https://etc1.trezor.io/tx/',\n            account: 'https://etc1.trezor.io/address/',\n        },\n        features: ['sign-verify'],\n    },\n    // Ripple\n    {\n        name: 'XRP',\n        networkType: 'ripple',\n        symbol: 'xrp',\n        bip44: \"m/44'/144'/i'/0/0\",\n        decimals: 6,\n        explorer: {\n            tx: 'https://xrpscan.com/tx/',\n            account: 'https://xrpscan.com/account/',\n        },\n    },\n    {\n        name: 'Bitcoin Cash',\n        networkType: 'bitcoin',\n        symbol: 'bch',\n        bip44: \"m/44'/145'/i'\",\n        decimals: 8,\n        explorer: {\n            tx: 'https://bch1.trezor.io/tx/',\n            account: 'https://bch1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'Bitcoin Gold',\n        networkType: 'bitcoin',\n        symbol: 'btg',\n        bip44: \"m/49'/156'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://btg1.trezor.io/tx/',\n            account: 'https://btg1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'Bitcoin Gold (legacy)',\n        networkType: 'bitcoin',\n        accountType: 'legacy',\n        symbol: 'btg',\n        bip44: \"m/44'/156'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://btg1.trezor.io/tx/',\n            account: 'https://btg1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'Dash',\n        networkType: 'bitcoin',\n        symbol: 'dash',\n        bip44: \"m/44'/5'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://dash1.trezor.io/tx/',\n            account: 'https://dash1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'DigiByte',\n        networkType: 'bitcoin',\n        symbol: 'dgb',\n        bip44: \"m/49'/20'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://dgb1.trezor.io/tx/',\n            account: 'https://dgb1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'DigiByte (legacy)',\n        networkType: 'bitcoin',\n        accountType: 'legacy',\n        symbol: 'dgb',\n        bip44: \"m/44'/20'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://dgb1.trezor.io/tx/',\n            account: 'https://dgb1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'Dogecoin',\n        networkType: 'bitcoin',\n        symbol: 'doge',\n        bip44: \"m/44'/3'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://doge1.trezor.io/tx/',\n            account: 'https://doge1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'Namecoin',\n        networkType: 'bitcoin',\n        symbol: 'nmc',\n        bip44: \"m/44'/7'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://nmc1.trezor.io/tx/',\n            account: 'https://nmc1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'Vertcoin',\n        networkType: 'bitcoin',\n        symbol: 'vtc',\n        bip44: \"m/49'/28'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://vtc1.trezor.io/tx/',\n            account: 'https://vtc1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'Vertcoin (legacy)',\n        networkType: 'bitcoin',\n        accountType: 'legacy',\n        symbol: 'vtc',\n        bip44: \"m/44'/28'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://vtc1.trezor.io/tx/',\n            account: 'https://vtc1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'Zcash',\n        networkType: 'bitcoin',\n        symbol: 'zec',\n        bip44: \"m/44'/133'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        explorer: {\n            tx: 'https://zec1.trezor.io/tx/',\n            account: 'https://zec1.trezor.io/xpub/',\n        },\n        features: ['sign-verify'],\n    },\n    // Bitcoin testnet\n    {\n        name: 'Bitcoin Testnet',\n        networkType: 'bitcoin',\n        symbol: 'test',\n        bip44: \"m/84'/1'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        testnet: true,\n        explorer: {\n            tx: 'https://tbtc1.trezor.io/tx/',\n            account: 'https://tbtc1.trezor.io/xpub/',\n        },\n        features: ['rbf', 'sign-verify'],\n    },\n    {\n        name: 'Bitcoin Testnet (segwit)',\n        networkType: 'bitcoin',\n        accountType: 'segwit',\n        symbol: 'test',\n        bip44: \"m/49'/1'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        testnet: true,\n        explorer: {\n            tx: 'https://tbtc1.trezor.io/tx/',\n            account: 'https://tbtc1.trezor.io/xpub/',\n        },\n        features: ['rbf', 'sign-verify'],\n    },\n    {\n        name: 'Bitcoin Testnet (legacy)',\n        networkType: 'bitcoin',\n        accountType: 'legacy',\n        symbol: 'test',\n        bip44: \"m/44'/1'/i'\",\n        hasSignVerify: true,\n        decimals: 8,\n        testnet: true,\n        explorer: {\n            tx: 'https://tbtc1.trezor.io/tx/',\n            account: 'https://tbtc1.trezor.io/xpub/',\n        },\n        features: ['rbf', 'sign-verify'],\n    },\n    {\n        name: 'Ethereum Ropsten',\n        networkType: 'ethereum',\n        symbol: 'trop',\n        bip44: \"m/44'/1'/0'/0/i\",\n        hasSignVerify: true,\n        chainId: 3,\n        decimals: 18,\n        testnet: true,\n        explorer: {\n            tx: 'https://ropsten1.trezor.io/tx/',\n            account: 'https://ropsten1.trezor.io/address/',\n        },\n        features: ['sign-verify'],\n    },\n    {\n        name: 'XRP Testnet',\n        networkType: 'ripple',\n        symbol: 'txrp',\n        bip44: \"m/44'/144'/i'/0/0\",\n        decimals: 6,\n        testnet: true,\n        explorer: {\n            tx: 'https://test.bithomp.com/explorer/',\n            account: 'https://test.bithomp.com/explorer/',\n        },\n    },\n] as const;\n\ntype Network = {\n    accountType?: 'normal' | 'legacy' | 'segwit';\n    testnet?: boolean;\n    isHidden?: boolean;\n    chainId?: number;\n    hasSignVerify?: boolean;\n    features?: string[];\n} & ArrayElement<typeof networks>;\n\nexport default [...networks] as Network[];\n","import NETWORKS from './networks';\n\nexport { NETWORKS };\n","import { State as TransactionsState } from '@wallet-reducers/transactionReducer';\nimport { AccountInfo, AccountAddress, PrecomposedTransaction } from '@onekeyhq/connect';\nimport BigNumber from 'bignumber.js';\nimport { ACCOUNT_TYPE } from '@wallet-constants/account';\nimport { Account, Network, CoinFiatRates, WalletParams, Discovery } from '@wallet-types';\nimport { AppState } from '@suite-types';\nimport { NETWORKS } from '@wallet-config';\nimport { toFiatCurrency } from './fiatConverterUtils';\n\nexport const parseBIP44Path = (path: string) => {\n    const regEx = /m\\/(\\d+'?)\\/(\\d+'?)\\/(\\d+'?)\\/([0,1])\\/(\\d+)/;\n    const tokens = path.match(regEx);\n    if (!tokens || tokens.length !== 6) {\n        return null;\n    }\n\n    return {\n        purpose: tokens[1],\n        coinType: tokens[2],\n        account: tokens[3],\n        change: tokens[4],\n        addrIndex: tokens[5],\n    };\n};\n\nexport const getFiatValue = (amount: string, rate: string, fixedTo = 2) => {\n    const fiatValueBigNumber = new BigNumber(amount).multipliedBy(new BigNumber(rate));\n    const fiatValue = fiatValueBigNumber.isNaN() ? '' : fiatValueBigNumber.toFixed(fixedTo);\n\n    return fiatValue;\n};\n\nexport const getTitleForNetwork = (symbol: Account['symbol']) => {\n    switch (symbol.toLowerCase()) {\n        case 'btc':\n            return 'TR_NETWORK_BITCOIN';\n        case 'test':\n            return 'TR_NETWORK_BITCOIN_TESTNET';\n        case 'bch':\n            return 'TR_NETWORK_BITCOIN_CASH';\n        case 'btg':\n            return 'TR_NETWORK_BITCOIN_GOLD';\n        case 'dash':\n            return 'TR_NETWORK_DASH';\n        case 'dgb':\n            return 'TR_NETWORK_DIGIBYTE';\n        case 'doge':\n            return 'TR_NETWORK_DOGECOIN';\n        case 'ltc':\n            return 'TR_NETWORK_LITECOIN';\n        case 'nmc':\n            return 'TR_NETWORK_NAMECOIN';\n        case 'vtc':\n            return 'TR_NETWORK_VERTCOIN';\n        case 'zec':\n            return 'TR_NETWORK_ZCASH';\n        case 'eth':\n            return 'TR_NETWORK_ETHEREUM';\n        case 'trop':\n            return 'TR_NETWORK_ETHEREUM_TESTNET';\n        case 'etc':\n            return 'TR_NETWORK_ETHEREUM_CLASSIC';\n        case 'xem':\n            return 'TR_NETWORK_NEM';\n        case 'xlm':\n            return 'TR_NETWORK_STELLAR';\n        case 'ada':\n            return 'TR_NETWORK_CARDANO';\n        case 'xtz':\n            return 'TR_NETWORK_TEZOS';\n        case 'xrp':\n            return 'TR_NETWORK_XRP';\n        case 'txrp':\n            return 'TR_NETWORK_XRP_TESTNET';\n        default:\n            return 'TR_NETWORK_UNKNOWN';\n    }\n};\n\nexport const getAccountTypeIntl = (accountType: Network['accountType']) => {\n    switch (accountType) {\n        case ACCOUNT_TYPE.SEGWIT:\n            return 'TR_ACCOUNT_TYPE_SEGWIT';\n        case ACCOUNT_TYPE.LEGACY:\n            return 'TR_ACCOUNT_TYPE_LEGACY';\n        default:\n            return 'TR_ACCOUNT_TYPE_NORMAL';\n    }\n};\n\nexport const getBip43Shortcut = (path: string) => {\n    if (typeof path !== 'string') return 'unknown';\n    // https://github.com/bitcoin/bips/blob/master/bip-0043.mediawiki\n    const bip43 = path.split('/')[1];\n    switch (bip43) {\n        case `84'`:\n            return 'bech32';\n        case `49'`:\n            return 'p2sh';\n        case `44'`:\n            return 'p2phk';\n        default:\n            return 'unknown';\n    }\n};\n\nexport const getBip43Intl = (path: string) => {\n    const bip43 = getBip43Shortcut(path);\n    if (bip43 === 'bech32') return 'TR_ACCOUNT_TYPE_BECH32';\n    if (bip43 === 'p2sh') return 'TR_ACCOUNT_TYPE_P2SH';\n    return 'TR_ACCOUNT_TYPE_P2PKH';\n};\n\nexport const stripNetworkAmount = (amount: string, decimals: number) => {\n    return new BigNumber(amount).toFixed(decimals, 1);\n};\n\nexport const formatAmount = (amount: string, decimals: number) => {\n    try {\n        const bAmount = new BigNumber(amount);\n        if (bAmount.isNaN()) {\n            throw new Error('Amount is not a number');\n        }\n        return bAmount.div(10 ** decimals).toString(10);\n    } catch (error) {\n        return '-1';\n    }\n};\n\nexport const amountToSatoshi = (amount: string, decimals: number) => {\n    try {\n        const bAmount = new BigNumber(amount);\n        if (bAmount.isNaN()) {\n            throw new Error('Amount is not a number');\n        }\n        return bAmount.times(10 ** decimals).toString(10);\n    } catch (error) {\n        // TODO: return null, so we can decide how to handle missing value in caller component\n        return '-1';\n    }\n};\n\nexport const networkAmountToSatoshi = (amount: string | null, symbol: Account['symbol']) => {\n    const network = NETWORKS.find(n => n.symbol === symbol);\n    if (!amount) return '0';\n    if (!network) return amount;\n    return amountToSatoshi(amount, network.decimals);\n};\n\nexport const formatNetworkAmount = (\n    amount: string,\n    symbol: Account['symbol'],\n    withSymbol = false,\n) => {\n    const network = NETWORKS.find(n => n.symbol === symbol);\n    if (!network) return amount;\n    if (withSymbol) return `${formatAmount(amount, network.decimals)} ${symbol.toUpperCase()}`;\n    return formatAmount(amount, network.decimals);\n};\n\nexport const sortByCoin = (accounts: Account[]) => {\n    return accounts.sort((a, b) => {\n        const aIndex = NETWORKS.findIndex(n => {\n            const accountType = n.accountType || ACCOUNT_TYPE.NORMAL;\n            return accountType === a.accountType && n.symbol === a.symbol;\n        });\n        const bIndex = NETWORKS.findIndex(n => {\n            const accountType = n.accountType || ACCOUNT_TYPE.NORMAL;\n            return accountType === b.accountType && n.symbol === b.symbol;\n        });\n        if (aIndex === bIndex) return a.index - b.index;\n        return aIndex - bIndex;\n    });\n};\n\nexport const findAccountsByDescriptor = (descriptor: string, accounts: Account[]) =>\n    accounts.filter(a => a.descriptor === descriptor);\n\nexport const findAccountsByAddress = (address: string, accounts: Account[]) =>\n    accounts.filter(a => {\n        if (a.addresses) {\n            return (\n                a.addresses.used.find(u => u.address === address) ||\n                a.addresses.unused.find(u => u.address === address) ||\n                a.addresses.change.find(u => u.address === address) ||\n                a.descriptor === address\n            );\n        }\n        return a.descriptor === address;\n    });\n\nexport const findAccountDevice = (account: Account, devices: AppState['devices']) =>\n    devices.find(d => d.state === account.deviceState);\n\nexport const getAllAccounts = (deviceState: string | typeof undefined, accounts: Account[]) => {\n    if (!deviceState) return [];\n    return accounts.filter(a => a.deviceState === deviceState && a.visible);\n};\n\nexport const getSelectedAccount = (\n    deviceState: string | typeof undefined,\n    accounts: Account[],\n    routerParams: WalletParams | undefined,\n) => {\n    if (!deviceState || !routerParams) return null;\n\n    // TODO: imported accounts\n    // imported account index has 'i' prefix\n    // const isImported = /^i\\d+$/i.test(routerParams.accountIndex);\n    // const index: number = isImported\n    //     ? parseInt(routerParams.accountIndex.substr(1), 10)\n    //     : parseInt(routerParams.accountIndex, 10);\n\n    return (\n        accounts.find(\n            a =>\n                a.index === routerParams.accountIndex &&\n                a.symbol === routerParams.symbol &&\n                a.accountType === routerParams.accountType &&\n                a.deviceState === deviceState,\n        ) || null\n    );\n};\n\nexport const getNetwork = (symbol: string) => {\n    return NETWORKS.find(c => c.symbol === symbol) || null;\n};\n\n/**\n * Returns a string used as an index to separate txs for given account inside a transactions reducer\n *\n * @param {string} descriptor\n * @param {string} symbol\n * @param {string} deviceState\n * @returns {string}\n */\nexport const getAccountKey = (descriptor: string, symbol: string, deviceState: string) => {\n    return `${descriptor}-${symbol}-${deviceState}`;\n};\n\nexport const getAccountTransactions = (\n    transactions: TransactionsState['transactions'],\n    account: Account,\n) => {\n    const accountHash = getAccountKey(account.descriptor, account.symbol, account.deviceState);\n    return transactions[accountHash] || [];\n};\n\nexport const countUniqueCoins = (accounts: Account[]) => {\n    const coins = new Set();\n    accounts.forEach(acc => coins.add(acc.symbol));\n    return coins.size;\n};\n\n/**\n * Clear invalid tokens and formats amounts\n *\n * @param {Account['tokens']} tokens\n * @returns {Account['tokens']}\n */\nexport const enhanceTokens = (tokens: Account['tokens']) => {\n    if (!tokens) return [];\n    return tokens\n        .filter(t => t.symbol && t.balance && t.name)\n        .map(t => ({\n            ...t,\n            symbol: t.symbol!.toLowerCase(),\n            balance: formatAmount(t.balance!, t.decimals),\n        }));\n};\n\nexport const getAccountFiatBalance = (\n    account: Account,\n    localCurrency: string,\n    fiat: CoinFiatRates[],\n) => {\n    const fiatRates = fiat.find(f => f.symbol === account.symbol);\n    if (fiatRates) {\n        const fiatBalance = toFiatCurrency(\n            account.formattedBalance,\n            localCurrency,\n            fiatRates.current?.rates,\n        );\n        return fiatBalance;\n    }\n};\n\nexport const getTotalFiatBalance = (\n    deviceAccounts: Account[],\n    localCurrency: string,\n    fiat: CoinFiatRates[],\n) => {\n    let instanceBalance = new BigNumber(0);\n    deviceAccounts.forEach(a => {\n        const accountFiatBalance = getAccountFiatBalance(a, localCurrency, fiat) ?? '0';\n        instanceBalance = instanceBalance.plus(accountFiatBalance);\n    });\n    return instanceBalance;\n};\n\nexport const isTestnet = (symbol: Account['symbol']) => {\n    const net = NETWORKS.find(n => n.symbol === symbol);\n    return net?.testnet ?? false;\n};\n\nexport const isAccountOutdated = (account: Account, freshInfo: AccountInfo) => {\n    // changed transaction count (total + unconfirmed)\n    const changedTxCount =\n        freshInfo.history.total + (freshInfo.history.unconfirmed || 0) >\n        account.history.total + (account.history.unconfirmed || 0);\n\n    // different sequence or balance\n    const changedRipple =\n        account.networkType === 'ripple' &&\n        (freshInfo.misc!.sequence !== account.misc.sequence ||\n            freshInfo.balance !== account.balance);\n\n    const changedEthereum =\n        account.networkType === 'ethereum' && freshInfo.misc!.nonce !== account.misc.nonce;\n\n    return changedTxCount || changedRipple || changedEthereum;\n};\n\n// Used in accountActions and failed accounts\nexport const getAccountSpecific = (\n    accountInfo: Partial<AccountInfo>,\n    networkType: Network['networkType'],\n) => {\n    const { misc } = accountInfo;\n    if (networkType === 'ripple') {\n        return {\n            networkType,\n            misc: {\n                sequence: misc && misc.sequence ? misc.sequence : 0,\n                reserve: misc && misc.reserve ? misc.reserve : '0',\n            },\n            marker: accountInfo.marker,\n            page: undefined,\n        };\n    }\n\n    if (networkType === 'ethereum') {\n        return {\n            networkType,\n            misc: {\n                nonce: misc && misc.nonce ? misc.nonce : '0',\n            },\n            marker: undefined,\n            page: accountInfo.page,\n        };\n    }\n\n    return {\n        networkType,\n        misc: undefined,\n        marker: undefined,\n        page: accountInfo.page,\n    };\n};\n\n// Used in wallet/Menu and Dashboard\nexport const getFailedAccounts = (discovery: Discovery): Account[] => {\n    return discovery.failed.map(f => {\n        const descriptor = `failed:${f.index}:${f.symbol}:${f.accountType}`;\n        return {\n            failed: true,\n            deviceState: discovery.deviceState,\n            index: f.index,\n            path: descriptor,\n            descriptor,\n            key: descriptor,\n            accountType: f.accountType,\n            symbol: f.symbol,\n            empty: false,\n            visible: true,\n            balance: '0',\n            availableBalance: '0',\n            formattedBalance: '0',\n            tokens: [],\n            addresses: undefined,\n            utxo: undefined,\n            history: {\n                total: 0,\n            },\n            metadata: {\n                key: descriptor,\n                fileName: '',\n                aesKey: '',\n                outputLabels: {},\n                addressLabels: {},\n            },\n            ...getAccountSpecific({}, getNetwork(f.symbol)!.networkType),\n        };\n    });\n};\n\nexport const getAccountIdentifier = (account: Account) => {\n    return {\n        descriptor: account.descriptor,\n        symbol: account.symbol,\n        deviceState: account.deviceState,\n    };\n};\n\nexport const accountSearchFn = (\n    account: Account,\n    rawSearchString?: string,\n    coinFilter?: Account['symbol'],\n) => {\n    // if coin filter is active and account symbol doesn't match return false and don't continue the search\n    const coinFilterMatch = coinFilter ? account.symbol === coinFilter : true;\n    if (!coinFilterMatch) return false;\n\n    const searchString = rawSearchString?.trim().toLowerCase();\n    if (!searchString) return true; // no search string\n\n    const network = getNetwork(account.symbol);\n\n    // helper func for searching in account's addresses\n    const matchAddressFn = (u: NonNullable<Account['addresses']>['used'][number]) =>\n        u.address.toLowerCase() === searchString;\n\n    const symbolMatch = account.symbol.startsWith(searchString);\n    const networkNameMatch = network?.name.toLowerCase().includes(searchString);\n    const accountTypeMatch = account.accountType.startsWith(searchString);\n    const descriptorMatch = account.descriptor.toLowerCase() === searchString;\n    const addressMatch = account.addresses\n        ? account.addresses.used.find(matchAddressFn) ||\n          account.addresses.unused.find(matchAddressFn) ||\n          account.addresses.change.find(matchAddressFn)\n        : false;\n    // find XRP accounts when users types in 'ripple'\n    const matchXRPAlternativeName =\n        network?.networkType === 'ripple' && 'ripple'.includes(searchString);\n\n    const metadataMatch = account.metadata.accountLabel?.toLowerCase().includes(searchString);\n\n    return (\n        symbolMatch ||\n        networkNameMatch ||\n        accountTypeMatch ||\n        descriptorMatch ||\n        addressMatch ||\n        matchXRPAlternativeName ||\n        metadataMatch\n    );\n};\n\nexport const getUtxoFromSignedTransaction = (\n    account: Account,\n    tx: PrecomposedTransaction,\n    txid: string,\n    prevTxid?: string,\n) => {\n    if (tx.type !== 'final') return [];\n\n    // find utxo to replace\n    const replaceUtxo = (prevTxid && account.utxo?.filter(u => u.txid === prevTxid)) || [];\n\n    // remove utxo used by signed transaction or replaced by new tx (rbf)\n    const utxo =\n        account.utxo?.filter(\n            u =>\n                !tx.transaction.inputs.find(\n                    i => i.prev_hash === u.txid && i.prev_index === u.vout,\n                ) && u.txid !== prevTxid,\n        ) || [];\n\n    // join all account addresses\n    const addresses = account.addresses\n        ? account.addresses.unused.concat(account.addresses.used).concat(account.addresses.change)\n        : [];\n\n    // append utxo created by this transaction\n    tx.transaction.outputs.forEach((output, vout) => {\n        let addr: AccountAddress | undefined;\n        if (output.address_n) {\n            // find change address\n            const serialized = output.address_n.slice(3, 5).join('/');\n            addr = account.addresses?.change.find(a => a.path.endsWith(serialized));\n        }\n        if (output.address) {\n            // find self address\n            addr = addresses.find(a => a.address === output.address);\n        }\n\n        // check if utxo should be added\n        // may be spent already in case of rbf\n        const utxoSpent =\n            prevTxid && !replaceUtxo.find(u => u.address === addr?.address && u.vout === vout);\n\n        if (addr && !utxoSpent) {\n            utxo.unshift({\n                vout,\n                path: addr.path,\n                address: addr.address,\n                amount: output.amount,\n                blockHeight: 0,\n                confirmations: 0,\n                txid,\n            });\n        }\n    });\n\n    return utxo;\n};\n\n// update account before BLOCKCHAIN.NOTIFICATION or BLOCKCHAIN.BLOCK events\n// solves race condition between pushing transaction and received notification\nexport const getPendingAccount = (account: Account, tx: PrecomposedTransaction, txid: string) => {\n    if (tx.type !== 'final') return;\n\n    // calculate availableBalance\n    let availableBalanceBig = new BigNumber(account.availableBalance).minus(tx.totalSpent);\n    // get utxo\n    const utxo = getUtxoFromSignedTransaction(account, tx, txid);\n\n    // join all account addresses\n    const addresses = account.addresses\n        ? account.addresses.unused.concat(account.addresses.used).concat(account.addresses.change)\n        : [];\n\n    tx.transaction.outputs.forEach(output => {\n        if (output.address) {\n            // find self address\n            if (addresses.find(a => a.address === output.address)) {\n                // append self outputs to balance\n                availableBalanceBig = availableBalanceBig.plus(output.amount);\n            }\n        }\n    });\n\n    const availableBalance = availableBalanceBig.toString();\n\n    return {\n        ...account,\n        availableBalance,\n        formattedBalance: formatNetworkAmount(availableBalance, account.symbol),\n        utxo,\n    };\n};\n\n// update account before BLOCKCHAIN.NOTIFICATION or BLOCKCHAIN.BLOCK events\n// solves race condition between pushing transaction and received notification\nexport const getRbfPendingAccount = (\n    account: Account,\n    tx: PrecomposedTransaction,\n    prevTxid: string,\n    newTxid: string,\n    feeDiff: number,\n) => {\n    if (tx.type !== 'final') return;\n    // calculate availableBalance\n    const availableBalance = new BigNumber(account.availableBalance).minus(feeDiff).toString();\n    // get utxo\n    const utxo = getUtxoFromSignedTransaction(account, tx, newTxid, prevTxid);\n\n    return {\n        ...account,\n        availableBalance,\n        formattedBalance: formatNetworkAmount(availableBalance, account.symbol),\n        utxo,\n    };\n};\n","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of milliseconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * var result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\n\nexport default function differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var dateLeft = toDate(dirtyDateLeft);\n  var dateRight = toDate(dirtyDateRight);\n  return dateLeft.getTime() - dateRight.getTime();\n}","import differenceInMilliseconds from '../differenceInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} dateLeft - the later date\n * @param {Date|Number} dateRight - the earlier date\n * @returns {Number} the number of seconds\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * var result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\n\nexport default function differenceInSeconds(dirtyDateLeft, dirtyDateRight) {\n  requiredArgs(2, arguments);\n  var diff = differenceInMilliseconds(dirtyDateLeft, dirtyDateRight) / 1000;\n  return diff > 0 ? Math.floor(diff) : Math.ceil(diff);\n}","var formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: 'less than a second',\n    other: 'less than {{count}} seconds'\n  },\n  xSeconds: {\n    one: '1 second',\n    other: '{{count}} seconds'\n  },\n  halfAMinute: 'half a minute',\n  lessThanXMinutes: {\n    one: 'less than a minute',\n    other: 'less than {{count}} minutes'\n  },\n  xMinutes: {\n    one: '1 minute',\n    other: '{{count}} minutes'\n  },\n  aboutXHours: {\n    one: 'about 1 hour',\n    other: 'about {{count}} hours'\n  },\n  xHours: {\n    one: '1 hour',\n    other: '{{count}} hours'\n  },\n  xDays: {\n    one: '1 day',\n    other: '{{count}} days'\n  },\n  aboutXWeeks: {\n    one: 'about 1 week',\n    other: 'about {{count}} weeks'\n  },\n  xWeeks: {\n    one: '1 week',\n    other: '{{count}} weeks'\n  },\n  aboutXMonths: {\n    one: 'about 1 month',\n    other: 'about {{count}} months'\n  },\n  xMonths: {\n    one: '1 month',\n    other: '{{count}} months'\n  },\n  aboutXYears: {\n    one: 'about 1 year',\n    other: 'about {{count}} years'\n  },\n  xYears: {\n    one: '1 year',\n    other: '{{count}} years'\n  },\n  overXYears: {\n    one: 'over 1 year',\n    other: 'over {{count}} years'\n  },\n  almostXYears: {\n    one: 'almost 1 year',\n    other: 'almost {{count}} years'\n  }\n};\nexport default function formatDistance(token, count, options) {\n  options = options || {};\n  var result;\n\n  if (typeof formatDistanceLocale[token] === 'string') {\n    result = formatDistanceLocale[token];\n  } else if (count === 1) {\n    result = formatDistanceLocale[token].one;\n  } else {\n    result = formatDistanceLocale[token].other.replace('{{count}}', count);\n  }\n\n  if (options.addSuffix) {\n    if (options.comparison > 0) {\n      return 'in ' + result;\n    } else {\n      return result + ' ago';\n    }\n  }\n\n  return result;\n}","export default function buildFormatLongFn(args) {\n  return function (dirtyOptions) {\n    var options = dirtyOptions || {};\n    var width = options.width ? String(options.width) : args.defaultWidth;\n    var format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}","import buildFormatLongFn from '../../../_lib/buildFormatLongFn/index.js';\nvar dateFormats = {\n  full: 'EEEE, MMMM do, y',\n  long: 'MMMM do, y',\n  medium: 'MMM d, y',\n  short: 'MM/dd/yyyy'\n};\nvar timeFormats = {\n  full: 'h:mm:ss a zzzz',\n  long: 'h:mm:ss a z',\n  medium: 'h:mm:ss a',\n  short: 'h:mm a'\n};\nvar dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: '{{date}}, {{time}}',\n  short: '{{date}}, {{time}}'\n};\nvar formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: 'full'\n  }),\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: 'full'\n  }),\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: 'full'\n  })\n};\nexport default formatLong;","var formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: 'P'\n};\nexport default function formatRelative(token, _date, _baseDate, _options) {\n  return formatRelativeLocale[token];\n}","export default function buildLocalizeFn(args) {\n  return function (dirtyIndex, dirtyOptions) {\n    var options = dirtyOptions || {};\n    var context = options.context ? String(options.context) : 'standalone';\n    var valuesArray;\n\n    if (context === 'formatting' && args.formattingValues) {\n      var defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      var width = options.width ? String(options.width) : defaultWidth;\n      valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      var _defaultWidth = args.defaultWidth;\n\n      var _width = options.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[_width] || args.values[_defaultWidth];\n    }\n\n    var index = args.argumentCallback ? args.argumentCallback(dirtyIndex) : dirtyIndex;\n    return valuesArray[index];\n  };\n}","import buildLocalizeFn from '../../../_lib/buildLocalizeFn/index.js';\nvar eraValues = {\n  narrow: ['B', 'A'],\n  abbreviated: ['BC', 'AD'],\n  wide: ['Before Christ', 'Anno Domini']\n};\nvar quarterValues = {\n  narrow: ['1', '2', '3', '4'],\n  abbreviated: ['Q1', 'Q2', 'Q3', 'Q4'],\n  wide: ['1st quarter', '2nd quarter', '3rd quarter', '4th quarter'] // Note: in English, the names of days of the week and months are capitalized.\n  // If you are making a new locale based on this one, check if the same is true for the language you're working on.\n  // Generally, formatted dates should look like they are in the middle of a sentence,\n  // e.g. in Spanish language the weekdays and months should be in the lowercase.\n\n};\nvar monthValues = {\n  narrow: ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'],\n  abbreviated: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n  wide: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n};\nvar dayValues = {\n  narrow: ['S', 'M', 'T', 'W', 'T', 'F', 'S'],\n  short: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n  abbreviated: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n  wide: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n};\nvar dayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'morning',\n    afternoon: 'afternoon',\n    evening: 'evening',\n    night: 'night'\n  }\n};\nvar formattingDayPeriodValues = {\n  narrow: {\n    am: 'a',\n    pm: 'p',\n    midnight: 'mi',\n    noon: 'n',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  abbreviated: {\n    am: 'AM',\n    pm: 'PM',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  },\n  wide: {\n    am: 'a.m.',\n    pm: 'p.m.',\n    midnight: 'midnight',\n    noon: 'noon',\n    morning: 'in the morning',\n    afternoon: 'in the afternoon',\n    evening: 'in the evening',\n    night: 'at night'\n  }\n};\n\nfunction ordinalNumber(dirtyNumber, _dirtyOptions) {\n  var number = Number(dirtyNumber); // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`:\n  //\n  //   var options = dirtyOptions || {}\n  //   var unit = String(options.unit)\n  //\n  // where `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'\n\n  var rem100 = number % 100;\n\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + 'st';\n\n      case 2:\n        return number + 'nd';\n\n      case 3:\n        return number + 'rd';\n    }\n  }\n\n  return number + 'th';\n}\n\nvar localize = {\n  ordinalNumber: ordinalNumber,\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: 'wide'\n  }),\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: 'wide',\n    argumentCallback: function (quarter) {\n      return Number(quarter) - 1;\n    }\n  }),\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: 'wide'\n  }),\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: 'wide'\n  }),\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: 'wide',\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: 'wide'\n  })\n};\nexport default localize;","export default function buildMatchPatternFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var matchResult = string.match(args.matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parseResult = string.match(args.parsePattern);\n\n    if (!parseResult) {\n      return null;\n    }\n\n    var value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}","export default function buildMatchFn(args) {\n  return function (dirtyString, dirtyOptions) {\n    var string = String(dirtyString);\n    var options = dirtyOptions || {};\n    var width = options.width;\n    var matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];\n    var matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n\n    var matchedString = matchResult[0];\n    var parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];\n    var value;\n\n    if (Object.prototype.toString.call(parsePatterns) === '[object Array]') {\n      value = findIndex(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    } else {\n      value = findKey(parsePatterns, function (pattern) {\n        return pattern.test(matchedString);\n      });\n    }\n\n    value = args.valueCallback ? args.valueCallback(value) : value;\n    value = options.valueCallback ? options.valueCallback(value) : value;\n    return {\n      value: value,\n      rest: string.slice(matchedString.length)\n    };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (var key in object) {\n    if (object.hasOwnProperty(key) && predicate(object[key])) {\n      return key;\n    }\n  }\n}\n\nfunction findIndex(array, predicate) {\n  for (var key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n}","import buildMatchPatternFn from '../../../_lib/buildMatchPatternFn/index.js';\nimport buildMatchFn from '../../../_lib/buildMatchFn/index.js';\nvar matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nvar parseOrdinalNumberPattern = /\\d+/i;\nvar matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i\n};\nvar parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i]\n};\nvar matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i\n};\nvar parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i]\n};\nvar matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i\n};\nvar parseMonthPatterns = {\n  narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i],\n  any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i]\n};\nvar matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i\n};\nvar parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i]\n};\nvar matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i\n};\nvar parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i\n  }\n};\nvar match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: function (value) {\n      return parseInt(value, 10);\n    }\n  }),\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: 'any'\n  }),\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: 'any',\n    valueCallback: function (index) {\n      return index + 1;\n    }\n  }),\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: 'any'\n  }),\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: 'wide',\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: 'any'\n  }),\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: 'any',\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: 'any'\n  })\n};\nexport default match;","import formatDistance from './_lib/formatDistance/index.js';\nimport formatLong from './_lib/formatLong/index.js';\nimport formatRelative from './_lib/formatRelative/index.js';\nimport localize from './_lib/localize/index.js';\nimport match from './_lib/match/index.js';\n/**\n * @type {Locale}\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp]{@link https://github.com/kossnocorp}\n * @author Lesha Koss [@leshakoss]{@link https://github.com/leshakoss}\n */\n\nvar locale = {\n  code: 'en-US',\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0\n    /* Sunday */\n    ,\n    firstWeekContainsDate: 1\n  }\n};\nexport default locale;","export default function assign(target, dirtyObject) {\n  if (target == null) {\n    throw new TypeError('assign requires that input parameter not be null or undefined');\n  }\n\n  dirtyObject = dirtyObject || {};\n\n  for (var property in dirtyObject) {\n    if (dirtyObject.hasOwnProperty(property)) {\n      target[property] = dirtyObject[property];\n    }\n  }\n\n  return target;\n}","import assign from '../assign/index.js';\nexport default function cloneObject(dirtyObject) {\n  return assign({}, dirtyObject);\n}","var MILLISECONDS_IN_MINUTE = 60000;\n\nfunction getDateMillisecondsPart(date) {\n  return date.getTime() % MILLISECONDS_IN_MINUTE;\n}\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\n\n\nexport default function getTimezoneOffsetInMilliseconds(dirtyDate) {\n  var date = new Date(dirtyDate.getTime());\n  var baseTimezoneOffset = Math.ceil(date.getTimezoneOffset());\n  date.setSeconds(0, 0);\n  var hasNegativeUTCOffset = baseTimezoneOffset > 0;\n  var millisecondsPartOfTimezoneOffset = hasNegativeUTCOffset ? (MILLISECONDS_IN_MINUTE + getDateMillisecondsPart(date)) % MILLISECONDS_IN_MINUTE : getDateMillisecondsPart(date);\n  return baseTimezoneOffset * MILLISECONDS_IN_MINUTE + millisecondsPartOfTimezoneOffset;\n}","import compareAsc from '../compareAsc/index.js';\nimport differenceInMonths from '../differenceInMonths/index.js';\nimport differenceInSeconds from '../differenceInSeconds/index.js';\nimport defaultLocale from '../locale/en-US/index.js';\nimport toDate from '../toDate/index.js';\nimport cloneObject from '../_lib/cloneObject/index.js';\nimport getTimezoneOffsetInMilliseconds from '../_lib/getTimezoneOffsetInMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\nvar MINUTES_IN_DAY = 1440;\nvar MINUTES_IN_ALMOST_TWO_DAYS = 2520;\nvar MINUTES_IN_MONTH = 43200;\nvar MINUTES_IN_TWO_MONTHS = 86400;\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `distanceInWords ` to `formatDistance`\n *   to make its name consistent with `format` and `formatRelative`.\n *\n * - The order of arguments is swapped to make the function\n *   consistent with `differenceIn...` functions.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   distanceInWords(\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *\n *   // v2.0.0 onward\n *\n *   formatDistance(\n *     new Date(1986, 3, 4, 11, 32, 0),\n *     new Date(1986, 3, 4, 10, 32, 0),\n *     { addSuffix: true }\n *   ) //=> 'in about 1 hour'\n *   ```\n *\n * @param {Date|Number} date - the date\n * @param {Date|Number} baseDate - the date to compare with\n * @param {Object} [options] - an object with options.\n * @param {Boolean} [options.includeSeconds=false] - distances less than a minute are more detailed\n * @param {Boolean} [options.addSuffix=false] - result indicates if the second date is earlier or later than the first\n * @param {Locale} [options.locale=defaultLocale] - the locale object. See [Locale]{@link https://date-fns.org/docs/Locale}\n * @returns {String} the distance in words\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `date` must not be Invalid Date\n * @throws {RangeError} `baseDate` must not be Invalid Date\n * @throws {RangeError} `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * var result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * var result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * var result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * var result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport default function formatDistance(dirtyDate, dirtyBaseDate, dirtyOptions) {\n  requiredArgs(2, arguments);\n  var options = dirtyOptions || {};\n  var locale = options.locale || defaultLocale;\n\n  if (!locale.formatDistance) {\n    throw new RangeError('locale must contain formatDistance property');\n  }\n\n  var comparison = compareAsc(dirtyDate, dirtyBaseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError('Invalid time value');\n  }\n\n  var localizeOptions = cloneObject(options);\n  localizeOptions.addSuffix = Boolean(options.addSuffix);\n  localizeOptions.comparison = comparison;\n  var dateLeft;\n  var dateRight;\n\n  if (comparison > 0) {\n    dateLeft = toDate(dirtyBaseDate);\n    dateRight = toDate(dirtyDate);\n  } else {\n    dateLeft = toDate(dirtyDate);\n    dateRight = toDate(dirtyBaseDate);\n  }\n\n  var seconds = differenceInSeconds(dateRight, dateLeft);\n  var offsetInSeconds = (getTimezoneOffsetInMilliseconds(dateRight) - getTimezoneOffsetInMilliseconds(dateLeft)) / 1000;\n  var minutes = Math.round((seconds - offsetInSeconds) / 60);\n  var months; // 0 up to 2 mins\n\n  if (minutes < 2) {\n    if (options.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance('lessThanXSeconds', 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance('lessThanXSeconds', 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance('lessThanXSeconds', 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance('halfAMinute', null, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance('lessThanXMinutes', 1, localizeOptions);\n      } else {\n        return locale.formatDistance('xMinutes', minutes, localizeOptions);\n      }\n    } // 2 mins up to 0.75 hrs\n\n  } else if (minutes < 45) {\n    return locale.formatDistance('xMinutes', minutes, localizeOptions); // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance('aboutXHours', 1, localizeOptions); // 1.5 hrs up to 24 hrs\n  } else if (minutes < MINUTES_IN_DAY) {\n    var hours = Math.round(minutes / 60);\n    return locale.formatDistance('aboutXHours', hours, localizeOptions); // 1 day up to 1.75 days\n  } else if (minutes < MINUTES_IN_ALMOST_TWO_DAYS) {\n    return locale.formatDistance('xDays', 1, localizeOptions); // 1.75 days up to 30 days\n  } else if (minutes < MINUTES_IN_MONTH) {\n    var days = Math.round(minutes / MINUTES_IN_DAY);\n    return locale.formatDistance('xDays', days, localizeOptions); // 1 month up to 2 months\n  } else if (minutes < MINUTES_IN_TWO_MONTHS) {\n    months = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('aboutXMonths', months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft); // 2 months up to 12 months\n\n  if (months < 12) {\n    var nearestMonth = Math.round(minutes / MINUTES_IN_MONTH);\n    return locale.formatDistance('xMonths', nearestMonth, localizeOptions); // 1 year up to max Date\n  } else {\n    var monthsSinceStartOfYear = months % 12;\n    var years = Math.floor(months / 12); // N years up to 1 years 3 months\n\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance('aboutXYears', years, localizeOptions); // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance('overXYears', years, localizeOptions); // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance('almostXYears', years + 1, localizeOptions);\n    }\n  }\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachDayOfInterval\n * @category Interval Helpers\n * @summary Return the array of dates within the specified time interval.\n *\n * @description\n * Return the array of dates within the specified time interval.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * - The function was renamed from `eachDay` to `eachDayOfInterval`.\n *   This change was made to mirror the use of the word \"interval\" in standard ISO 8601:2004 terminology:\n *\n *   ```\n *   2.1.3\n *   time interval\n *   part of the time axis limited by two instants\n *   ```\n *\n *   Also, this function now accepts an object with `start` and `end` properties\n *   instead of two arguments as an interval.\n *   This function now throws `RangeError` if the start of the interval is after its end\n *   or if any date in the interval is `Invalid Date`.\n *\n *   ```javascript\n *   // Before v2.0.0\n *\n *   eachDay(new Date(2014, 0, 10), new Date(2014, 0, 20))\n *\n *   // v2.0.0 onward\n *\n *   eachDayOfInterval(\n *     { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) }\n *   )\n *   ```\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @param {Object} [options] - an object with options.\n * @param {Number} [options.step=1] - the step to increment by. The value should be more than 1.\n * @returns {Date[]} the array with starts of days from the day of the interval start to the day of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.step` must be a number greater than 1\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each day between 6 October 2014 and 10 October 2014:\n * var result = eachDayOfInterval({\n *   start: new Date(2014, 9, 6),\n *   end: new Date(2014, 9, 10)\n * })\n * //=> [\n * //   Mon Oct 06 2014 00:00:00,\n * //   Tue Oct 07 2014 00:00:00,\n * //   Wed Oct 08 2014 00:00:00,\n * //   Thu Oct 09 2014 00:00:00,\n * //   Fri Oct 10 2014 00:00:00\n * // ]\n */\n\nexport default function eachDayOfInterval(dirtyInterval, options) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  var step = options && 'step' in options ? Number(options.step) : 1;\n  if (step < 1 || isNaN(step)) throw new RangeError('`options.step` must be a number greater than 1');\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setDate(currentDate.getDate() + step);\n    currentDate.setHours(0, 0, 0, 0);\n  }\n\n  return dates;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachMonthOfInterval\n * @category Interval Helpers\n * @summary Return the array of months within the specified time interval.\n *\n * @description\n * Return the array of months within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @returns {Date[]} the array with starts of months from the month of the interval start to the month of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each month between 6 February 2014 and 10 August 2014:\n * var result = eachMonthOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Sat Feb 01 2014 00:00:00,\n * //   Sat Mar 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Thu May 01 2014 00:00:00,\n * //   Sun Jun 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * //   Fri Aug 01 2014 00:00:00\n * // ]\n */\n\nexport default function eachMonthOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var dates = [];\n  var currentDate = startDate;\n  currentDate.setHours(0, 0, 0, 0);\n  currentDate.setDate(1);\n\n  while (currentDate.getTime() <= endTime) {\n    dates.push(toDate(currentDate));\n    currentDate.setMonth(currentDate.getMonth() + 1);\n  }\n\n  return dates;\n}","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMonths\n * @category Month Helpers\n * @summary Add the specified number of months to the given date.\n *\n * @description\n * Add the specified number of months to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of months to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the months added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 5 months to 1 September 2014:\n * var result = addMonths(new Date(2014, 8, 1), 5)\n * //=> Sun Feb 01 2015 00:00:00\n */\n\nexport default function addMonths(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var date = toDate(dirtyDate);\n  var amount = toInteger(dirtyAmount);\n\n  if (isNaN(amount)) {\n    return new Date(NaN);\n  }\n\n  if (!amount) {\n    // If 0 months, no-op to avoid changing times in the hour before end of DST\n    return date;\n  }\n\n  var dayOfMonth = date.getDate(); // The JS Date object supports date math by accepting out-of-bounds values for\n  // month, day, etc. For example, new Date(2020, 1, 0) returns 31 Dec 2019 and\n  // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we\n  // want except that dates will wrap around the end of a month, meaning that\n  // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So\n  // we'll default to the end of the desired month by adding 1 to the desired\n  // month and using a date of 0 to back up one day to the end of the desired\n  // month.\n\n  var endOfDesiredMonth = new Date(date.getTime());\n  endOfDesiredMonth.setMonth(date.getMonth() + amount + 1, 0);\n  var daysInMonth = endOfDesiredMonth.getDate();\n\n  if (dayOfMonth >= daysInMonth) {\n    // If we're already at the end of the month, then this is the correct date\n    // and we're done.\n    return endOfDesiredMonth;\n  } else {\n    // Otherwise, we now know that setting the original day-of-month value won't\n    // cause an overflow, so set the desired day-of-month. Note that we can't\n    // just set the date of `endOfDesiredMonth` because that object may have had\n    // its time changed in the unusual case where where a DST transition was on\n    // the last day of the month and its local time was in the hour skipped or\n    // repeated next to a DST transition.  So we use `date` instead which is\n    // guaranteed to still have the original time.\n    date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);\n    return date;\n  }\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMonths from '../addMonths/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addQuarters\n * @category Quarter Helpers\n * @summary Add the specified number of year quarters to the given date.\n *\n * @description\n * Add the specified number of year quarters to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of quarters to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the quarters added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 1 quarter to 1 September 2014:\n * var result = addQuarters(new Date(2014, 8, 1), 1)\n * //=> Mon Dec 01 2014 00:00:00\n */\n\nexport default function addQuarters(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  var months = amount * 3;\n  return addMonths(dirtyDate, months);\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfQuarter\n * @category Quarter Helpers\n * @summary Return the start of a year quarter for the given date.\n *\n * @description\n * Return the start of a year quarter for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a quarter\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a quarter for 2 September 2014 11:55:00:\n * var result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Jul 01 2014 00:00:00\n */\n\nexport default function startOfQuarter(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  var currentMonth = date.getMonth();\n  var month = currentMonth - currentMonth % 3;\n  date.setMonth(month, 1);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","import addQuarters from '../addQuarters/index.js';\nimport startOfQuarter from '../startOfQuarter/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name eachQuarterOfInterval\n * @category Interval Helpers\n * @summary Return the array of quarters within the specified time interval.\n *\n * @description\n * Return the array of quarters within the specified time interval.\n *\n * @param {Interval} interval - the interval. See [Interval]{@link docs/types/Interval}\n * @returns {Date[]} the array with starts of quarters from the quarter of the interval start to the quarter of the interval end\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} The start of an interval cannot be after its end\n * @throws {RangeError} Date in interval cannot be `Invalid Date`\n *\n * @example\n * // Each quarter within interval 6 February 2014 - 10 August 2014:\n * var result = eachQuarterOfInterval({\n *   start: new Date(2014, 1, 6),\n *   end: new Date(2014, 7, 10)\n * })\n * //=> [\n * //   Wed Jan 01 2014 00:00:00,\n * //   Tue Apr 01 2014 00:00:00,\n * //   Tue Jul 01 2014 00:00:00,\n * // ]\n */\n\nexport default function eachQuarterOfInterval(dirtyInterval) {\n  requiredArgs(1, arguments);\n  var interval = dirtyInterval || {};\n  var startDate = toDate(interval.start);\n  var endDate = toDate(interval.end);\n  var endTime = endDate.getTime(); // Throw an exception if start date is after end date or if any date is `Invalid Date`\n\n  if (!(startDate.getTime() <= endTime)) {\n    throw new RangeError('Invalid interval');\n  }\n\n  var startDateQuarter = startOfQuarter(startDate);\n  var endDateQuarter = startOfQuarter(endDate);\n  endTime = endDateQuarter.getTime();\n  var quarters = [];\n  var currentQuarter = startDateQuarter;\n\n  while (currentQuarter.getTime() <= endTime) {\n    quarters.push(toDate(currentQuarter));\n    currentQuarter = addQuarters(currentQuarter, 1);\n  }\n\n  return quarters;\n}","import toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name startOfDay\n * @category Day Helpers\n * @summary Return the start of a day for the given date.\n *\n * @description\n * Return the start of a day for the given date.\n * The result will be in the local timezone.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the original date\n * @returns {Date} the start of a day\n * @throws {TypeError} 1 argument required\n *\n * @example\n * // The start of a day for 2 September 2014 11:55:00:\n * var result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 00:00:00\n */\n\nexport default function startOfDay(dirtyDate) {\n  requiredArgs(1, arguments);\n  var date = toDate(dirtyDate);\n  date.setHours(0, 0, 0, 0);\n  return date;\n}","/**\n * Returns the [year, month, day, hour, minute, seconds] tokens of the provided\n * `date` as it will be rendered in the `timeZone`.\n */\nexport default function tzTokenizeDate(date, timeZone) {\n  var dtf = getDateTimeFormat(timeZone)\n  return dtf.formatToParts ? partsOffset(dtf, date) : hackyOffset(dtf, date)\n}\n\nvar typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n}\n\nfunction partsOffset(dtf, date) {\n  var formatted = dtf.formatToParts(date)\n  var filled = []\n  for (var i = 0; i < formatted.length; i++) {\n    var pos = typeToPos[formatted[i].type]\n\n    if (pos >= 0) {\n      filled[pos] = parseInt(formatted[i].value, 10)\n    }\n  }\n  return filled\n}\n\nfunction hackyOffset(dtf, date) {\n  var formatted = dtf.format(date).replace(/\\u200E/g, '')\n  var parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted)\n  // var [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed\n  // return [fYear, fMonth, fDay, fHour, fMinute, fSecond]\n  return [parsed[3], parsed[1], parsed[2], parsed[4], parsed[5], parsed[6]]\n}\n\n// Get a cached Intl.DateTimeFormat instance for the IANA `timeZone`. This can be used\n// to get deterministic local date/time output according to the `en-US` locale which\n// can be used to extract local time parts as necessary.\nvar dtfCache = {}\nfunction getDateTimeFormat(timeZone) {\n  if (!dtfCache[timeZone]) {\n    // New browsers use `hourCycle`, IE and Chrome <73 does not support it and uses `hour12`\n    var testDateFormatted = new Intl.DateTimeFormat('en-US', {\n      hour12: false,\n      timeZone: 'America/New_York',\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit',\n      second: '2-digit'\n    }).format(new Date('2014-06-25T04:00:00.123Z'))\n    var hourCycleSupported =\n      testDateFormatted === '06/25/2014, 00:00:00' ||\n      testDateFormatted === '‎06‎/‎25‎/‎2014‎ ‎00‎:‎00‎:‎00'\n\n    dtfCache[timeZone] = hourCycleSupported\n      ? new Intl.DateTimeFormat('en-US', {\n          hour12: false,\n          timeZone: timeZone,\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        })\n      : new Intl.DateTimeFormat('en-US', {\n          hourCycle: 'h23',\n          timeZone: timeZone,\n          year: 'numeric',\n          month: '2-digit',\n          day: '2-digit',\n          hour: '2-digit',\n          minute: '2-digit',\n          second: '2-digit'\n        })\n  }\n  return dtfCache[timeZone]\n}\n","import tzTokenizeDate from '../tzTokenizeDate/index.js'\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\n\nvar patterns = {\n  timezone: /([Z+-].*)$/,\n  timezoneZ: /^(Z)$/,\n  timezoneHH: /^([+-])(\\d{2})$/,\n  timezoneHHMM: /^([+-])(\\d{2}):?(\\d{2})$/,\n  timezoneIANA: /(UTC|(?:[a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?))$/\n}\n\n// Parse various time zone offset formats to an offset in milliseconds\nexport default function tzParseTimezone(timezoneString, date) {\n  var token\n  var absoluteOffset\n\n  // Z\n  token = patterns.timezoneZ.exec(timezoneString)\n  if (token) {\n    return 0\n  }\n\n  var hours\n\n  // ±hh\n  token = patterns.timezoneHH.exec(timezoneString)\n  if (token) {\n    hours = parseInt(token[2], 10)\n\n    if (!validateTimezone(hours)) {\n      return NaN\n    }\n\n    absoluteOffset = hours * MILLISECONDS_IN_HOUR\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset\n  }\n\n  // ±hh:mm or ±hhmm\n  token = patterns.timezoneHHMM.exec(timezoneString)\n  if (token) {\n    hours = parseInt(token[2], 10)\n    var minutes = parseInt(token[3], 10)\n\n    if (!validateTimezone(hours, minutes)) {\n      return NaN\n    }\n\n    absoluteOffset =\n      hours * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE\n    return token[1] === '+' ? -absoluteOffset : absoluteOffset\n  }\n\n  // IANA time zone\n  token = patterns.timezoneIANA.exec(timezoneString)\n  if (token) {\n    // var [fYear, fMonth, fDay, fHour, fMinute, fSecond] = tzTokenizeDate(date, timezoneString)\n    var tokens = tzTokenizeDate(date, timezoneString)\n    var asUTC = Date.UTC(\n      tokens[0],\n      tokens[1] - 1,\n      tokens[2],\n      tokens[3],\n      tokens[4],\n      tokens[5]\n    )\n    var timestampWithMsZeroed = date.getTime() - (date.getTime() % 1000)\n    return -(asUTC - timestampWithMsZeroed)\n  }\n\n  return 0\n}\n\nfunction validateTimezone(hours, minutes) {\n  if (minutes != null && (minutes < 0 || minutes > 59)) {\n    return false\n  }\n\n  return true\n}\n","import toInteger from '../_lib/toInteger/index.js';\nimport toDate from '../toDate/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name addMilliseconds\n * @category Millisecond Helpers\n * @summary Add the specified number of milliseconds to the given date.\n *\n * @description\n * Add the specified number of milliseconds to the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be added. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds added\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Add 750 milliseconds to 10 July 2014 12:45:30.000:\n * var result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:30.750\n */\n\nexport default function addMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var timestamp = toDate(dirtyDate).getTime();\n  var amount = toInteger(dirtyAmount);\n  return new Date(timestamp + amount);\n}","import toInteger from '../_lib/toInteger/index.js';\nimport addMilliseconds from '../addMilliseconds/index.js';\nimport requiredArgs from '../_lib/requiredArgs/index.js';\n/**\n * @name subMilliseconds\n * @category Millisecond Helpers\n * @summary Subtract the specified number of milliseconds from the given date.\n *\n * @description\n * Subtract the specified number of milliseconds from the given date.\n *\n * ### v2.0.0 breaking changes:\n *\n * - [Changes that are common for the whole library](https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#Common-Changes).\n *\n * @param {Date|Number} date - the date to be changed\n * @param {Number} amount - the amount of milliseconds to be subtracted. Positive decimals will be rounded using `Math.floor`, decimals less than zero will be rounded using `Math.ceil`.\n * @returns {Date} the new date with the milliseconds subtracted\n * @throws {TypeError} 2 arguments required\n *\n * @example\n * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:\n * var result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)\n * //=> Thu Jul 10 2014 12:45:29.250\n */\n\nexport default function subMilliseconds(dirtyDate, dirtyAmount) {\n  requiredArgs(2, arguments);\n  var amount = toInteger(dirtyAmount);\n  return addMilliseconds(dirtyDate, -amount);\n}","import toInteger from 'date-fns/esm/_lib/toInteger/index.js'\nimport getTimezoneOffsetInMilliseconds from 'date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js'\nimport tzParseTimezone from '../_lib/tzParseTimezone'\n\nvar MILLISECONDS_IN_HOUR = 3600000\nvar MILLISECONDS_IN_MINUTE = 60000\nvar DEFAULT_ADDITIONAL_DIGITS = 2\n\nvar patterns = {\n  dateTimeDelimeter: /[T ]/,\n  plainTime: /:/,\n  timeZoneDelimeter: /[Z ]/i,\n\n  // year tokens\n  YY: /^(\\d{2})$/,\n  YYY: [\n    /^([+-]\\d{2})$/, // 0 additional digits\n    /^([+-]\\d{3})$/, // 1 additional digit\n    /^([+-]\\d{4})$/ // 2 additional digits\n  ],\n  YYYY: /^(\\d{4})/,\n  YYYYY: [\n    /^([+-]\\d{4})/, // 0 additional digits\n    /^([+-]\\d{5})/, // 1 additional digit\n    /^([+-]\\d{6})/ // 2 additional digits\n  ],\n\n  // date tokens\n  MM: /^-(\\d{2})$/,\n  DDD: /^-?(\\d{3})$/,\n  MMDD: /^-?(\\d{2})-?(\\d{2})$/,\n  Www: /^-?W(\\d{2})$/,\n  WwwD: /^-?W(\\d{2})-?(\\d{1})$/,\n\n  HH: /^(\\d{2}([.,]\\d*)?)$/,\n  HHMM: /^(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n  HHMMSS: /^(\\d{2}):?(\\d{2}):?(\\d{2}([.,]\\d*)?)$/,\n\n  // timezone tokens (to identify the presence of a tz)\n  timezone: /([Z+-].*| UTC|(?:[a-zA-Z]+\\/[a-zA-Z_]+(?:\\/[a-zA-Z_]+)?))$/\n}\n\n/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If an argument is a string, the function tries to parse it.\n * Function accepts complete ISO 8601 formats as well as partial implementations.\n * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601\n * If the function cannot parse the string or the values are invalid, it returns Invalid Date.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n * All *date-fns* functions will throw `RangeError` if `options.additionalDigits` is not 0, 1, 2 or undefined.\n *\n * @param {Date|String|Number} argument - the value to convert\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - the additional number of digits in the extended year format\n * @param {String} [options.timeZone=''] - used to specify the IANA time zone offset of a date String.\n * @returns {Date} the parsed date in the local time zone\n * @throws {TypeError} 1 argument required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // Convert string '2014-02-11T11:30:30' to date:\n * var result = toDate('2014-02-11T11:30:30')\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert string '+02014101' to date,\n * // if the additional number of digits in the extended year format is 1:\n * var result = toDate('+02014101', {additionalDigits: 1})\n * //=> Fri Apr 11 2014 00:00:00\n */\nexport default function toDate(argument, dirtyOptions) {\n  if (arguments.length < 1) {\n    throw new TypeError(\n      '1 argument required, but only ' + arguments.length + ' present'\n    )\n  }\n\n  if (argument === null) {\n    return new Date(NaN)\n  }\n\n  var options = dirtyOptions || {}\n\n  var additionalDigits =\n    options.additionalDigits == null\n      ? DEFAULT_ADDITIONAL_DIGITS\n      : toInteger(options.additionalDigits)\n  if (\n    additionalDigits !== 2 &&\n    additionalDigits !== 1 &&\n    additionalDigits !== 0\n  ) {\n    throw new RangeError('additionalDigits must be 0, 1 or 2')\n  }\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === 'object' &&\n      Object.prototype.toString.call(argument) === '[object Date]')\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new Date(argument.getTime())\n  } else if (\n    typeof argument === 'number' ||\n    Object.prototype.toString.call(argument) === '[object Number]'\n  ) {\n    return new Date(argument)\n  } else if (\n    !(\n      typeof argument === 'string' ||\n      Object.prototype.toString.call(argument) === '[object String]'\n    )\n  ) {\n    return new Date(NaN)\n  }\n\n  var dateStrings = splitDateString(argument)\n\n  var parseYearResult = parseYear(dateStrings.date, additionalDigits)\n  var year = parseYearResult.year\n  var restDateString = parseYearResult.restDateString\n\n  var date = parseDate(restDateString, year)\n\n  if (isNaN(date)) {\n    return new Date(NaN)\n  }\n\n  if (date) {\n    var timestamp = date.getTime()\n    var time = 0\n    var offset\n\n    if (dateStrings.time) {\n      time = parseTime(dateStrings.time)\n\n      if (isNaN(time)) {\n        return new Date(NaN)\n      }\n    }\n\n    if (dateStrings.timezone || options.timeZone) {\n      offset = tzParseTimezone(\n        dateStrings.timezone || options.timeZone,\n        new Date(timestamp + time)\n      )\n      if (isNaN(offset)) {\n        return new Date(NaN)\n      }\n      offset = tzParseTimezone(\n        dateStrings.timezone || options.timeZone,\n        new Date(timestamp + time + offset)\n      )\n      if (isNaN(offset)) {\n        return new Date(NaN)\n      }\n    } else {\n      // get offset accurate to hour in timezones that change offset\n      offset = getTimezoneOffsetInMilliseconds(new Date(timestamp + time))\n      offset = getTimezoneOffsetInMilliseconds(\n        new Date(timestamp + time + offset)\n      )\n    }\n\n    return new Date(timestamp + time + offset)\n  } else {\n    return new Date(NaN)\n  }\n}\n\nfunction splitDateString(dateString) {\n  var dateStrings = {}\n  var array = dateString.split(patterns.dateTimeDelimeter)\n  var timeString\n\n  if (patterns.plainTime.test(array[0])) {\n    dateStrings.date = null\n    timeString = array[0]\n  } else {\n    dateStrings.date = array[0]\n    timeString = array[1]\n    dateStrings.timezone = array[2]\n    if (patterns.timeZoneDelimeter.test(dateStrings.date)) {\n      dateStrings.date = dateString.split(patterns.timeZoneDelimeter)[0]\n      timeString = dateString.substr(dateStrings.date.length, dateString.length)\n    }\n  }\n\n  if (timeString) {\n    var token = patterns.timezone.exec(timeString)\n    if (token) {\n      dateStrings.time = timeString.replace(token[1], '')\n      dateStrings.timezone = token[1]\n    } else {\n      dateStrings.time = timeString\n    }\n  }\n\n  return dateStrings\n}\n\nfunction parseYear(dateString, additionalDigits) {\n  var patternYYY = patterns.YYY[additionalDigits]\n  var patternYYYYY = patterns.YYYYY[additionalDigits]\n\n  var token\n\n  // YYYY or ±YYYYY\n  token = patterns.YYYY.exec(dateString) || patternYYYYY.exec(dateString)\n  if (token) {\n    var yearString = token[1]\n    return {\n      year: parseInt(yearString, 10),\n      restDateString: dateString.slice(yearString.length)\n    }\n  }\n\n  // YY or ±YYY\n  token = patterns.YY.exec(dateString) || patternYYY.exec(dateString)\n  if (token) {\n    var centuryString = token[1]\n    return {\n      year: parseInt(centuryString, 10) * 100,\n      restDateString: dateString.slice(centuryString.length)\n    }\n  }\n\n  // Invalid ISO-formatted year\n  return {\n    year: null\n  }\n}\n\nfunction parseDate(dateString, year) {\n  // Invalid ISO-formatted year\n  if (year === null) {\n    return null\n  }\n\n  var token\n  var date\n  var month\n  var week\n\n  // YYYY\n  if (dateString.length === 0) {\n    date = new Date(0)\n    date.setUTCFullYear(year)\n    return date\n  }\n\n  // YYYY-MM\n  token = patterns.MM.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n\n    if (!validateDate(year, month)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month)\n    return date\n  }\n\n  // YYYY-DDD or YYYYDDD\n  token = patterns.DDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    var dayOfYear = parseInt(token[1], 10)\n\n    if (!validateDayOfYearDate(year, dayOfYear)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, 0, dayOfYear)\n    return date\n  }\n\n  // yyyy-MM-dd or YYYYMMDD\n  token = patterns.MMDD.exec(dateString)\n  if (token) {\n    date = new Date(0)\n    month = parseInt(token[1], 10) - 1\n    var day = parseInt(token[2], 10)\n\n    if (!validateDate(year, month, day)) {\n      return new Date(NaN)\n    }\n\n    date.setUTCFullYear(year, month, day)\n    return date\n  }\n\n  // YYYY-Www or YYYYWww\n  token = patterns.Www.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n\n    if (!validateWeekDate(year, week)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week)\n  }\n\n  // YYYY-Www-D or YYYYWwwD\n  token = patterns.WwwD.exec(dateString)\n  if (token) {\n    week = parseInt(token[1], 10) - 1\n    var dayOfWeek = parseInt(token[2], 10) - 1\n\n    if (!validateWeekDate(year, week, dayOfWeek)) {\n      return new Date(NaN)\n    }\n\n    return dayOfISOWeekYear(year, week, dayOfWeek)\n  }\n\n  // Invalid ISO-formatted date\n  return null\n}\n\nfunction parseTime(timeString) {\n  var token\n  var hours\n  var minutes\n\n  // hh\n  token = patterns.HH.exec(timeString)\n  if (token) {\n    hours = parseFloat(token[1].replace(',', '.'))\n\n    if (!validateTime(hours)) {\n      return NaN\n    }\n\n    return (hours % 24) * MILLISECONDS_IN_HOUR\n  }\n\n  // hh:mm or hhmm\n  token = patterns.HHMM.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseFloat(token[2].replace(',', '.'))\n\n    if (!validateTime(hours, minutes)) {\n      return NaN\n    }\n\n    return (\n      (hours % 24) * MILLISECONDS_IN_HOUR + minutes * MILLISECONDS_IN_MINUTE\n    )\n  }\n\n  // hh:mm:ss or hhmmss\n  token = patterns.HHMMSS.exec(timeString)\n  if (token) {\n    hours = parseInt(token[1], 10)\n    minutes = parseInt(token[2], 10)\n    var seconds = parseFloat(token[3].replace(',', '.'))\n\n    if (!validateTime(hours, minutes, seconds)) {\n      return NaN\n    }\n\n    return (\n      (hours % 24) * MILLISECONDS_IN_HOUR +\n      minutes * MILLISECONDS_IN_MINUTE +\n      seconds * 1000\n    )\n  }\n\n  // Invalid ISO-formatted time\n  return null\n}\n\nfunction dayOfISOWeekYear(isoWeekYear, week, day) {\n  week = week || 0\n  day = day || 0\n  var date = new Date(0)\n  date.setUTCFullYear(isoWeekYear, 0, 4)\n  var fourthOfJanuaryDay = date.getUTCDay() || 7\n  var diff = week * 7 + day + 1 - fourthOfJanuaryDay\n  date.setUTCDate(date.getUTCDate() + diff)\n  return date\n}\n\n// Validation functions\n\nvar DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\nvar DAYS_IN_MONTH_LEAP_YEAR = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]\n\nfunction isLeapYearIndex(year) {\n  return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)\n}\n\nfunction validateDate(year, month, date) {\n  if (month < 0 || month > 11) {\n    return false\n  }\n\n  if (date != null) {\n    if (date < 1) {\n      return false\n    }\n\n    var isLeapYear = isLeapYearIndex(year)\n    if (isLeapYear && date > DAYS_IN_MONTH_LEAP_YEAR[month]) {\n      return false\n    }\n    if (!isLeapYear && date > DAYS_IN_MONTH[month]) {\n      return false\n    }\n  }\n\n  return true\n}\n\nfunction validateDayOfYearDate(year, dayOfYear) {\n  if (dayOfYear < 1) {\n    return false\n  }\n\n  var isLeapYear = isLeapYearIndex(year)\n  if (isLeapYear && dayOfYear > 366) {\n    return false\n  }\n  if (!isLeapYear && dayOfYear > 365) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateWeekDate(year, week, day) {\n  if (week < 0 || week > 52) {\n    return false\n  }\n\n  if (day != null && (day < 0 || day > 6)) {\n    return false\n  }\n\n  return true\n}\n\nfunction validateTime(hours, minutes, seconds) {\n  if (hours != null && (hours < 0 || hours >= 25)) {\n    return false\n  }\n\n  if (minutes != null && (minutes < 0 || minutes >= 60)) {\n    return false\n  }\n\n  if (seconds != null && (seconds < 0 || seconds >= 60)) {\n    return false\n  }\n\n  return true\n}\n","import tzParseTimezone from '../_lib/tzParseTimezone'\nimport subMilliseconds from 'date-fns/esm/subMilliseconds'\nimport toDate from '../toDate'\n\n/**\n * @name utcToZonedTime\n * @category Time Zone Helpers\n * @summary Get a date/time representing local time in a given time zone from the UTC date\n *\n * @description\n * Returns a date instance with values representing the local time in the time zone\n * specified of the UTC time from the date provided. In other words, when the new date\n * is formatted it will show the equivalent hours in the target time zone regardless\n * of the current system time zone.\n *\n * @param {Date|String|Number} date - the date with the relevant UTC time\n * @param {String} timeZone - the time zone to get local time for, can be an offset or IANA time zone\n * @param {OptionsWithTZ} [options] - the object with options. See [Options]{@link https://date-fns.org/docs/Options}\n * @param {0|1|2} [options.additionalDigits=2] - passed to `toDate`. See [toDate]{@link https://date-fns.org/docs/toDate}\n * @returns {Date} the new date with the equivalent time in the time zone\n * @throws {TypeError} 2 arguments required\n * @throws {RangeError} `options.additionalDigits` must be 0, 1 or 2\n *\n * @example\n * // In June 10am UTC is 6am in New York (-04:00)\n * const result = utcToZonedTime('2014-06-25T10:00:00.000Z', 'America/New_York')\n * //=> Jun 25 2014 06:00:00\n */\nexport default function utcToZonedTime(dirtyDate, timeZone, options) {\n  var date = toDate(dirtyDate, options)\n\n  // This date has the UTC time values of the input date at the system time zone\n  var utcDate = new Date(\n    date.getUTCFullYear(),\n    date.getUTCMonth(),\n    date.getUTCDate(),\n    date.getUTCHours(),\n    date.getUTCMinutes(),\n    date.getUTCSeconds(),\n    date.getUTCMilliseconds()\n  )\n  // We just need to apply the offset indicated by the time zone to this localized date\n  var offsetMilliseconds = tzParseTimezone(timeZone, utcDate)\n\n  return offsetMilliseconds\n    ? subMilliseconds(utcDate, offsetMilliseconds)\n    : utcDate\n}\n","import {\n    formatDistance,\n    differenceInMonths,\n    fromUnixTime,\n    getUnixTime,\n    startOfDay,\n    startOfMonth,\n    differenceInCalendarMonths,\n    eachQuarterOfInterval,\n    eachMonthOfInterval,\n    eachDayOfInterval,\n} from 'date-fns';\nimport { utcToZonedTime } from 'date-fns-tz';\n\nexport const formatDuration = (seconds: number) =>\n    formatDistance(0, seconds * 1000, { includeSeconds: true });\n\nexport const getLocalTimeZone = () => {\n    return Intl.DateTimeFormat().resolvedOptions().timeZone;\n};\n\nexport const getDateWithTimeZone = (date: number, timeZone?: string) => {\n    try {\n        const unixDate = fromUnixTime(date / 1000);\n        const tz = timeZone || getLocalTimeZone();\n        return utcToZonedTime(unixDate, tz);\n    } catch (err) {\n        console.error(err);\n        return undefined;\n    }\n};\n\nexport const calcTicks = (startDate: Date, endDate: Date) => {\n    let timestamps = [];\n    if (differenceInMonths(endDate, startDate) <= 1) {\n        timestamps = eachDayOfInterval({ start: startDate, end: endDate });\n    } else {\n        timestamps = eachMonthOfInterval({ start: startDate, end: endDate });\n    }\n\n    return timestamps;\n};\n\nexport const calcTicksFromData = (data: { time: number }[]) => {\n    if (!data || data.length < 1) return [];\n    const startDate = data.reduce((min, current) => {\n        return current.time < min ? current.time : min;\n    }, data[0].time);\n    const endDate = data.reduce((max, current) => {\n        return current.time > max ? current.time : max;\n    }, data[0].time);\n\n    const startUnix = fromUnixTime(startDate);\n    const endUnix = fromUnixTime(endDate);\n\n    // TODO: input data are processed by aggregateBalanceHistory which aggregates the data to monthly bins, so we can't get sub month interval here\n    // let interval = '3-months';\n    // const daysDiff = differenceInCalendarDays(endUnix, startUnix);\n    // if (daysDiff <= 14) {\n    //     interval = 'day';\n    // } else if (daysDiff <= 30) {\n    //     interval = '2-day';\n    // } else if (daysDiff <= 365 * 2) {\n    //     // less than 24 months between first and last timestamps => we can fit monthly ticks just fine\n    //     interval = 'month';\n    // }\n\n    // less than 16 months between first and last timestamps => we can fit monthly ticks just fine\n    const interval = differenceInCalendarMonths(endUnix, startUnix) <= 16 ? 'month' : '3-months';\n\n    if (interval === 'month') {\n        // 1 month interval\n        const timestamps = eachMonthOfInterval({ start: startUnix, end: endUnix });\n        return timestamps;\n    }\n\n    // 3 months interval\n    const timestamps = eachQuarterOfInterval({ start: startUnix, end: endUnix });\n\n    return timestamps;\n};\n\n/**\n * Returns Blockbook-safe current unix timestamp (current time - 3 mins).\n * Little workaround for Blockbook as it doesn't return rates data for too recent timestamps.\n *\n * @returns\n */\nexport const getBlockbookSafeTime = () => {\n    const timestamp = getUnixTime(new Date());\n    return timestamp - 180; // current time - 3 mins\n};\n\n/**\n * Sets hh:mm:ss to 00:00:00 in local timezone (UTC time may be different).\n * If `resetDay` is true  sets date to the first of the month\n * Returns unix timestamp\n *\n * @param {number} ts\n * @param {boolean} resetDay\n * @returns\n */\nexport const resetTime = (ts: number, resetDay?: boolean) => {\n    let sanitizedTimestamp = fromUnixTime(ts);\n\n    sanitizedTimestamp = startOfDay(sanitizedTimestamp);\n    if (resetDay) {\n        sanitizedTimestamp = startOfMonth(sanitizedTimestamp);\n    }\n    return getUnixTime(sanitizedTimestamp);\n};\n\n/**\n * Sets hh:mm:ss to 00:00:00 in UTC.\n * If `resetDay` is true  sets date to the first of the month\n * Returns unix timestamp\n *\n * @param {number} ts\n * @param {boolean} [resetDay]\n * @returns\n */\nexport const resetUTCTime = (ts: number, resetDay?: boolean) => {\n    let sanitizedTimestamp = fromUnixTime(ts);\n    sanitizedTimestamp = fromUnixTime(sanitizedTimestamp.setUTCHours(0) / 1000);\n    sanitizedTimestamp = fromUnixTime(sanitizedTimestamp.setUTCMinutes(0) / 1000);\n    sanitizedTimestamp = fromUnixTime(sanitizedTimestamp.setUTCSeconds(0) / 1000);\n\n    if (resetDay) {\n        sanitizedTimestamp = fromUnixTime(sanitizedTimestamp.setUTCDate(1) / 1000);\n    }\n    const sanitizedUnixTimestamp = getUnixTime(sanitizedTimestamp);\n    return sanitizedUnixTimestamp;\n};\n","import BigNumber from 'bignumber.js';\nimport { startOfMonth, getUnixTime, fromUnixTime, differenceInMonths } from 'date-fns';\nimport { toFiatCurrency } from './fiatConverterUtils';\nimport { CoinFiatRates, Account } from '@wallet-types';\nimport {\n    AggregatedDashboardHistory,\n    AggregatedAccountHistory,\n    GraphRange,\n    GraphData,\n    CommonAggregatedHistory,\n    GraphScale,\n} from '@wallet-types/graph';\nimport { formatNetworkAmount } from './accountUtils';\nimport { resetTime } from '@suite-utils/date';\nimport { BlockchainAccountBalanceHistory } from '@onekeyhq/connect';\n\ntype FiatRates = NonNullable<CoinFiatRates['current']>['rates'];\n\ntype TypeName = 'account' | 'dashboard';\ntype ObjectType<T> = T extends 'account'\n    ? AggregatedAccountHistory\n    : T extends 'dashboard'\n    ? AggregatedDashboardHistory\n    : never;\n\nexport const isAccountAggregatedHistory = (\n    history: AggregatedAccountHistory | AggregatedDashboardHistory,\n    type: 'account' | 'dashboard',\n): history is AggregatedAccountHistory => {\n    return (history as AggregatedAccountHistory).sent !== undefined && type === 'account';\n};\n\nexport const calcFiatValueMap = (\n    amount: string,\n    rates: FiatRates,\n): { [k: string]: string | undefined } => {\n    const fiatValueMap: { [k: string]: string | undefined } = {};\n    Object.keys(rates).forEach(fiatSymbol => {\n        fiatValueMap[fiatSymbol] = toFiatCurrency(amount, fiatSymbol, rates) ?? '0';\n    });\n    return fiatValueMap;\n};\n\n/**\n * Mutates the first object param and adds values from second object.\n *\n * @param {{ string: string | undefined }} valueMap\n * @param {{ string: string | undefined }} obj\n * @returns\n */\nexport const sumFiatValueMapInPlace = (\n    valueMap: { [k: string]: string | undefined },\n    obj: { [k: string]: string | undefined },\n) => {\n    Object.entries(obj).forEach(keyVal => {\n        const [key, val] = keyVal;\n        const previousValue = valueMap[key] ?? '0';\n        valueMap[key] = new BigNumber(previousValue).plus(val ?? 0).toFixed();\n    });\n};\n\nexport const sumFiatValueMap = (\n    valueMap: { [k: string]: string | undefined },\n    obj: { [k: string]: string | undefined },\n) => {\n    const newMap = { ...valueMap };\n    sumFiatValueMapInPlace(newMap, obj);\n    return newMap;\n};\n\n// Used for dashboard graph, functionality currently disabled\n// export const subFiatValueMap = (\n//     valueMap: { [k: string]: string | undefined },\n//     obj: { [k: string]: string | undefined },\n// ) => {\n//     const newMap = { ...valueMap };\n//     Object.entries(obj).forEach(keyVal => {\n//         const [key, val] = keyVal;\n//         const previousValue = newMap[key] ?? '0';\n//         newMap[key] = new BigNumber(previousValue).minus(val ?? 0).toFixed();\n//     });\n//     return newMap;\n// };\n\n/**\n * Return array with 2 items, minimum non-zero value and maximum value calculated from sent, received and balance fields\n */\nexport const getMinMaxValueFromData = <TType extends TypeName>(\n    data: ObjectType<TType>[],\n    _type: TType,\n    extractSentValue: (sourceData: ObjectType<TType>) => string | undefined,\n    extractReceivedValue: (sourceData: ObjectType<TType>) => string | undefined,\n    extractBalanceValue: (sourceData: ObjectType<TType>) => string | undefined,\n): [number, number] => {\n    if (!data || data.length === 0) {\n        return [0, 0];\n    }\n    let maxSent = new BigNumber(extractSentValue(data[0]) || 0);\n    let maxReceived = new BigNumber(extractReceivedValue(data[0]) || 0);\n    let maxBalance = new BigNumber(extractBalanceValue(data[0]) || 0);\n\n    let minSent: BigNumber | undefined;\n    let minReceived: BigNumber | undefined;\n    let minBalance: BigNumber | undefined;\n\n    data.forEach(d => {\n        const newSentValue = new BigNumber(extractSentValue(d) || 0);\n        const newReceivedValue = new BigNumber(extractReceivedValue(d) || 0);\n        const newBalanceValue = new BigNumber(extractBalanceValue(d) || 0);\n\n        // max value\n        if (newSentValue.gt(maxSent)) {\n            maxSent = newSentValue;\n        }\n        if (newReceivedValue.gt(maxReceived)) {\n            maxReceived = newReceivedValue;\n        }\n        if (newBalanceValue.gt(maxBalance)) {\n            maxBalance = newBalanceValue;\n        }\n\n        // min non zero value\n        if ((minSent === undefined || newSentValue.lt(minSent)) && newSentValue.gt(0)) {\n            minSent = newSentValue;\n        }\n        if (\n            (minReceived === undefined || newReceivedValue.lt(minReceived)) &&\n            newReceivedValue.gt(0)\n        ) {\n            minReceived = newReceivedValue;\n        }\n        if ((minBalance === undefined || newBalanceValue.lt(minBalance)) && newBalanceValue.gt(0)) {\n            minBalance = newBalanceValue;\n        }\n    });\n\n    const maxValue = Math.max(maxSent.toNumber(), maxReceived.toNumber(), maxBalance.toNumber());\n\n    const minsToCompare = [minSent, minReceived, minBalance]\n        .filter(m => !!m)\n        .map(m => {\n            return m!.toNumber();\n        });\n    const minValue = Math.min(...minsToCompare);\n    return [minValue, maxValue];\n};\n\nexport const aggregateBalanceHistory = <TType extends TypeName>(\n    graphData: GraphData[],\n    groupBy: 'day' | 'month',\n    type: TType,\n): ObjectType<TType>[] => {\n    const groupedByTimestamp: { [key: string]: ObjectType<TType> } = {};\n\n    for (let i = 0; i < graphData.length; i++) {\n        // graph data for one account;\n        const accountHistory = graphData[i].data;\n\n        if (accountHistory && accountHistory.length > 0) {\n            accountHistory.forEach(h => {\n                // calc sent/received amounts in fiat\n                const dataPoint = {\n                    ...h,\n                    receivedFiat: calcFiatValueMap(h.received, h.rates || {}),\n                    sentFiat: calcFiatValueMap(h.sent, h.rates || {}),\n                    balanceFiat: calcFiatValueMap(h.balance, h.rates || {}),\n                };\n\n                const d = fromUnixTime(dataPoint.time);\n                // build string used as a key to index daily/monthly bins\n                const key =\n                    groupBy === 'day'\n                        ? `${d.getFullYear()}-${d.getMonth() + 1}-${d.getDate()}`\n                        : `${d.getFullYear()}-${d.getMonth() + 1}`;\n                // current working bin\n                const bin = groupedByTimestamp[key];\n\n                // Calculate aggregated values for the bin\n                if (!bin) {\n                    // bin is empty, set initial values\n                    const baseProps: AggregatedDashboardHistory = {\n                        time:\n                            groupBy === 'day'\n                                ? dataPoint.time\n                                : getUnixTime(startOfMonth(fromUnixTime(dataPoint.time))), // set timestamp to first day of the month\n                        txs: dataPoint.txs,\n                        balanceFiat: dataPoint.balanceFiat,\n                        sentFiat: dataPoint.sentFiat,\n                        receivedFiat: dataPoint.receivedFiat,\n                        balance: undefined,\n                        sent: undefined,\n                        received: undefined,\n                    };\n\n                    const accountProps: AggregatedAccountHistory = {\n                        ...baseProps,\n                        balance: dataPoint.balance,\n                        sent: dataPoint.sent,\n                        received: dataPoint.received,\n                    };\n\n                    groupedByTimestamp[key] = (type === 'account'\n                        ? accountProps\n                        : baseProps) as ObjectType<TType>;\n                } else {\n                    // add to existing bin\n                    bin.txs += dataPoint.txs;\n                    sumFiatValueMapInPlace(bin.sentFiat, dataPoint.sentFiat);\n                    sumFiatValueMapInPlace(bin.receivedFiat, dataPoint.receivedFiat);\n                    sumFiatValueMapInPlace(bin.balanceFiat, dataPoint.balanceFiat);\n\n                    // sumFiatValueMap(\n                    //     subFiatValueMap(bin.balanceFiat, dataPoint.sentFiat),\n                    //     dataPoint.sentFiat,\n                    // );\n\n                    if (isAccountAggregatedHistory(bin, type)) {\n                        // adding sent/received values\n                        bin.balance = new BigNumber(bin.balance)\n                            .plus(dataPoint.received)\n                            .minus(dataPoint.sent)\n                            .toFixed();\n                        bin.sent = new BigNumber(bin.sent).plus(dataPoint.sent).toFixed();\n                        bin.received = new BigNumber(bin.received)\n                            .plus(dataPoint.received)\n                            .toFixed();\n                    }\n                }\n            });\n        }\n    }\n\n    // convert bins from an object indexed by timestamp to an array of bins\n    const aggregatedData = Object.keys(groupedByTimestamp)\n        .map(timestamp => {\n            return groupedByTimestamp[timestamp];\n        })\n        .sort((a, b) => Number(a.time) - Number(b.time)); // sort from older to newer;;\n    return aggregatedData;\n};\n\nexport const accountGraphDataFilterFn = (d: GraphData, account: Account) => {\n    return (\n        d.account.descriptor === account.descriptor &&\n        d.account.symbol === account.symbol &&\n        d.account.deviceState === account.deviceState\n    );\n};\n\nexport const deviceGraphDataFilterFn = (d: GraphData, deviceState: string | undefined) => {\n    if (!deviceState) return false;\n    return d.account.deviceState === deviceState;\n};\n\nconst calcMinYDomain = (minMaxValues: [number, number]) => {\n    // Used in calculating domain interval for Y axis with log scale\n    // We could simply use minimum coin value (eg 0.00000001) as our minimum, but that would results in\n    // Y axis with values/labels 0.00000001, 0.0000001, 0.000001, 0.0001...\n    // So instead we calculate what smallest value we need to show without any value being of of the range.\n    // Maybe we could instead just calculate our own set of ticks\n    const [minDataValue] = minMaxValues;\n    const decimals = minDataValue.toString().split('.')[1]?.length;\n    const min = decimals && decimals > 0 ? 1 / 10 ** decimals : 0.00000001;\n    return min;\n    // return 0.00000001;\n};\n\nexport const calcYDomain = (\n    type: 'fiat' | 'crypto',\n    scale: GraphScale,\n    minMaxValues: [number, number],\n    lastBalance?: string,\n): [number, number] => {\n    const [, maxDataValue] = minMaxValues;\n    const maxValueMultiplier = scale === 'linear' ? 1.2 : 10;\n\n    let minValue: number;\n    if (scale === 'linear') {\n        minValue = 0;\n    } else {\n        minValue = type === 'fiat' ? 0.01 : calcMinYDomain(minMaxValues);\n    }\n\n    if (maxDataValue > 0) {\n        return [minValue, maxDataValue * maxValueMultiplier];\n    }\n\n    // no txs, but there could be non zero balance we still need to show\n    const lastBalanceBn = lastBalance ? new BigNumber(lastBalance) : null;\n    if (lastBalanceBn && lastBalanceBn.gt(0)) {\n        return [minValue, lastBalanceBn.toNumber() * 1.2];\n    }\n\n    // got maxValue === 0, zero balance\n    // We basically don't handle the value of tokens txs.\n    // They'll create dataPoints for the graph, but the sent/received amounts are always 0\n    // This make sure we show nice fake y axis in cases in which there are only tokens txs.\n    // Second usecase is on the dashboard when someone picks a range in which there are no txs\n    return [minValue, 10 * maxValueMultiplier];\n};\n\nexport const calcXDomain = (\n    ticks: number[],\n    data: { time: number }[],\n    range: GraphRange,\n): [number, number] => {\n    const start = ticks[0];\n    const lastTick = ticks[ticks.length - 1];\n    const lastData = data[data.length - 1];\n    // if the last data point is after last tick/label use datapoint's timestamp to mark the end of the interval\n    const end = lastData && lastTick < lastData.time ? lastData.time : lastTick;\n\n    let xPadding;\n    switch (range.label) {\n        case 'all':\n            xPadding = 3600 * 24 * 30; // 30 days\n            break;\n        case 'year':\n            xPadding = 3600 * 24 * 14; // 14 days\n            break;\n        case 'month':\n        case 'day':\n            xPadding = 3600 * 24; // 1 day\n            break;\n        case 'range':\n            if (differenceInMonths(range.endDate, range.startDate) <= 1) {\n                xPadding = 3600 * 24; // 1 day\n            } else {\n                xPadding = 3600 * 24 * 14; // 14 days\n            }\n            break;\n        default:\n            xPadding = 3600 * 12; // 12 hours\n            break;\n    }\n\n    return [start - xPadding, end + xPadding];\n};\n\nexport const getFormattedLabel = (rangeLabel: GraphRange['label']) => {\n    switch (rangeLabel) {\n        case 'range':\n            return '自定义时段';\n        case 'all':\n            return '全部';\n        case 'year':\n            return '1年';\n        case 'month':\n            return '1月';\n        case 'week':\n            return '1周';\n        case 'day':\n            return '1天';\n        // no default\n    }\n};\n\nexport const getFormattedLabelLong = (rangeLabel: GraphRange['label']) => {\n    switch (rangeLabel) {\n        case 'range':\n            return '自定义时段';\n        case 'all':\n            return '全部';\n        case 'year':\n            return '1 年';\n        case 'month':\n            return '1 月';\n        case 'week':\n            return '1 周';\n        case 'day':\n            return '1 天';\n        // no default\n    }\n};\n\nexport const calcFakeGraphDataForTimestamps = (\n    timestamps: number[],\n    data: CommonAggregatedHistory[],\n    currentBalance?: string,\n) => {\n    const balanceData: CommonAggregatedHistory[] = [];\n    const firstDataPoint = data[0];\n    const lastDataPoint = data[data.length - 1];\n\n    const firstTimestamp = timestamps[0];\n    const lastTimestamp = timestamps[timestamps.length - 1];\n\n    if (data.length === 0) {\n        timestamps.forEach(ts => {\n            balanceData.push({\n                time: ts,\n                sent: '0',\n                received: '0',\n                sentFiat: {},\n                receivedFiat: {},\n                balanceFiat: {},\n                txs: 0,\n                balance: currentBalance,\n            });\n        });\n        return balanceData;\n    }\n\n    if (firstDataPoint && lastDataPoint && firstTimestamp && lastTimestamp) {\n        // fake points before first tx\n        timestamps.forEach(ts => {\n            if (ts < firstDataPoint.time) {\n                balanceData.push({\n                    time: ts,\n                    sent: '0',\n                    received: '0',\n                    sentFiat: {},\n                    receivedFiat: {},\n                    balanceFiat: {},\n                    txs: 0,\n                    balance: firstDataPoint.balance\n                        ? new BigNumber(firstDataPoint.balance)\n                              .plus(firstDataPoint.sent ?? 0)\n                              .minus(firstDataPoint.received ?? 0)\n                              .toFixed()\n                        : undefined,\n                });\n            }\n        });\n\n        // real data points with txs\n        balanceData.push(...data);\n\n        // points for days with no transactions that are between first and last tx\n        timestamps.forEach(ts => {\n            if (\n                ts > firstDataPoint.time &&\n                ts < lastDataPoint.time &&\n                !data.find(d => d.time === ts)\n            ) {\n                const closest = data.findIndex(d => d.time >= ts);\n                balanceData.push({\n                    time: ts,\n                    sent: '0',\n                    received: '0',\n                    sentFiat: {},\n                    receivedFiat: {},\n                    balanceFiat: {},\n                    txs: 0,\n                    balance: data[closest - 1]?.balance ?? '0',\n                });\n            }\n        });\n\n        // fake points after last tx\n        timestamps.forEach(ts => {\n            if (ts > lastDataPoint.time) {\n                balanceData.push({\n                    time: ts,\n                    sent: '0',\n                    received: '0',\n                    sentFiat: {},\n                    receivedFiat: {},\n                    balanceFiat: {},\n                    txs: 0,\n                    balance: lastDataPoint.balance,\n                });\n            }\n        });\n    }\n\n    const sortedData = balanceData.sort((a, b) => Number(a.time) - Number(b.time));\n\n    return sortedData;\n};\n\nexport const enhanceBlockchainAccountHistory = (\n    data: BlockchainAccountBalanceHistory[],\n    symbol: Account['symbol'],\n) => {\n    let balance = '0';\n    const enhancedResponse = data.map(dataPoint => {\n        // subtract sentToSelf field as we don't want to include amounts received/sent to the same account\n        const normalizedReceived = dataPoint.sentToSelf\n            ? new BigNumber(dataPoint.received).minus(dataPoint.sentToSelf || 0).toFixed()\n            : dataPoint.received;\n        const normalizedSent = dataPoint.sentToSelf\n            ? new BigNumber(dataPoint.sent).minus(dataPoint.sentToSelf || 0).toFixed()\n            : dataPoint.sent;\n\n        const formattedReceived = formatNetworkAmount(normalizedReceived, symbol);\n        const formattedSent = formatNetworkAmount(normalizedSent, symbol);\n        balance = new BigNumber(balance).plus(formattedReceived).minus(formattedSent).toFixed();\n\n        return {\n            ...dataPoint,\n            received: formattedReceived,\n            sent: formattedSent,\n            time: resetTime(dataPoint.time),\n            balance,\n        };\n    });\n    return enhancedResponse;\n};\n","/* eslint-disable no-restricted-globals */\nimport { aggregateBalanceHistory } from '@wallet-utils/graphUtils';\n\nconst ctx: Worker = self as any;\n\ninterface CustomMessageEvent extends MessageEvent {\n    data: {\n        history: any;\n        groupBy: any;\n        type: any;\n    };\n}\n\nctx.addEventListener('message', (event: CustomMessageEvent) => {\n    const result = aggregateBalanceHistory(event.data.history, event.data.groupBy, event.data.type);\n    ctx.postMessage(result);\n});\n\n// // Trickery to fix TypeScript since this will be done by \"worker-loader\"\nexport default {} as typeof Worker & (new () => Worker);\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.1\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2020 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                    // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz';\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n"],"sourceRoot":""}